"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/docxtemplater";
exports.ids = ["vendor-chunks/docxtemplater"];
exports.modules = {

/***/ "(rsc)/./node_modules/docxtemplater/js/collect-content-types.js":
/*!****************************************************************!*\
  !*** ./node_modules/docxtemplater/js/collect-content-types.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar ctXML = \"[Content_Types].xml\";\nfunction collectContentTypes(overrides, defaults, zip) {\n    var partNames = {};\n    for(var _i2 = 0; _i2 < overrides.length; _i2++){\n        var override = overrides[_i2];\n        var contentType = override.getAttribute(\"ContentType\");\n        var partName = override.getAttribute(\"PartName\").substr(1);\n        partNames[partName] = contentType;\n    }\n    var _loop = function _loop() {\n        var def = defaults[_i4];\n        var contentType = def.getAttribute(\"ContentType\");\n        var extension = def.getAttribute(\"Extension\");\n        zip.file(/./).map(function(_ref) {\n            var name = _ref.name;\n            if (name.slice(name.length - extension.length) === extension && !partNames[name] && name !== ctXML) {\n                partNames[name] = contentType;\n            }\n        });\n    };\n    for(var _i4 = 0; _i4 < defaults.length; _i4++){\n        _loop();\n    }\n    return partNames;\n}\nmodule.exports = collectContentTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb2xsZWN0LWNvbnRlbnQtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRO0FBQ1osU0FBU0Msb0JBQW9CQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsR0FBRztJQUNuRCxJQUFJQyxZQUFZLENBQUM7SUFDakIsSUFBSyxJQUFJQyxNQUFNLEdBQUdBLE1BQU1KLFVBQVVLLE1BQU0sRUFBRUQsTUFBTztRQUMvQyxJQUFJRSxXQUFXTixTQUFTLENBQUNJLElBQUk7UUFDN0IsSUFBSUcsY0FBY0QsU0FBU0UsWUFBWSxDQUFDO1FBQ3hDLElBQUlDLFdBQVdILFNBQVNFLFlBQVksQ0FBQyxZQUFZRSxNQUFNLENBQUM7UUFDeERQLFNBQVMsQ0FBQ00sU0FBUyxHQUFHRjtJQUN4QjtJQUNBLElBQUlJLFFBQVEsU0FBU0E7UUFDbkIsSUFBSUMsTUFBTVgsUUFBUSxDQUFDWSxJQUFJO1FBQ3ZCLElBQUlOLGNBQWNLLElBQUlKLFlBQVksQ0FBQztRQUNuQyxJQUFJTSxZQUFZRixJQUFJSixZQUFZLENBQUM7UUFDakNOLElBQUlhLElBQUksQ0FBQyxLQUFLQyxHQUFHLENBQUMsU0FBVUMsSUFBSTtZQUM5QixJQUFJQyxPQUFPRCxLQUFLQyxJQUFJO1lBQ3BCLElBQUlBLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS2IsTUFBTSxHQUFHUyxVQUFVVCxNQUFNLE1BQU1TLGFBQWEsQ0FBQ1gsU0FBUyxDQUFDZSxLQUFLLElBQUlBLFNBQVNwQixPQUFPO2dCQUNsR0ssU0FBUyxDQUFDZSxLQUFLLEdBQUdYO1lBQ3BCO1FBQ0Y7SUFDRjtJQUNBLElBQUssSUFBSU0sTUFBTSxHQUFHQSxNQUFNWixTQUFTSSxNQUFNLEVBQUVRLE1BQU87UUFDOUNGO0lBQ0Y7SUFDQSxPQUFPUjtBQUNUO0FBQ0FpQixPQUFPQyxPQUFPLEdBQUd0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jpa2UtcmVudGFsLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb2xsZWN0LWNvbnRlbnQtdHlwZXMuanM/NDhiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGN0WE1MID0gXCJbQ29udGVudF9UeXBlc10ueG1sXCI7XG5mdW5jdGlvbiBjb2xsZWN0Q29udGVudFR5cGVzKG92ZXJyaWRlcywgZGVmYXVsdHMsIHppcCkge1xuICB2YXIgcGFydE5hbWVzID0ge307XG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG92ZXJyaWRlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIG92ZXJyaWRlID0gb3ZlcnJpZGVzW19pMl07XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gb3ZlcnJpZGUuZ2V0QXR0cmlidXRlKFwiQ29udGVudFR5cGVcIik7XG4gICAgdmFyIHBhcnROYW1lID0gb3ZlcnJpZGUuZ2V0QXR0cmlidXRlKFwiUGFydE5hbWVcIikuc3Vic3RyKDEpO1xuICAgIHBhcnROYW1lc1twYXJ0TmFtZV0gPSBjb250ZW50VHlwZTtcbiAgfVxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICB2YXIgZGVmID0gZGVmYXVsdHNbX2k0XTtcbiAgICB2YXIgY29udGVudFR5cGUgPSBkZWYuZ2V0QXR0cmlidXRlKFwiQ29udGVudFR5cGVcIik7XG4gICAgdmFyIGV4dGVuc2lvbiA9IGRlZi5nZXRBdHRyaWJ1dGUoXCJFeHRlbnNpb25cIik7XG4gICAgemlwLmZpbGUoLy4vKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgaWYgKG5hbWUuc2xpY2UobmFtZS5sZW5ndGggLSBleHRlbnNpb24ubGVuZ3RoKSA9PT0gZXh0ZW5zaW9uICYmICFwYXJ0TmFtZXNbbmFtZV0gJiYgbmFtZSAhPT0gY3RYTUwpIHtcbiAgICAgICAgcGFydE5hbWVzW25hbWVdID0gY29udGVudFR5cGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGRlZmF1bHRzLmxlbmd0aDsgX2k0KyspIHtcbiAgICBfbG9vcCgpO1xuICB9XG4gIHJldHVybiBwYXJ0TmFtZXM7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3RDb250ZW50VHlwZXM7Il0sIm5hbWVzIjpbImN0WE1MIiwiY29sbGVjdENvbnRlbnRUeXBlcyIsIm92ZXJyaWRlcyIsImRlZmF1bHRzIiwiemlwIiwicGFydE5hbWVzIiwiX2kyIiwibGVuZ3RoIiwib3ZlcnJpZGUiLCJjb250ZW50VHlwZSIsImdldEF0dHJpYnV0ZSIsInBhcnROYW1lIiwic3Vic3RyIiwiX2xvb3AiLCJkZWYiLCJfaTQiLCJleHRlbnNpb24iLCJmaWxlIiwibWFwIiwiX3JlZiIsIm5hbWUiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/collect-content-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/content-types.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/content-types.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar coreContentType = \"application/vnd.openxmlformats-package.core-properties+xml\";\nvar appContentType = \"application/vnd.openxmlformats-officedocument.extended-properties+xml\";\nvar customContentType = \"application/vnd.openxmlformats-officedocument.custom-properties+xml\";\nvar settingsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\";\nvar diagramDataContentType = \"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\";\nvar diagramDrawingContentType = \"application/vnd.ms-office.drawingml.diagramDrawing+xml\";\nmodule.exports = {\n    settingsContentType: settingsContentType,\n    coreContentType: coreContentType,\n    appContentType: appContentType,\n    customContentType: customContentType,\n    diagramDataContentType: diagramDataContentType,\n    diagramDrawingContentType: diagramDrawingContentType\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9jb250ZW50LXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsa0JBQWtCO0FBQ3RCLElBQUlDLGlCQUFpQjtBQUNyQixJQUFJQyxvQkFBb0I7QUFDeEIsSUFBSUMsc0JBQXNCO0FBQzFCLElBQUlDLHlCQUF5QjtBQUM3QixJQUFJQyw0QkFBNEI7QUFDaENDLE9BQU9DLE9BQU8sR0FBRztJQUNmSixxQkFBcUJBO0lBQ3JCSCxpQkFBaUJBO0lBQ2pCQyxnQkFBZ0JBO0lBQ2hCQyxtQkFBbUJBO0lBQ25CRSx3QkFBd0JBO0lBQ3hCQywyQkFBMkJBO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2NvbnRlbnQtdHlwZXMuanM/MmM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvcmVDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UuY29yZS1wcm9wZXJ0aWVzK3htbFwiO1xudmFyIGFwcENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZXh0ZW5kZWQtcHJvcGVydGllcyt4bWxcIjtcbnZhciBjdXN0b21Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmN1c3RvbS1wcm9wZXJ0aWVzK3htbFwiO1xudmFyIHNldHRpbmdzQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnNldHRpbmdzK3htbFwiO1xudmFyIGRpYWdyYW1EYXRhQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbURhdGEreG1sXCI7XG52YXIgZGlhZ3JhbURyYXdpbmdDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS5kcmF3aW5nbWwuZGlhZ3JhbURyYXdpbmcreG1sXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0dGluZ3NDb250ZW50VHlwZTogc2V0dGluZ3NDb250ZW50VHlwZSxcbiAgY29yZUNvbnRlbnRUeXBlOiBjb3JlQ29udGVudFR5cGUsXG4gIGFwcENvbnRlbnRUeXBlOiBhcHBDb250ZW50VHlwZSxcbiAgY3VzdG9tQ29udGVudFR5cGU6IGN1c3RvbUNvbnRlbnRUeXBlLFxuICBkaWFncmFtRGF0YUNvbnRlbnRUeXBlOiBkaWFncmFtRGF0YUNvbnRlbnRUeXBlLFxuICBkaWFncmFtRHJhd2luZ0NvbnRlbnRUeXBlOiBkaWFncmFtRHJhd2luZ0NvbnRlbnRUeXBlXG59OyJdLCJuYW1lcyI6WyJjb3JlQ29udGVudFR5cGUiLCJhcHBDb250ZW50VHlwZSIsImN1c3RvbUNvbnRlbnRUeXBlIiwic2V0dGluZ3NDb250ZW50VHlwZSIsImRpYWdyYW1EYXRhQ29udGVudFR5cGUiLCJkaWFncmFtRHJhd2luZ0NvbnRlbnRUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/content-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/doc-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/docxtemplater/js/doc-utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nvar _require = __webpack_require__(/*! @xmldom/xmldom */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/index.js\"), DOMParser = _require.DOMParser, XMLSerializer = _require.XMLSerializer;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), throwXmlTagNotFound = _require2.throwXmlTagNotFound;\nvar _require3 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/docxtemplater/js/utils.js\"), last = _require3.last, first = _require3.first;\nfunction isWhiteSpace(value) {\n    return /^[ \\n\\r\\t]+$/.test(value);\n}\nfunction parser(tag) {\n    return {\n        get: function get(scope) {\n            if (tag === \".\") {\n                return scope;\n            }\n            if (scope) {\n                return scope[tag];\n            }\n            return scope;\n        }\n    };\n}\nvar attrToRegex = {};\nfunction setSingleAttribute(partValue, attr, attrValue) {\n    var regex;\n    // Stryker disable next-line all : because this is an optimisation\n    if (attrToRegex[attr]) {\n        regex = attrToRegex[attr];\n    } else {\n        regex = new RegExp(\"(<.* \".concat(attr, '=\")([^\"]*)(\".*)$'));\n        attrToRegex[attr] = regex;\n    }\n    if (regex.test(partValue)) {\n        return partValue.replace(regex, \"$1\".concat(attrValue, \"$3\"));\n    }\n    var end = partValue.lastIndexOf(\"/>\");\n    if (end === -1) {\n        end = partValue.lastIndexOf(\">\");\n    }\n    return partValue.substr(0, end) + \" \".concat(attr, '=\"').concat(attrValue, '\"') + partValue.substr(end);\n}\nfunction getSingleAttribute(value, attributeName) {\n    var index = value.indexOf(\" \".concat(attributeName, '=\"'));\n    if (index === -1) {\n        return null;\n    }\n    var startIndex = value.substr(index).search(/[\"']/) + index;\n    var endIndex = value.substr(startIndex + 1).search(/[\"']/) + startIndex;\n    return value.substr(startIndex + 1, endIndex - startIndex);\n}\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\nfunction startsWith(str, prefix) {\n    return str.substring(0, prefix.length) === prefix;\n}\nfunction getDuplicates(arr) {\n    var duplicates = [];\n    var hash = {}, result = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n        if (!hash[arr[i]]) {\n            hash[arr[i]] = true;\n            result.push(arr[i]);\n        } else {\n            duplicates.push(arr[i]);\n        }\n    }\n    return duplicates;\n}\nfunction uniq(arr) {\n    var hash = {}, result = [];\n    for(var i = 0, l = arr.length; i < l; ++i){\n        if (!hash[arr[i]]) {\n            hash[arr[i]] = true;\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nfunction chunkBy(parsed, f) {\n    var chunks = [\n        []\n    ];\n    for(var _i2 = 0; _i2 < parsed.length; _i2++){\n        var p = parsed[_i2];\n        var currentChunk = chunks[chunks.length - 1];\n        var res = f(p);\n        if (res === \"start\") {\n            chunks.push([\n                p\n            ]);\n        } else if (res === \"end\") {\n            currentChunk.push(p);\n            chunks.push([]);\n        } else {\n            currentChunk.push(p);\n        }\n    } // Remove empty chunks\n    var result = [];\n    for(var _i4 = 0; _i4 < chunks.length; _i4++){\n        var chunk = chunks[_i4];\n        if (chunk.length > 0) {\n            result.push(chunk);\n        }\n    }\n    return result;\n}\nfunction getDefaults() {\n    return {\n        errorLogging: \"json\",\n        stripInvalidXMLChars: false,\n        paragraphLoop: false,\n        nullGetter: function nullGetter(part) {\n            return part.module ? \"\" : \"undefined\";\n        },\n        xmlFileNames: [\n            \"[Content_Types].xml\"\n        ],\n        parser: parser,\n        linebreaks: false,\n        fileTypeConfig: null,\n        delimiters: {\n            start: \"{\",\n            end: \"}\"\n        },\n        syntax: {\n            changeDelimiterPrefix: \"=\"\n        }\n    };\n}\nfunction xml2str(xmlNode) {\n    return new XMLSerializer().serializeToString(xmlNode).replace(/xmlns(:[a-z0-9]+)?=\"\" ?/g, \"\");\n}\nfunction str2xml(str) {\n    if (str.charCodeAt(0) === 65279) {\n        // BOM sequence\n        str = str.substr(1);\n    }\n    return new DOMParser().parseFromString(str, \"text/xml\");\n}\nvar charMap = [\n    [\n        \"&\",\n        \"&amp;\"\n    ],\n    [\n        \"<\",\n        \"&lt;\"\n    ],\n    [\n        \">\",\n        \"&gt;\"\n    ],\n    [\n        '\"',\n        \"&quot;\"\n    ],\n    [\n        \"'\",\n        \"&apos;\"\n    ]\n];\nvar charMapRegexes = charMap.map(function(_ref) {\n    var _ref2 = _slicedToArray(_ref, 2), endChar = _ref2[0], startChar = _ref2[1];\n    return {\n        rstart: new RegExp(startChar, \"g\"),\n        rend: new RegExp(endChar, \"g\"),\n        start: startChar,\n        end: endChar\n    };\n});\nfunction wordToUtf8(string) {\n    for(var i = charMapRegexes.length - 1; i >= 0; i--){\n        var r = charMapRegexes[i];\n        string = string.replace(r.rstart, r.end);\n    }\n    return string;\n}\nfunction utf8ToWord(string) {\n    // To make sure that the object given is a string (this is a noop for strings).\n    string = string.toString();\n    var r;\n    for(var i = 0, l = charMapRegexes.length; i < l; i++){\n        r = charMapRegexes[i];\n        string = string.replace(r.rend, r.start);\n    }\n    return string;\n}\n// This function is written with for loops for performance\nfunction concatArrays(arrays) {\n    var result = [];\n    for(var _i6 = 0; _i6 < arrays.length; _i6++){\n        var array = arrays[_i6];\n        for(var _i8 = 0; _i8 < array.length; _i8++){\n            var el = array[_i8];\n            result.push(el);\n        }\n    }\n    return result;\n}\nfunction pushArray(array1, array2) {\n    if (!array2) {\n        return array1;\n    }\n    for(var i = 0, len = array2.length; i < len; i++){\n        array1.push(array2[i]);\n    }\n    return array1;\n}\nvar spaceRegexp = new RegExp(String.fromCharCode(160), \"g\");\nfunction convertSpaces(s) {\n    return s.replace(spaceRegexp, \" \");\n}\nfunction pregMatchAll(regex, content) {\n    /*\n   * Regex is a string, content is the content. It returns an array of all\n   * matches with their offset, for example:\n   *\n   * regex=la\n   * content=lolalolilala\n   *\n   * Returns:\n   *\n   * [\n   *    {array: {0: 'la'}, offset: 2},\n   *    {array: {0: 'la'}, offset: 8},\n   *    {array: {0: 'la'}, offset: 10}\n   * ]\n   */ var matchArray = [];\n    var match;\n    while((match = regex.exec(content)) != null){\n        matchArray.push({\n            array: match,\n            offset: match.index\n        });\n    }\n    return matchArray;\n}\nfunction isEnding(value, element) {\n    return value === \"</\" + element + \">\";\n}\nfunction isStarting(value, element) {\n    return value.indexOf(\"<\" + element) === 0 && [\n        \">\",\n        \" \",\n        \"/\"\n    ].indexOf(value[element.length + 1]) !== -1;\n}\nfunction getRight(parsed, element, index) {\n    var val = getRightOrNull(parsed, element, index);\n    if (val !== null) {\n        return val;\n    }\n    throwXmlTagNotFound({\n        position: \"right\",\n        element: element,\n        parsed: parsed,\n        index: index\n    });\n}\nfunction getRightOrNull(parsed, elements, index) {\n    if (typeof elements === \"string\") {\n        elements = [\n            elements\n        ];\n    }\n    var level = 1;\n    for(var i = index, l = parsed.length; i < l; i++){\n        var part = parsed[i];\n        for(var _i10 = 0, _elements2 = elements; _i10 < _elements2.length; _i10++){\n            var element = _elements2[_i10];\n            if (isEnding(part.value, element)) {\n                level--;\n            }\n            if (isStarting(part.value, element)) {\n                level++;\n            }\n            if (level === 0) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\nfunction getLeft(parsed, element, index) {\n    var val = getLeftOrNull(parsed, element, index);\n    if (val !== null) {\n        return val;\n    }\n    throwXmlTagNotFound({\n        position: \"left\",\n        element: element,\n        parsed: parsed,\n        index: index\n    });\n}\nfunction getLeftOrNull(parsed, elements, index) {\n    if (typeof elements === \"string\") {\n        elements = [\n            elements\n        ];\n    }\n    var level = 1;\n    for(var i = index; i >= 0; i--){\n        var part = parsed[i];\n        for(var _i12 = 0, _elements4 = elements; _i12 < _elements4.length; _i12++){\n            var element = _elements4[_i12];\n            if (isStarting(part.value, element)) {\n                level--;\n            }\n            if (isEnding(part.value, element)) {\n                level++;\n            }\n            if (level === 0) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\n/*\n * Stryker disable all : because those are functions that depend on the parsed\n * structure based and we don't want minimal code here, but rather code that\n * makes things clear.\n */ function isTagStart(tagType, _ref3) {\n    var type = _ref3.type, tag = _ref3.tag, position = _ref3.position;\n    return type === \"tag\" && tag === tagType && (position === \"start\" || position === \"selfclosing\");\n}\nfunction isTagEnd(tagType, _ref4) {\n    var type = _ref4.type, tag = _ref4.tag, position = _ref4.position;\n    return type === \"tag\" && tag === tagType && position === \"end\";\n}\nfunction isParagraphStart(_ref5) {\n    var type = _ref5.type, tag = _ref5.tag, position = _ref5.position;\n    return [\n        \"w:p\",\n        \"a:p\"\n    ].indexOf(tag) !== -1 && type === \"tag\" && position === \"start\";\n}\nfunction isParagraphEnd(_ref6) {\n    var type = _ref6.type, tag = _ref6.tag, position = _ref6.position;\n    return [\n        \"w:p\",\n        \"a:p\"\n    ].indexOf(tag) !== -1 && type === \"tag\" && position === \"end\";\n}\nfunction isTextStart(_ref7) {\n    var type = _ref7.type, position = _ref7.position, text = _ref7.text;\n    return text && type === \"tag\" && position === \"start\";\n}\nfunction isTextEnd(_ref8) {\n    var type = _ref8.type, position = _ref8.position, text = _ref8.text;\n    return text && type === \"tag\" && position === \"end\";\n}\nfunction isContent(_ref9) {\n    var type = _ref9.type, position = _ref9.position;\n    return type === \"placeholder\" || type === \"content\" && position === \"insidetag\";\n}\nfunction isModule(_ref10, modules) {\n    var module1 = _ref10.module, type = _ref10.type;\n    if (!(modules instanceof Array)) {\n        modules = [\n            modules\n        ];\n    }\n    return type === \"placeholder\" && modules.indexOf(module1) !== -1;\n}\n// Stryker restore all\nvar corruptCharacters = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/g;\n/*\n * 00    NUL '\\0' (null character)\n * 01    SOH (start of heading)\n * 02    STX (start of text)\n * 03    ETX (end of text)\n * 04    EOT (end of transmission)\n * 05    ENQ (enquiry)\n * 06    ACK (acknowledge)\n * 07    BEL '\\a' (bell)\n * 08    BS  '\\b' (backspace)\n * 0B    VT  '\\v' (vertical tab)\n * 0C    FF  '\\f' (form feed)\n * 0E    SO  (shift out)\n * 0F    SI  (shift in)\n * 10    DLE (data link escape)\n * 11    DC1 (device control 1)\n * 12    DC2 (device control 2)\n * 13    DC3 (device control 3)\n * 14    DC4 (device control 4)\n * 15    NAK (negative ack.)\n * 16    SYN (synchronous idle)\n * 17    ETB (end of trans. blk)\n * 18    CAN (cancel)\n * 19    EM  (end of medium)\n * 1A    SUB (substitute)\n * 1B    ESC (escape)\n * 1C    FS  (file separator)\n * 1D    GS  (group separator)\n * 1E    RS  (record separator)\n * 1F    US  (unit separator)\n */ function hasCorruptCharacters(string) {\n    corruptCharacters.lastIndex = 0;\n    return corruptCharacters.test(string);\n}\nfunction removeCorruptCharacters(string) {\n    if (typeof string !== \"string\") {\n        string = String(string);\n    }\n    return string.replace(corruptCharacters, \"\");\n}\nfunction invertMap(map) {\n    var invertedMap = {};\n    for(var key in map){\n        var value = map[key];\n        invertedMap[value] || (invertedMap[value] = []);\n        invertedMap[value].push(key);\n    }\n    return invertedMap;\n}\n/*\n * This ensures that the sort is stable. The default Array.sort of the browser\n * is not stable in firefox, as the JS spec does not enforce the sort to be\n * stable.\n */ function stableSort(arr, compare) {\n    // Stryker disable all : in previous versions of Chrome, sort was not stable by itself, so we had to add this. This is to support older versions of JS runners.\n    return arr.map(function(item, index) {\n        return {\n            item: item,\n            index: index\n        };\n    }).sort(function(a, b) {\n        return compare(a.item, b.item) || a.index - b.index;\n    }).map(function(_ref11) {\n        var item = _ref11.item;\n        return item;\n    });\n// Stryker restore all\n}\nmodule.exports = {\n    endsWith: endsWith,\n    startsWith: startsWith,\n    isContent: isContent,\n    isParagraphStart: isParagraphStart,\n    isParagraphEnd: isParagraphEnd,\n    isTagStart: isTagStart,\n    isTagEnd: isTagEnd,\n    isTextStart: isTextStart,\n    isTextEnd: isTextEnd,\n    isStarting: isStarting,\n    isEnding: isEnding,\n    isModule: isModule,\n    uniq: uniq,\n    getDuplicates: getDuplicates,\n    chunkBy: chunkBy,\n    last: last,\n    first: first,\n    xml2str: xml2str,\n    str2xml: str2xml,\n    getRightOrNull: getRightOrNull,\n    getRight: getRight,\n    getLeftOrNull: getLeftOrNull,\n    getLeft: getLeft,\n    pregMatchAll: pregMatchAll,\n    convertSpaces: convertSpaces,\n    charMapRegexes: charMapRegexes,\n    hasCorruptCharacters: hasCorruptCharacters,\n    removeCorruptCharacters: removeCorruptCharacters,\n    getDefaults: getDefaults,\n    wordToUtf8: wordToUtf8,\n    utf8ToWord: utf8ToWord,\n    concatArrays: concatArrays,\n    pushArray: pushArray,\n    invertMap: invertMap,\n    charMap: charMap,\n    getSingleAttribute: getSingleAttribute,\n    setSingleAttribute: setSingleAttribute,\n    isWhiteSpace: isWhiteSpace,\n    stableSort: stableSort\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/doc-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/docxtemplater.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/docxtemplater.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _excluded = [\n    \"modules\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _objectWithoutProperties(e, t) {\n    if (null == e) return {};\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n        var n = Object.getOwnPropertySymbols(e);\n        for(r = 0; r < n.length; r++)o = n[r], -1 === t.indexOf(o) && ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n    }\n    return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) return {};\n    var t = {};\n    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n        if (-1 !== e.indexOf(n)) continue;\n        t[n] = r[n];\n    }\n    return t;\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar DocUtils = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\");\nDocUtils.traits = __webpack_require__(/*! ./traits.js */ \"(rsc)/./node_modules/docxtemplater/js/traits.js\");\nDocUtils.moduleWrapper = __webpack_require__(/*! ./module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar commonModule = __webpack_require__(/*! ./modules/common.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/common.js\");\nvar createScope = __webpack_require__(/*! ./scope-manager.js */ \"(rsc)/./node_modules/docxtemplater/js/scope-manager.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(rsc)/./node_modules/docxtemplater/js/lexer.js\");\nvar _require = __webpack_require__(/*! ./get-tags.js */ \"(rsc)/./node_modules/docxtemplater/js/get-tags.js\"), _getTags = _require.getTags;\nvar logErrors = __webpack_require__(/*! ./error-logger.js */ \"(rsc)/./node_modules/docxtemplater/js/error-logger.js\");\nvar collectContentTypes = __webpack_require__(/*! ./collect-content-types.js */ \"(rsc)/./node_modules/docxtemplater/js/collect-content-types.js\");\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), throwMultiError = _require2.throwMultiError, throwResolveBeforeCompile = _require2.throwResolveBeforeCompile, throwRenderInvalidTemplate = _require2.throwRenderInvalidTemplate, throwRenderTwice = _require2.throwRenderTwice, XTInternalError = _require2.XTInternalError, XTTemplateError = _require2.XTTemplateError, throwFileTypeNotIdentified = _require2.throwFileTypeNotIdentified, throwFileTypeNotHandled = _require2.throwFileTypeNotHandled, throwApiVersionError = _require2.throwApiVersionError;\nvar getDefaults = DocUtils.getDefaults, str2xml = DocUtils.str2xml, xml2str = DocUtils.xml2str, moduleWrapper = DocUtils.moduleWrapper, concatArrays = DocUtils.concatArrays, uniq = DocUtils.uniq, getDuplicates = DocUtils.getDuplicates, stableSort = DocUtils.stableSort, pushArray = DocUtils.pushArray;\nvar ctXML = \"[Content_Types].xml\";\nvar relsFile = \"_rels/.rels\";\nvar currentModuleApiVersion = [\n    3,\n    46,\n    0\n];\nfunction zipFileOrder(files) {\n    var allFiles = [];\n    for(var name in files){\n        allFiles.push(name);\n    }\n    /*\n   * The first files that need to be put in the zip file are :\n   * [Content_Types].xml and _rels/.rels\n   */ var resultFiles = [\n        ctXML,\n        relsFile\n    ];\n    /*\n   * The next files that should be in the zip file are :\n   *\n   * - word/* (ie word/document.xml, word/header1.xml, ...)\n   * - xl/* (ie xl/worksheets/sheet1.xml)\n   * - ppt/* (ie ppt/slides/slide1.xml)\n   */ var prefixes = [\n        \"word/\",\n        \"xl/\",\n        \"ppt/\"\n    ];\n    for(var _i2 = 0; _i2 < allFiles.length; _i2++){\n        var _name = allFiles[_i2];\n        for(var _i4 = 0; _i4 < prefixes.length; _i4++){\n            var prefix = prefixes[_i4];\n            if (_name.indexOf(\"\".concat(prefix)) === 0) {\n                resultFiles.push(_name);\n            }\n        }\n    }\n    /*\n   * Push the rest of files, such as docProps/core.xml and docProps/app.xml\n   */ for(var _i6 = 0; _i6 < allFiles.length; _i6++){\n        var _name2 = allFiles[_i6];\n        if (resultFiles.indexOf(_name2) === -1) {\n            resultFiles.push(_name2);\n        }\n    }\n    return resultFiles;\n}\nfunction deprecatedMessage(obj, message) {\n    if (obj.hideDeprecations === true) {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn(message);\n}\nfunction deprecatedMethod(obj, method) {\n    if (obj.hideDeprecations === true) {\n        return;\n    }\n    return deprecatedMessage(obj, 'Deprecated method \".'.concat(method, '\", view upgrade guide : https://docxtemplater.com/docs/api/#upgrade-guide, stack : ').concat(new Error().stack));\n}\nfunction dropUnsupportedFileTypesModules(doc) {\n    doc.modules = doc.modules.filter(function(module1) {\n        if (!module1.supportedFileTypes) {\n            return true;\n        }\n        if (!Array.isArray(module1.supportedFileTypes)) {\n            throw new Error(\"The supportedFileTypes field of the module must be an array\");\n        }\n        var isSupportedModule = module1.supportedFileTypes.includes(doc.fileType);\n        if (!isSupportedModule) {\n            module1.on(\"detached\");\n        }\n        return isSupportedModule;\n    });\n}\nfunction verifyErrors(doc) {\n    var compiled = doc.compiled;\n    doc.errors = concatArrays(Object.keys(compiled).map(function(name) {\n        return compiled[name].allErrors;\n    }));\n    if (doc.errors.length !== 0) {\n        if (doc.options.errorLogging) {\n            logErrors(doc.errors, doc.options.errorLogging);\n        }\n        throwMultiError(doc.errors);\n    }\n}\nvar Docxtemplater = /*#__PURE__*/ function() {\n    function Docxtemplater(zip) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$modules = _ref.modules, modules = _ref$modules === void 0 ? [] : _ref$modules, options = _objectWithoutProperties(_ref, _excluded);\n        _classCallCheck(this, Docxtemplater);\n        this.targets = [];\n        this.rendered = false;\n        this.scopeManagers = {};\n        this.compiled = {};\n        this.modules = [\n            commonModule()\n        ];\n        this.xmlDocuments = {};\n        if (arguments.length === 0) {\n            deprecatedMessage(this, \"Deprecated docxtemplater constructor with no arguments, view upgrade guide : https://docxtemplater.com/docs/api/#upgrade-guide, stack : \".concat(new Error().stack));\n            this.hideDeprecations = true;\n            this.setOptions(options);\n        } else {\n            this.hideDeprecations = true;\n            this.setOptions(options);\n            if (!zip || !zip.files || typeof zip.file !== \"function\") {\n                throw new Error(\"The first argument of docxtemplater's constructor must be a valid zip file (jszip v2 or pizzip v3)\");\n            }\n            if (!Array.isArray(modules)) {\n                throw new Error(\"The modules argument of docxtemplater's constructor must be an array\");\n            }\n            for(var _i8 = 0; _i8 < modules.length; _i8++){\n                var _module = modules[_i8];\n                this.attachModule(_module);\n            }\n            this.loadZip(zip);\n            this.compile();\n            this.v4Constructor = true;\n        }\n        this.hideDeprecations = false;\n    }\n    return _createClass(Docxtemplater, [\n        {\n            key: \"verifyApiVersion\",\n            value: function verifyApiVersion(neededVersion) {\n                neededVersion = neededVersion.split(\".\").map(function(i) {\n                    return parseInt(i, 10);\n                });\n                if (neededVersion.length !== 3) {\n                    throwApiVersionError(\"neededVersion is not a valid version\", {\n                        neededVersion: neededVersion,\n                        explanation: \"the neededVersion must be an array of length 3\"\n                    });\n                }\n                if (neededVersion[0] !== currentModuleApiVersion[0]) {\n                    throwApiVersionError(\"The major api version do not match, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                if (neededVersion[1] > currentModuleApiVersion[1]) {\n                    throwApiVersionError(\"The minor api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                if (neededVersion[1] === currentModuleApiVersion[1] && neededVersion[2] > currentModuleApiVersion[2]) {\n                    throwApiVersionError(\"The patch api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater\", {\n                        neededVersion: neededVersion,\n                        currentModuleApiVersion: currentModuleApiVersion,\n                        explanation: \"moduleAPIVersionMismatch : needed=\".concat(neededVersion.join(\".\"), \", current=\").concat(currentModuleApiVersion.join(\".\"))\n                    });\n                }\n                return true;\n            }\n        },\n        {\n            key: \"setModules\",\n            value: function setModules(obj) {\n                for(var _i10 = 0, _this$modules2 = this.modules; _i10 < _this$modules2.length; _i10++){\n                    var _module2 = _this$modules2[_i10];\n                    _module2.set(obj);\n                }\n            }\n        },\n        {\n            key: \"sendEvent\",\n            value: function sendEvent(eventName) {\n                for(var _i12 = 0, _this$modules4 = this.modules; _i12 < _this$modules4.length; _i12++){\n                    var _module3 = _this$modules4[_i12];\n                    _module3.on(eventName);\n                }\n            }\n        },\n        {\n            key: \"attachModule\",\n            value: function attachModule(module1) {\n                if (this.v4Constructor) {\n                    throw new XTInternalError(\"attachModule() should not be called manually when using the v4 constructor\");\n                }\n                deprecatedMethod(this, \"attachModule\");\n                var moduleType = _typeof(module1);\n                if (moduleType === \"function\") {\n                    throw new XTInternalError(\"Cannot attach a class/function as a module. Most probably you forgot to instantiate the module by using `new` on the module.\");\n                }\n                if (!module1 || moduleType !== \"object\") {\n                    throw new XTInternalError(\"Cannot attachModule with a falsy value\");\n                }\n                if (module1.requiredAPIVersion) {\n                    this.verifyApiVersion(module1.requiredAPIVersion);\n                }\n                if (module1.attached === true) {\n                    if (typeof module1.clone === \"function\") {\n                        module1 = module1.clone();\n                    } else {\n                        throw new Error('Cannot attach a module that was already attached : \"'.concat(module1.name, '\". The most likely cause is that you are instantiating the module at the root level, and using it for multiple instances of Docxtemplater'));\n                    }\n                }\n                module1.attached = true;\n                var wrappedModule = moduleWrapper(module1);\n                this.modules.push(wrappedModule);\n                wrappedModule.on(\"attached\");\n                if (this.fileType) {\n                    dropUnsupportedFileTypesModules(this);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"setOptions\",\n            value: function setOptions(options) {\n                var _this$delimiters, _this$delimiters2;\n                if (this.v4Constructor) {\n                    throw new Error(\"setOptions() should not be called manually when using the v4 constructor\");\n                }\n                deprecatedMethod(this, \"setOptions\");\n                if (!options) {\n                    throw new Error(\"setOptions should be called with an object as first parameter\");\n                }\n                this.options = {};\n                var defaults = getDefaults();\n                for(var key in defaults){\n                    var defaultValue = defaults[key];\n                    this.options[key] = options[key] != null ? options[key] : this[key] || defaultValue;\n                    this[key] = this.options[key];\n                }\n                (_this$delimiters = this.delimiters).start && (_this$delimiters.start = DocUtils.utf8ToWord(this.delimiters.start));\n                (_this$delimiters2 = this.delimiters).end && (_this$delimiters2.end = DocUtils.utf8ToWord(this.delimiters.end));\n                return this;\n            }\n        },\n        {\n            key: \"loadZip\",\n            value: function loadZip(zip) {\n                if (this.v4Constructor) {\n                    throw new Error(\"loadZip() should not be called manually when using the v4 constructor\");\n                }\n                deprecatedMethod(this, \"loadZip\");\n                if (zip.loadAsync) {\n                    throw new XTInternalError(\"Docxtemplater doesn't handle JSZip version >=3, please use pizzip\");\n                }\n                this.zip = zip;\n                this.updateFileTypeConfig();\n                this.modules = concatArrays([\n                    this.fileTypeConfig.baseModules.map(function(moduleFunction) {\n                        return moduleFunction();\n                    }),\n                    this.modules\n                ]);\n                for(var _i14 = 0, _this$modules6 = this.modules; _i14 < _this$modules6.length; _i14++){\n                    var _module4 = _this$modules6[_i14];\n                    _module4.zip = this.zip;\n                    _module4.docxtemplater = this;\n                }\n                dropUnsupportedFileTypesModules(this);\n                return this;\n            }\n        },\n        {\n            key: \"precompileFile\",\n            value: function precompileFile(fileName) {\n                var currentFile = this.createTemplateClass(fileName);\n                currentFile.preparse();\n                this.compiled[fileName] = currentFile;\n            }\n        },\n        {\n            key: \"compileFile\",\n            value: function compileFile(fileName) {\n                this.compiled[fileName].parse();\n            }\n        },\n        {\n            key: \"getScopeManager\",\n            value: function getScopeManager(to, currentFile, tags) {\n                var _this$scopeManagers;\n                (_this$scopeManagers = this.scopeManagers)[to] || (_this$scopeManagers[to] = createScope({\n                    tags: tags,\n                    parser: this.parser,\n                    cachedParsers: currentFile.cachedParsers\n                }));\n                return this.scopeManagers[to];\n            }\n        },\n        {\n            key: \"resolveData\",\n            value: function resolveData(data) {\n                var _this = this;\n                deprecatedMethod(this, \"resolveData\");\n                var errors = [];\n                if (!Object.keys(this.compiled).length) {\n                    throwResolveBeforeCompile();\n                }\n                return Promise.resolve(data).then(function(data) {\n                    _this.data = data;\n                    _this.setModules({\n                        data: _this.data,\n                        Lexer: Lexer\n                    });\n                    _this.mapper = _this.modules.reduce(function(value, module1) {\n                        return module1.getRenderedMap(value);\n                    }, {});\n                    return Promise.all(Object.keys(_this.mapper).map(function(to) {\n                        var _this$mapper$to = _this.mapper[to], from = _this$mapper$to.from, data = _this$mapper$to.data;\n                        return Promise.resolve(data).then(function(data) {\n                            var currentFile = _this.compiled[from];\n                            currentFile.filePath = to;\n                            currentFile.scopeManager = _this.getScopeManager(to, currentFile, data);\n                            return currentFile.resolveTags(data).then(function(result) {\n                                currentFile.scopeManager.finishedResolving = true;\n                                return result;\n                            }, function(errs) {\n                                pushArray(errors, errs);\n                            });\n                        });\n                    })).then(function(resolved) {\n                        if (errors.length !== 0) {\n                            if (_this.options.errorLogging) {\n                                logErrors(errors, _this.options.errorLogging);\n                            }\n                            throwMultiError(errors);\n                        }\n                        return concatArrays(resolved);\n                    });\n                });\n            }\n        },\n        {\n            key: \"reorderModules\",\n            value: function reorderModules() {\n                /**\n       * Modules will be sorted according to priority.\n       *\n       * Input example:\n       * [\n       *   { priority: 1, name: \"FooMod\" },\n       *   { priority: -1, name: \"XMod\" },\n       *   { priority: 4, name: \"OtherMod\" }\n       * ]\n       *\n       * Output example (sorted by priority in descending order):\n       * [\n       *   { priority: 4, name: \"OtherMod\" },\n       *   { priority: 1, name: \"FooMod\" },\n       *   { priority: -1, name: \"XMod\" }\n       * ]\n       * Tested in #test-reorder-modules\n       */ this.modules = stableSort(this.modules, function(m1, m2) {\n                    return (m2.priority || 0) - (m1.priority || 0);\n                });\n            }\n        },\n        {\n            key: \"throwIfDuplicateModules\",\n            value: function throwIfDuplicateModules() {\n                var duplicates = getDuplicates(this.modules.map(function(_ref2) {\n                    var name = _ref2.name;\n                    return name;\n                }));\n                if (duplicates.length > 0) {\n                    throw new XTInternalError('Detected duplicate module \"'.concat(duplicates[0], '\"'));\n                }\n            }\n        },\n        {\n            key: \"compile\",\n            value: function compile() {\n                var _this2 = this;\n                deprecatedMethod(this, \"compile\");\n                this.updateFileTypeConfig();\n                this.throwIfDuplicateModules();\n                this.reorderModules();\n                if (Object.keys(this.compiled).length) {\n                    return this;\n                }\n                this.options = this.modules.reduce(function(options, module1) {\n                    return module1.optionsTransformer(options, _this2);\n                }, this.options);\n                this.options.xmlFileNames = uniq(this.options.xmlFileNames);\n                for(var _i16 = 0, _this$options$xmlFile2 = this.options.xmlFileNames; _i16 < _this$options$xmlFile2.length; _i16++){\n                    var fileName = _this$options$xmlFile2[_i16];\n                    var content = this.zip.files[fileName].asText();\n                    this.xmlDocuments[fileName] = str2xml(content);\n                }\n                this.setModules({\n                    zip: this.zip,\n                    xmlDocuments: this.xmlDocuments\n                });\n                this.getTemplatedFiles();\n                /*\n       * Loop inside all templatedFiles (ie xml files with content).\n       * Sometimes they don't exist (footer.xml for example)\n       */ this.sendEvent(\"before-preparse\");\n                for(var _i18 = 0, _this$templatedFiles2 = this.templatedFiles; _i18 < _this$templatedFiles2.length; _i18++){\n                    var _fileName = _this$templatedFiles2[_i18];\n                    if (this.zip.files[_fileName] != null) {\n                        this.precompileFile(_fileName);\n                    }\n                }\n                this.sendEvent(\"after-preparse\");\n                for(var _i20 = 0, _this$templatedFiles4 = this.templatedFiles; _i20 < _this$templatedFiles4.length; _i20++){\n                    var _fileName2 = _this$templatedFiles4[_i20];\n                    if (this.zip.files[_fileName2] != null) {\n                        this.compiled[_fileName2].parse({\n                            noPostParse: true\n                        });\n                    }\n                }\n                this.sendEvent(\"after-parse\");\n                for(var _i22 = 0, _this$templatedFiles6 = this.templatedFiles; _i22 < _this$templatedFiles6.length; _i22++){\n                    var _fileName3 = _this$templatedFiles6[_i22];\n                    if (this.zip.files[_fileName3] != null) {\n                        this.compiled[_fileName3].postparse();\n                    }\n                }\n                this.sendEvent(\"after-postparse\");\n                this.setModules({\n                    compiled: this.compiled\n                });\n                verifyErrors(this);\n                return this;\n            }\n        },\n        {\n            key: \"getRelsTypes\",\n            value: function getRelsTypes() {\n                var rootRels = this.zip.files[relsFile];\n                var rootRelsXml = rootRels ? str2xml(rootRels.asText()) : null;\n                var rootRelationships = rootRelsXml ? rootRelsXml.getElementsByTagName(\"Relationship\") : [];\n                var relsTypes = {};\n                for(var _i24 = 0; _i24 < rootRelationships.length; _i24++){\n                    var relation = rootRelationships[_i24];\n                    relsTypes[relation.getAttribute(\"Target\")] = relation.getAttribute(\"Type\");\n                }\n                return relsTypes;\n            }\n        },\n        {\n            key: \"getContentTypes\",\n            value: function getContentTypes() {\n                var contentTypes = this.zip.files[ctXML];\n                var contentTypeXml = contentTypes ? str2xml(contentTypes.asText()) : null;\n                var overrides = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Override\") : null;\n                var defaults = contentTypeXml ? contentTypeXml.getElementsByTagName(\"Default\") : null;\n                return {\n                    overrides: overrides,\n                    defaults: defaults,\n                    contentTypes: contentTypes,\n                    contentTypeXml: contentTypeXml\n                };\n            }\n        },\n        {\n            key: \"updateFileTypeConfig\",\n            value: function updateFileTypeConfig() {\n                this.relsTypes = this.getRelsTypes();\n                var _this$getContentTypes = this.getContentTypes(), overrides = _this$getContentTypes.overrides, defaults = _this$getContentTypes.defaults, contentTypes = _this$getContentTypes.contentTypes, contentTypeXml = _this$getContentTypes.contentTypeXml;\n                if (contentTypeXml) {\n                    this.filesContentTypes = collectContentTypes(overrides, defaults, this.zip);\n                    this.invertedContentTypes = DocUtils.invertMap(this.filesContentTypes);\n                    this.setModules({\n                        contentTypes: this.contentTypes,\n                        invertedContentTypes: this.invertedContentTypes\n                    });\n                }\n                var fileType;\n                if (this.zip.files.mimetype) {\n                    fileType = \"odt\";\n                }\n                for(var _i26 = 0, _this$modules8 = this.modules; _i26 < _this$modules8.length; _i26++){\n                    var _module5 = _this$modules8[_i26];\n                    fileType = _module5.getFileType({\n                        zip: this.zip,\n                        contentTypes: contentTypes,\n                        contentTypeXml: contentTypeXml,\n                        overrides: overrides,\n                        defaults: defaults,\n                        doc: this\n                    }) || fileType;\n                }\n                if (fileType === \"odt\") {\n                    throwFileTypeNotHandled(fileType);\n                }\n                if (!fileType) {\n                    throwFileTypeNotIdentified(this.zip);\n                }\n                for(var _i28 = 0, _this$modules10 = this.modules; _i28 < _this$modules10.length; _i28++){\n                    var _module6 = _this$modules10[_i28];\n                    for(var _i30 = 0, _ref4 = _module6.xmlContentTypes || []; _i30 < _ref4.length; _i30++){\n                        var contentType = _ref4[_i30];\n                        pushArray(this.options.xmlFileNames, this.invertedContentTypes[contentType] || []);\n                    }\n                }\n                this.fileType = fileType;\n                dropUnsupportedFileTypesModules(this);\n                this.fileTypeConfig = this.options.fileTypeConfig || this.fileTypeConfig;\n                if (!this.fileTypeConfig) {\n                    if (Docxtemplater.FileTypeConfig[this.fileType]) {\n                        this.fileTypeConfig = Docxtemplater.FileTypeConfig[this.fileType]();\n                    } else {\n                        /*\n           * Error case handled since v3.60.2\n           * Throw specific error when trying to template xlsx file without xlsxmodule\n           */ var message = 'Filetype \"'.concat(this.fileType, '\" is not supported');\n                        var id = \"filetype_not_supported\";\n                        if (this.fileType === \"xlsx\") {\n                            message = 'Filetype \"'.concat(this.fileType, '\" is supported only with the paid XlsxModule');\n                            id = \"xlsx_filetype_needs_xlsx_module\";\n                        }\n                        var err = new XTTemplateError(message);\n                        err.properties = {\n                            id: id,\n                            explanation: message\n                        };\n                        throw err;\n                    }\n                }\n                return this;\n            }\n        },\n        {\n            key: \"renderAsync\",\n            value: function renderAsync(data) {\n                var _this3 = this;\n                this.hideDeprecations = true;\n                var promise = this.resolveData(data);\n                this.hideDeprecations = false;\n                return promise.then(function() {\n                    return _this3.render();\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(data) {\n                if (this.rendered) {\n                    throwRenderTwice();\n                }\n                this.rendered = true;\n                if (Object.keys(this.compiled).length === 0) {\n                    this.compile();\n                }\n                if (this.errors.length > 0) {\n                    throwRenderInvalidTemplate();\n                }\n                if (arguments.length > 0) {\n                    this.data = data;\n                }\n                this.setModules({\n                    data: this.data,\n                    Lexer: Lexer\n                });\n                this.mapper || (this.mapper = this.modules.reduce(function(value, module1) {\n                    return module1.getRenderedMap(value);\n                }, {}));\n                var output = [];\n                for(var to in this.mapper){\n                    var _this$mapper$to2 = this.mapper[to], from = _this$mapper$to2.from, _data = _this$mapper$to2.data;\n                    var currentFile = this.compiled[from];\n                    currentFile.scopeManager = this.getScopeManager(to, currentFile, _data);\n                    currentFile.render(to);\n                    output.push([\n                        to,\n                        currentFile.content,\n                        currentFile\n                    ]);\n                    delete currentFile.content;\n                }\n                for(var _i32 = 0; _i32 < output.length; _i32++){\n                    var outputPart = output[_i32];\n                    var _outputPart = _slicedToArray(outputPart, 3), content = _outputPart[1], _currentFile = _outputPart[2];\n                    for(var _i34 = 0, _this$modules12 = this.modules; _i34 < _this$modules12.length; _i34++){\n                        var _module7 = _this$modules12[_i34];\n                        if (_module7.preZip) {\n                            var result = _module7.preZip(content, _currentFile);\n                            if (typeof result === \"string\") {\n                                outputPart[1] = result;\n                            }\n                        }\n                    }\n                }\n                for(var _i36 = 0; _i36 < output.length; _i36++){\n                    var _output$_i = _slicedToArray(output[_i36], 2), _to = _output$_i[0], _content = _output$_i[1];\n                    this.zip.file(_to, _content, {\n                        createFolders: true\n                    });\n                }\n                verifyErrors(this);\n                this.sendEvent(\"syncing-zip\");\n                this.syncZip();\n                // The synced-zip event is used in the subtemplate module for example\n                this.sendEvent(\"synced-zip\");\n                return this;\n            }\n        },\n        {\n            key: \"syncZip\",\n            value: function syncZip() {\n                for(var fileName in this.xmlDocuments){\n                    this.zip.remove(fileName);\n                    var content = xml2str(this.xmlDocuments[fileName]);\n                    this.zip.file(fileName, content, {\n                        createFolders: true\n                    });\n                }\n            }\n        },\n        {\n            key: \"setData\",\n            value: function setData(data) {\n                deprecatedMethod(this, \"setData\");\n                this.data = data;\n                return this;\n            }\n        },\n        {\n            key: \"getZip\",\n            value: function getZip() {\n                return this.zip;\n            }\n        },\n        {\n            key: \"createTemplateClass\",\n            value: function createTemplateClass(path) {\n                var content = this.zip.files[path].asText();\n                return this.createTemplateClassFromContent(content, path);\n            }\n        },\n        {\n            key: \"createTemplateClassFromContent\",\n            value: function createTemplateClassFromContent(content, filePath) {\n                var xmltOptions = {\n                    filePath: filePath,\n                    contentType: this.filesContentTypes[filePath],\n                    relsType: this.relsTypes[filePath]\n                };\n                var defaults = getDefaults();\n                var defaultKeys = pushArray(Object.keys(defaults), [\n                    \"filesContentTypes\",\n                    \"fileTypeConfig\",\n                    \"fileType\",\n                    \"modules\"\n                ]);\n                for(var _i38 = 0; _i38 < defaultKeys.length; _i38++){\n                    var key = defaultKeys[_i38];\n                    xmltOptions[key] = this[key];\n                }\n                return new Docxtemplater.XmlTemplater(content, xmltOptions);\n            }\n        },\n        {\n            key: \"getFullText\",\n            value: function getFullText(path) {\n                return this.createTemplateClass(path || this.fileTypeConfig.textPath(this)).getFullText();\n            }\n        },\n        {\n            key: \"getTemplatedFiles\",\n            value: function getTemplatedFiles() {\n                this.templatedFiles = this.fileTypeConfig.getTemplatedFiles(this.zip);\n                pushArray(this.templatedFiles, this.targets);\n                this.templatedFiles = uniq(this.templatedFiles);\n                return this.templatedFiles;\n            }\n        },\n        {\n            key: \"getTags\",\n            value: function getTags() {\n                var result = {\n                    headers: [],\n                    footers: []\n                };\n                for(var key in this.compiled){\n                    var contentType = this.filesContentTypes[key];\n                    if (contentType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\") {\n                        result.document = {\n                            target: key,\n                            tags: _getTags(this.compiled[key].postparsed)\n                        };\n                    }\n                    if (contentType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\") {\n                        result.headers.push({\n                            target: key,\n                            tags: _getTags(this.compiled[key].postparsed)\n                        });\n                    }\n                    if (contentType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\") {\n                        result.footers.push({\n                            target: key,\n                            tags: _getTags(this.compiled[key].postparsed)\n                        });\n                    }\n                }\n                return result;\n            }\n        },\n        {\n            key: \"toBuffer\",\n            value: function toBuffer(options) {\n                return this.getZip().generate(_objectSpread(_objectSpread({\n                    compression: \"DEFLATE\",\n                    fileOrder: zipFileOrder\n                }, options), {}, {\n                    type: \"nodebuffer\"\n                }));\n            }\n        },\n        {\n            key: \"toBlob\",\n            value: function toBlob(options) {\n                return this.getZip().generate(_objectSpread(_objectSpread({\n                    compression: \"DEFLATE\",\n                    fileOrder: zipFileOrder\n                }, options), {}, {\n                    type: \"blob\"\n                }));\n            }\n        },\n        {\n            key: \"toBase64\",\n            value: function toBase64(options) {\n                return this.getZip().generate(_objectSpread(_objectSpread({\n                    compression: \"DEFLATE\",\n                    fileOrder: zipFileOrder\n                }, options), {}, {\n                    type: \"base64\"\n                }));\n            }\n        },\n        {\n            key: \"toUint8Array\",\n            value: function toUint8Array(options) {\n                return this.getZip().generate(_objectSpread(_objectSpread({\n                    compression: \"DEFLATE\",\n                    fileOrder: zipFileOrder\n                }, options), {}, {\n                    type: \"uint8array\"\n                }));\n            }\n        },\n        {\n            key: \"toArrayBuffer\",\n            value: function toArrayBuffer(options) {\n                return this.getZip().generate(_objectSpread(_objectSpread({\n                    compression: \"DEFLATE\",\n                    fileOrder: zipFileOrder\n                }, options), {}, {\n                    type: \"arraybuffer\"\n                }));\n            }\n        }\n    ]);\n}();\nDocxtemplater.DocUtils = DocUtils;\nDocxtemplater.Errors = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\");\nDocxtemplater.XmlTemplater = __webpack_require__(/*! ./xml-templater.js */ \"(rsc)/./node_modules/docxtemplater/js/xml-templater.js\");\nDocxtemplater.FileTypeConfig = __webpack_require__(/*! ./file-type-config.js */ \"(rsc)/./node_modules/docxtemplater/js/file-type-config.js\");\nDocxtemplater.XmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(rsc)/./node_modules/docxtemplater/js/xml-matcher.js\");\nmodule.exports = Docxtemplater;\nmodule.exports[\"default\"] = Docxtemplater;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/docxtemplater.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/error-logger.js":
/*!*******************************************************!*\
  !*** ./node_modules/docxtemplater/js/error-logger.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pushArray = _require.pushArray;\n// The error thrown here contains additional information when logged with JSON.stringify (it contains a properties object containing all suberrors).\nfunction replaceErrors(key, value) {\n    if (value instanceof Error) {\n        return pushArray(Object.getOwnPropertyNames(value), [\n            \"stack\"\n        ]).reduce(function(error, key) {\n            error[key] = value[key];\n            if (key === \"stack\") {\n                // This is used because in Firefox, stack is not an own property\n                error[key] = value[key].toString();\n            }\n            return error;\n        }, {});\n    }\n    return value;\n}\nfunction logger(error, logging) {\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify({\n        error: error\n    }, replaceErrors, logging === \"json\" ? 2 : null));\n    if (error.properties && error.properties.errors instanceof Array) {\n        var errorMessages = error.properties.errors.map(function(error) {\n            return error.properties.explanation;\n        }).join(\"\\n\");\n        // eslint-disable-next-line no-console\n        console.log(\"errorMessages\", errorMessages);\n    /*\n     * errorMessages is a humanly readable message looking like this :\n     * 'The tag beginning with \"foobar\" is unopened'\n     */ }\n}\nmodule.exports = logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9lcnJvci1sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQywwRUFBZ0IsR0FDckNDLFlBQVlGLFNBQVNFLFNBQVM7QUFDaEMsb0pBQW9KO0FBQ3BKLFNBQVNDLGNBQWNDLEdBQUcsRUFBRUMsS0FBSztJQUMvQixJQUFJQSxpQkFBaUJDLE9BQU87UUFDMUIsT0FBT0osVUFBVUssT0FBT0MsbUJBQW1CLENBQUNILFFBQVE7WUFBQztTQUFRLEVBQUVJLE1BQU0sQ0FBQyxTQUFVQyxLQUFLLEVBQUVOLEdBQUc7WUFDeEZNLEtBQUssQ0FBQ04sSUFBSSxHQUFHQyxLQUFLLENBQUNELElBQUk7WUFDdkIsSUFBSUEsUUFBUSxTQUFTO2dCQUNuQixnRUFBZ0U7Z0JBQ2hFTSxLQUFLLENBQUNOLElBQUksR0FBR0MsS0FBSyxDQUFDRCxJQUFJLENBQUNPLFFBQVE7WUFDbEM7WUFDQSxPQUFPRDtRQUNULEdBQUcsQ0FBQztJQUNOO0lBQ0EsT0FBT0w7QUFDVDtBQUNBLFNBQVNPLE9BQU9GLEtBQUssRUFBRUcsT0FBTztJQUM1QixzQ0FBc0M7SUFDdENDLFFBQVFDLEdBQUcsQ0FBQ0MsS0FBS0MsU0FBUyxDQUFDO1FBQ3pCUCxPQUFPQTtJQUNULEdBQUdQLGVBQWVVLFlBQVksU0FBUyxJQUFJO0lBQzNDLElBQUlILE1BQU1RLFVBQVUsSUFBSVIsTUFBTVEsVUFBVSxDQUFDQyxNQUFNLFlBQVlDLE9BQU87UUFDaEUsSUFBSUMsZ0JBQWdCWCxNQUFNUSxVQUFVLENBQUNDLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLFNBQVVaLEtBQUs7WUFDN0QsT0FBT0EsTUFBTVEsVUFBVSxDQUFDSyxXQUFXO1FBQ3JDLEdBQUdDLElBQUksQ0FBQztRQUNSLHNDQUFzQztRQUN0Q1YsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQk07SUFDN0I7OztLQUdDLEdBQ0g7QUFDRjtBQUNBSSxPQUFPQyxPQUFPLEdBQUdkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2Vycm9yLWxvZ2dlci5qcz9lNzZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi9kb2MtdXRpbHMuanNcIiksXG4gIHB1c2hBcnJheSA9IF9yZXF1aXJlLnB1c2hBcnJheTtcbi8vIFRoZSBlcnJvciB0aHJvd24gaGVyZSBjb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHdoZW4gbG9nZ2VkIHdpdGggSlNPTi5zdHJpbmdpZnkgKGl0IGNvbnRhaW5zIGEgcHJvcGVydGllcyBvYmplY3QgY29udGFpbmluZyBhbGwgc3ViZXJyb3JzKS5cbmZ1bmN0aW9uIHJlcGxhY2VFcnJvcnMoa2V5LCB2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBwdXNoQXJyYXkoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLCBbXCJzdGFja1wiXSkucmVkdWNlKGZ1bmN0aW9uIChlcnJvciwga2V5KSB7XG4gICAgICBlcnJvcltrZXldID0gdmFsdWVba2V5XTtcbiAgICAgIGlmIChrZXkgPT09IFwic3RhY2tcIikge1xuICAgICAgICAvLyBUaGlzIGlzIHVzZWQgYmVjYXVzZSBpbiBGaXJlZm94LCBzdGFjayBpcyBub3QgYW4gb3duIHByb3BlcnR5XG4gICAgICAgIGVycm9yW2tleV0gPSB2YWx1ZVtrZXldLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSwge30pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGxvZ2dlcihlcnJvciwgbG9nZ2luZykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh7XG4gICAgZXJyb3I6IGVycm9yXG4gIH0sIHJlcGxhY2VFcnJvcnMsIGxvZ2dpbmcgPT09IFwianNvblwiID8gMiA6IG51bGwpKTtcbiAgaWYgKGVycm9yLnByb3BlcnRpZXMgJiYgZXJyb3IucHJvcGVydGllcy5lcnJvcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhciBlcnJvck1lc3NhZ2VzID0gZXJyb3IucHJvcGVydGllcy5lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGVycm9yLnByb3BlcnRpZXMuZXhwbGFuYXRpb247XG4gICAgfSkuam9pbihcIlxcblwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKFwiZXJyb3JNZXNzYWdlc1wiLCBlcnJvck1lc3NhZ2VzKTtcbiAgICAvKlxuICAgICAqIGVycm9yTWVzc2FnZXMgaXMgYSBodW1hbmx5IHJlYWRhYmxlIG1lc3NhZ2UgbG9va2luZyBsaWtlIHRoaXMgOlxuICAgICAqICdUaGUgdGFnIGJlZ2lubmluZyB3aXRoIFwiZm9vYmFyXCIgaXMgdW5vcGVuZWQnXG4gICAgICovXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyOyJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJwdXNoQXJyYXkiLCJyZXBsYWNlRXJyb3JzIiwia2V5IiwidmFsdWUiLCJFcnJvciIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJyZWR1Y2UiLCJlcnJvciIsInRvU3RyaW5nIiwibG9nZ2VyIiwibG9nZ2luZyIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicHJvcGVydGllcyIsImVycm9ycyIsIkFycmF5IiwiZXJyb3JNZXNzYWdlcyIsIm1hcCIsImV4cGxhbmF0aW9uIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/error-logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/errors.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/docxtemplater/js/utils.js\"), last = _require.last, first = _require.first;\nfunction XTError(message) {\n    this.name = \"GenericError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTError.prototype = Error.prototype;\nfunction XTTemplateError(message) {\n    this.name = \"TemplateError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTTemplateError.prototype = new XTError();\nfunction XTRenderingError(message) {\n    this.name = \"RenderingError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTRenderingError.prototype = new XTError();\nfunction XTScopeParserError(message) {\n    this.name = \"ScopeParserError\";\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTScopeParserError.prototype = new XTError();\nfunction XTInternalError(message) {\n    this.name = \"InternalError\";\n    this.properties = {\n        explanation: \"InternalError\"\n    };\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTInternalError.prototype = new XTError();\nfunction XTAPIVersionError(message) {\n    this.name = \"APIVersionError\";\n    this.properties = {\n        explanation: \"APIVersionError\"\n    };\n    this.message = message;\n    this.stack = new Error(message).stack;\n}\nXTAPIVersionError.prototype = new XTError();\nfunction throwApiVersionError(msg, properties) {\n    var err = new XTAPIVersionError(msg);\n    err.properties = _objectSpread({\n        id: \"api_version_error\"\n    }, properties);\n    throw err;\n}\nfunction throwMultiError(errors) {\n    var err = new XTTemplateError(\"Multi error\");\n    err.properties = {\n        errors: errors,\n        id: \"multi_error\",\n        explanation: \"The template has multiple errors\"\n    };\n    throw err;\n}\nfunction getUnopenedTagException(options) {\n    var err = new XTTemplateError(\"Unopened tag\");\n    err.properties = {\n        xtag: last(options.xtag.split(\" \")),\n        id: \"unopened_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" is unopened')\n    };\n    return err;\n}\nfunction getDuplicateOpenTagException(options) {\n    var err = new XTTemplateError(\"Duplicate open tag, expected one open tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")),\n        id: \"duplicate_open_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" has duplicate open tags')\n    };\n    return err;\n}\nfunction getDuplicateCloseTagException(options) {\n    var err = new XTTemplateError(\"Duplicate close tag, expected one close tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")),\n        id: \"duplicate_close_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag ending with \"'.concat(options.xtag.substr(0, 10), '\" has duplicate close tags')\n    };\n    return err;\n}\nfunction getUnclosedTagException(options) {\n    var err = new XTTemplateError(\"Unclosed tag\");\n    err.properties = {\n        xtag: first(options.xtag.split(\" \")).substr(1),\n        id: \"unclosed_tag\",\n        context: options.xtag,\n        offset: options.offset,\n        lIndex: options.lIndex,\n        explanation: 'The tag beginning with \"'.concat(options.xtag.substr(0, 10), '\" is unclosed')\n    };\n    return err;\n}\nfunction throwXmlTagNotFound(options) {\n    var err = new XTTemplateError('No tag \"'.concat(options.element, '\" was found at the ').concat(options.position));\n    var part = options.parsed[options.index];\n    err.properties = {\n        id: \"no_xml_tag_found_at_\".concat(options.position),\n        explanation: 'No tag \"'.concat(options.element, '\" was found at the ').concat(options.position),\n        offset: part.offset,\n        part: part,\n        parsed: options.parsed,\n        index: options.index,\n        element: options.element\n    };\n    throw err;\n}\nfunction getCorruptCharactersException(_ref) {\n    var tag = _ref.tag, value = _ref.value, offset = _ref.offset;\n    var err = new XTRenderingError(\"There are some XML corrupt characters\");\n    err.properties = {\n        id: \"invalid_xml_characters\",\n        xtag: tag,\n        value: value,\n        offset: offset,\n        explanation: \"There are some corrupt characters for the field \".concat(tag)\n    };\n    return err;\n}\nfunction getInvalidRawXMLValueException(_ref2) {\n    var tag = _ref2.tag, value = _ref2.value, offset = _ref2.offset;\n    var err = new XTRenderingError(\"Non string values are not allowed for rawXML tags\");\n    err.properties = {\n        id: \"invalid_raw_xml_value\",\n        xtag: tag,\n        value: value,\n        offset: offset,\n        explanation: \"The value of the raw tag : '\".concat(tag, \"' is not a string\")\n    };\n    return err;\n}\nfunction throwExpandNotFound(options) {\n    var _options$part = options.part, value = _options$part.value, offset = _options$part.offset, _options$id = options.id, id = _options$id === void 0 ? \"raw_tag_outerxml_invalid\" : _options$id, _options$message = options.message, message = _options$message === void 0 ? \"Raw tag not in paragraph\" : _options$message;\n    var part = options.part;\n    var _options$explanation = options.explanation, explanation = _options$explanation === void 0 ? 'The tag \"'.concat(value, '\" is not inside a paragraph') : _options$explanation;\n    if (typeof explanation === \"function\") {\n        explanation = explanation(part);\n    }\n    var err = new XTTemplateError(message);\n    err.properties = {\n        id: id,\n        explanation: explanation,\n        rootError: options.rootError,\n        xtag: value,\n        offset: offset,\n        postparsed: options.postparsed,\n        expandTo: options.expandTo,\n        index: options.index\n    };\n    throw err;\n}\nfunction throwRawTagShouldBeOnlyTextInParagraph(options) {\n    var err = new XTTemplateError(\"Raw tag should be the only text in paragraph\");\n    var tag = options.part.value;\n    err.properties = {\n        id: \"raw_xml_tag_should_be_only_text_in_paragraph\",\n        explanation: 'The raw tag \"'.concat(tag, '\" should be the only text in this paragraph. This means that this tag should not be surrounded by any text or spaces.'),\n        xtag: tag,\n        offset: options.part.offset,\n        paragraphParts: options.paragraphParts\n    };\n    throw err;\n}\nfunction getUnmatchedLoopException(part) {\n    var location = part.location, offset = part.offset, square = part.square;\n    var t = location === \"start\" ? \"unclosed\" : \"unopened\";\n    var T = location === \"start\" ? \"Unclosed\" : \"Unopened\";\n    var err = new XTTemplateError(\"\".concat(T, \" loop\"));\n    var tag = part.value;\n    err.properties = {\n        id: \"\".concat(t, \"_loop\"),\n        explanation: 'The loop with tag \"'.concat(tag, '\" is ').concat(t),\n        xtag: tag,\n        offset: offset\n    };\n    if (square) {\n        err.properties.square = square;\n    }\n    return err;\n}\nfunction getUnbalancedLoopException(pair, lastPair) {\n    var err = new XTTemplateError(\"Unbalanced loop tag\");\n    var lastL = lastPair[0].part.value;\n    var lastR = lastPair[1].part.value;\n    var l = pair[0].part.value;\n    var r = pair[1].part.value;\n    err.properties = {\n        id: \"unbalanced_loop_tags\",\n        explanation: \"Unbalanced loop tags {#\".concat(lastL, \"}{/\").concat(lastR, \"}{#\").concat(l, \"}{/\").concat(r, \"}\"),\n        offset: [\n            lastPair[0].part.offset,\n            pair[1].part.offset\n        ],\n        lastPair: {\n            left: lastPair[0].part.value,\n            right: lastPair[1].part.value\n        },\n        pair: {\n            left: pair[0].part.value,\n            right: pair[1].part.value\n        }\n    };\n    return err;\n}\nfunction getClosingTagNotMatchOpeningTag(_ref3) {\n    var tags = _ref3.tags;\n    var err = new XTTemplateError(\"Closing tag does not match opening tag\");\n    err.properties = {\n        id: \"closing_tag_does_not_match_opening_tag\",\n        explanation: 'The tag \"'.concat(tags[0].value, '\" is closed by the tag \"').concat(tags[1].value, '\"'),\n        openingtag: first(tags).value,\n        offset: [\n            first(tags).offset,\n            last(tags).offset\n        ],\n        closingtag: last(tags).value\n    };\n    return err;\n}\nfunction getScopeCompilationError(_ref4) {\n    var tag = _ref4.tag, rootError = _ref4.rootError, offset = _ref4.offset;\n    var err = new XTScopeParserError(\"Scope parser compilation failed\");\n    err.properties = {\n        id: \"scopeparser_compilation_failed\",\n        offset: offset,\n        xtag: tag,\n        explanation: 'The scope parser for the tag \"'.concat(tag, '\" failed to compile'),\n        rootError: rootError\n    };\n    return err;\n}\nfunction getScopeParserExecutionError(_ref5) {\n    var tag = _ref5.tag, scope = _ref5.scope, error = _ref5.error, offset = _ref5.offset;\n    var err = new XTScopeParserError(\"Scope parser execution failed\");\n    err.properties = {\n        id: \"scopeparser_execution_failed\",\n        explanation: \"The scope parser for the tag \".concat(tag, \" failed to execute\"),\n        scope: scope,\n        offset: offset,\n        xtag: tag,\n        rootError: error\n    };\n    return err;\n}\nfunction getLoopPositionProducesInvalidXMLError(_ref6) {\n    var tag = _ref6.tag, offset = _ref6.offset;\n    var err = new XTTemplateError('The position of the loop tags \"'.concat(tag, '\" would produce invalid XML'));\n    err.properties = {\n        xtag: tag,\n        id: \"loop_position_invalid\",\n        explanation: 'The tags \"'.concat(tag, '\" are misplaced in the document, for example one of them is in a table and the other one outside the table'),\n        offset: offset\n    };\n    return err;\n}\nfunction throwUnimplementedTagType(part, index) {\n    var errorMsg = 'Unimplemented tag type \"'.concat(part.type, '\"');\n    if (part.module) {\n        errorMsg += ' \"'.concat(part.module, '\"');\n    }\n    var err = new XTTemplateError(errorMsg);\n    err.properties = {\n        part: part,\n        index: index,\n        id: \"unimplemented_tag_type\"\n    };\n    throw err;\n}\nfunction throwMalformedXml() {\n    var err = new XTInternalError(\"Malformed xml\");\n    err.properties = {\n        explanation: \"The template contains malformed xml\",\n        id: \"malformed_xml\"\n    };\n    throw err;\n}\nfunction throwResolveBeforeCompile() {\n    var err = new XTInternalError(\"You must run `.compile()` before running `.resolveData()`\");\n    err.properties = {\n        id: \"resolve_before_compile\",\n        explanation: \"You must run `.compile()` before running `.resolveData()`\"\n    };\n    throw err;\n}\nfunction throwRenderInvalidTemplate() {\n    var err = new XTInternalError(\"You should not call .render on a document that had compilation errors\");\n    err.properties = {\n        id: \"render_on_invalid_template\",\n        explanation: \"You should not call .render on a document that had compilation errors\"\n    };\n    throw err;\n}\nfunction throwRenderTwice() {\n    var err = new XTInternalError(\"You should not call .render twice on the same docxtemplater instance\");\n    err.properties = {\n        id: \"render_twice\",\n        explanation: \"You should not call .render twice on the same docxtemplater instance\"\n    };\n    throw err;\n}\nfunction throwFileTypeNotIdentified(zip) {\n    var files = Object.keys(zip.files).slice(0, 10);\n    var msg = \"\";\n    if (files.length === 0) {\n        msg = \"Empty zip file\";\n    } else {\n        msg = \"Zip file contains : \".concat(files.join(\",\"));\n    }\n    var err = new XTInternalError(\"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg));\n    err.properties = {\n        id: \"filetype_not_identified\",\n        explanation: \"The filetype for this file could not be identified, is this file corrupted ? \".concat(msg)\n    };\n    throw err;\n}\nfunction throwXmlInvalid(content, offset) {\n    var err = new XTTemplateError(\"An XML file has invalid xml\");\n    err.properties = {\n        id: \"file_has_invalid_xml\",\n        content: content,\n        offset: offset,\n        explanation: \"The docx contains invalid XML, it is most likely corrupt\"\n    };\n    throw err;\n}\nfunction throwFileTypeNotHandled(fileType) {\n    var err = new XTInternalError('The filetype \"'.concat(fileType, '\" is not handled by docxtemplater'));\n    err.properties = {\n        id: \"filetype_not_handled\",\n        explanation: 'The file you are trying to generate is of type \"'.concat(fileType, '\", but only docx and pptx formats are handled'),\n        fileType: fileType\n    };\n    throw err;\n}\nmodule.exports = {\n    XTError: XTError,\n    XTTemplateError: XTTemplateError,\n    XTInternalError: XTInternalError,\n    XTScopeParserError: XTScopeParserError,\n    XTAPIVersionError: XTAPIVersionError,\n    // Remove this alias in v4\n    RenderingError: XTRenderingError,\n    XTRenderingError: XTRenderingError,\n    getClosingTagNotMatchOpeningTag: getClosingTagNotMatchOpeningTag,\n    getLoopPositionProducesInvalidXMLError: getLoopPositionProducesInvalidXMLError,\n    getScopeCompilationError: getScopeCompilationError,\n    getScopeParserExecutionError: getScopeParserExecutionError,\n    getUnclosedTagException: getUnclosedTagException,\n    getUnopenedTagException: getUnopenedTagException,\n    getUnmatchedLoopException: getUnmatchedLoopException,\n    getDuplicateCloseTagException: getDuplicateCloseTagException,\n    getDuplicateOpenTagException: getDuplicateOpenTagException,\n    getCorruptCharactersException: getCorruptCharactersException,\n    getInvalidRawXMLValueException: getInvalidRawXMLValueException,\n    getUnbalancedLoopException: getUnbalancedLoopException,\n    throwApiVersionError: throwApiVersionError,\n    throwFileTypeNotHandled: throwFileTypeNotHandled,\n    throwFileTypeNotIdentified: throwFileTypeNotIdentified,\n    throwMalformedXml: throwMalformedXml,\n    throwMultiError: throwMultiError,\n    throwExpandNotFound: throwExpandNotFound,\n    throwRawTagShouldBeOnlyTextInParagraph: throwRawTagShouldBeOnlyTextInParagraph,\n    throwUnimplementedTagType: throwUnimplementedTagType,\n    throwXmlTagNotFound: throwXmlTagNotFound,\n    throwXmlInvalid: throwXmlInvalid,\n    throwResolveBeforeCompile: throwResolveBeforeCompile,\n    throwRenderInvalidTemplate: throwRenderInvalidTemplate,\n    throwRenderTwice: throwRenderTwice\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/file-type-config.js":
/*!***********************************************************!*\
  !*** ./node_modules/docxtemplater/js/file-type-config.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar loopModule = __webpack_require__(/*! ./modules/loop.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/loop.js\");\nvar spacePreserveModule = __webpack_require__(/*! ./modules/space-preserve.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/space-preserve.js\");\nvar rawXmlModule = __webpack_require__(/*! ./modules/rawxml.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/rawxml.js\");\nvar expandPairTrait = __webpack_require__(/*! ./modules/expand-pair-trait.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js\");\nvar render = __webpack_require__(/*! ./modules/render.js */ \"(rsc)/./node_modules/docxtemplater/js/modules/render.js\");\nfunction DocXFileTypeConfig() {\n    return {\n        getTemplatedFiles: function getTemplatedFiles() {\n            return [];\n        },\n        textPath: function textPath(doc) {\n            return doc.textTarget;\n        },\n        tagsXmlTextArray: [\n            \"Company\",\n            \"HyperlinkBase\",\n            \"Manager\",\n            \"cp:category\",\n            \"cp:keywords\",\n            \"dc:creator\",\n            \"dc:description\",\n            \"dc:subject\",\n            \"dc:title\",\n            \"cp:contentStatus\",\n            \"w:t\",\n            \"a:t\",\n            \"m:t\",\n            \"vt:lpstr\",\n            \"vt:lpwstr\"\n        ],\n        tagsXmlLexedArray: [\n            \"w:proofState\",\n            \"w:tc\",\n            \"w:tr\",\n            \"w:tbl\",\n            \"w:body\",\n            \"w:document\",\n            \"w:p\",\n            \"w:r\",\n            \"w:br\",\n            \"w:rPr\",\n            \"w:pPr\",\n            \"w:spacing\",\n            \"w:sdtContent\",\n            \"w:sdt\",\n            \"w:drawing\",\n            \"w:sectPr\",\n            \"w:type\",\n            \"w:headerReference\",\n            \"w:footerReference\",\n            \"w:bookmarkStart\",\n            \"w:bookmarkEnd\",\n            \"w:commentRangeStart\",\n            \"w:commentRangeEnd\",\n            \"w:commentReference\"\n        ],\n        droppedTagsInsidePlaceholder: [\n            \"w:p\",\n            \"w:br\",\n            \"w:bookmarkStart\",\n            \"w:bookmarkEnd\"\n        ],\n        expandTags: [\n            {\n                contains: \"w:tc\",\n                expand: \"w:tr\"\n            }\n        ],\n        onParagraphLoop: [\n            {\n                contains: \"w:p\",\n                expand: \"w:p\",\n                onlyTextInTag: true\n            }\n        ],\n        tagRawXml: \"w:p\",\n        baseModules: [\n            loopModule,\n            spacePreserveModule,\n            expandPairTrait,\n            rawXmlModule,\n            render\n        ],\n        tagShouldContain: [\n            {\n                tag: \"w:sdtContent\",\n                shouldContain: [\n                    \"w:p\",\n                    \"w:r\",\n                    \"w:commentRangeStart\",\n                    \"w:sdt\"\n                ],\n                value: \"<w:p></w:p>\"\n            },\n            {\n                tag: \"w:tc\",\n                shouldContain: [\n                    \"w:p\"\n                ],\n                value: \"<w:p></w:p>\"\n            },\n            {\n                tag: \"w:tr\",\n                shouldContain: [\n                    \"w:tc\"\n                ],\n                drop: true\n            },\n            {\n                tag: \"w:tbl\",\n                shouldContain: [\n                    \"w:tr\"\n                ],\n                drop: true\n            }\n        ]\n    };\n}\nfunction PptXFileTypeConfig() {\n    return {\n        getTemplatedFiles: function getTemplatedFiles() {\n            return [];\n        },\n        textPath: function textPath(doc) {\n            return doc.textTarget;\n        },\n        tagsXmlTextArray: [\n            \"Company\",\n            \"HyperlinkBase\",\n            \"Manager\",\n            \"cp:category\",\n            \"cp:keywords\",\n            \"dc:creator\",\n            \"dc:description\",\n            \"dc:subject\",\n            \"dc:title\",\n            \"a:t\",\n            \"m:t\",\n            \"vt:lpstr\",\n            \"vt:lpwstr\"\n        ],\n        tagsXmlLexedArray: [\n            \"p:sp\",\n            \"a:tc\",\n            \"a:tr\",\n            \"a:tbl\",\n            \"a:graphicData\",\n            \"a:p\",\n            \"a:r\",\n            \"a:rPr\",\n            \"p:txBody\",\n            \"a:txBody\",\n            \"a:off\",\n            \"a:ext\",\n            \"p:graphicFrame\",\n            \"p:xfrm\",\n            \"a16:rowId\",\n            \"a:endParaRPr\"\n        ],\n        droppedTagsInsidePlaceholder: [\n            \"a:p\",\n            \"a:endParaRPr\"\n        ],\n        expandTags: [\n            {\n                contains: \"a:tc\",\n                expand: \"a:tr\"\n            }\n        ],\n        onParagraphLoop: [\n            {\n                contains: \"a:p\",\n                expand: \"a:p\",\n                onlyTextInTag: true\n            }\n        ],\n        tagRawXml: \"p:sp\",\n        baseModules: [\n            loopModule,\n            expandPairTrait,\n            rawXmlModule,\n            render\n        ],\n        tagShouldContain: [\n            {\n                tag: \"a:tbl\",\n                shouldContain: [\n                    \"a:tr\"\n                ],\n                dropParent: \"p:graphicFrame\"\n            },\n            {\n                tag: \"p:txBody\",\n                shouldContain: [\n                    \"a:p\"\n                ],\n                value: \"<a:p></a:p>\"\n            },\n            {\n                tag: \"a:txBody\",\n                shouldContain: [\n                    \"a:p\"\n                ],\n                value: \"<a:p></a:p>\"\n            }\n        ]\n    };\n}\nmodule.exports = {\n    docx: DocXFileTypeConfig,\n    pptx: PptXFileTypeConfig\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9maWxlLXR5cGUtY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsZ0ZBQW1CO0FBQzVDLElBQUlDLHNCQUFzQkQsbUJBQU9BLENBQUMsb0dBQTZCO0FBQy9ELElBQUlFLGVBQWVGLG1CQUFPQSxDQUFDLG9GQUFxQjtBQUNoRCxJQUFJRyxrQkFBa0JILG1CQUFPQSxDQUFDLDBHQUFnQztBQUM5RCxJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQyxvRkFBcUI7QUFDMUMsU0FBU0s7SUFDUCxPQUFPO1FBQ0xDLG1CQUFtQixTQUFTQTtZQUMxQixPQUFPLEVBQUU7UUFDWDtRQUNBQyxVQUFVLFNBQVNBLFNBQVNDLEdBQUc7WUFDN0IsT0FBT0EsSUFBSUMsVUFBVTtRQUN2QjtRQUNBQyxrQkFBa0I7WUFBQztZQUFXO1lBQWlCO1lBQVc7WUFBZTtZQUFlO1lBQWM7WUFBa0I7WUFBYztZQUFZO1lBQW9CO1lBQU87WUFBTztZQUFPO1lBQVk7U0FBWTtRQUNuTkMsbUJBQW1CO1lBQUM7WUFBZ0I7WUFBUTtZQUFRO1lBQVM7WUFBVTtZQUFjO1lBQU87WUFBTztZQUFRO1lBQVM7WUFBUztZQUFhO1lBQWdCO1lBQVM7WUFBYTtZQUFZO1lBQVU7WUFBcUI7WUFBcUI7WUFBbUI7WUFBaUI7WUFBdUI7WUFBcUI7U0FBcUI7UUFDclZDLDhCQUE4QjtZQUFDO1lBQU87WUFBUTtZQUFtQjtTQUFnQjtRQUNqRkMsWUFBWTtZQUFDO2dCQUNYQyxVQUFVO2dCQUNWQyxRQUFRO1lBQ1Y7U0FBRTtRQUNGQyxpQkFBaUI7WUFBQztnQkFDaEJGLFVBQVU7Z0JBQ1ZDLFFBQVE7Z0JBQ1JFLGVBQWU7WUFDakI7U0FBRTtRQUNGQyxXQUFXO1FBQ1hDLGFBQWE7WUFBQ3BCO1lBQVlFO1lBQXFCRTtZQUFpQkQ7WUFBY0U7U0FBTztRQUNyRmdCLGtCQUFrQjtZQUFDO2dCQUNqQkMsS0FBSztnQkFDTEMsZUFBZTtvQkFBQztvQkFBTztvQkFBTztvQkFBdUI7aUJBQVE7Z0JBQzdEQyxPQUFPO1lBQ1Q7WUFBRztnQkFDREYsS0FBSztnQkFDTEMsZUFBZTtvQkFBQztpQkFBTTtnQkFDdEJDLE9BQU87WUFDVDtZQUFHO2dCQUNERixLQUFLO2dCQUNMQyxlQUFlO29CQUFDO2lCQUFPO2dCQUN2QkUsTUFBTTtZQUNSO1lBQUc7Z0JBQ0RILEtBQUs7Z0JBQ0xDLGVBQWU7b0JBQUM7aUJBQU87Z0JBQ3ZCRSxNQUFNO1lBQ1I7U0FBRTtJQUNKO0FBQ0Y7QUFDQSxTQUFTQztJQUNQLE9BQU87UUFDTG5CLG1CQUFtQixTQUFTQTtZQUMxQixPQUFPLEVBQUU7UUFDWDtRQUNBQyxVQUFVLFNBQVNBLFNBQVNDLEdBQUc7WUFDN0IsT0FBT0EsSUFBSUMsVUFBVTtRQUN2QjtRQUNBQyxrQkFBa0I7WUFBQztZQUFXO1lBQWlCO1lBQVc7WUFBZTtZQUFlO1lBQWM7WUFBa0I7WUFBYztZQUFZO1lBQU87WUFBTztZQUFZO1NBQVk7UUFDeExDLG1CQUFtQjtZQUFDO1lBQVE7WUFBUTtZQUFRO1lBQVM7WUFBaUI7WUFBTztZQUFPO1lBQVM7WUFBWTtZQUFZO1lBQVM7WUFBUztZQUFrQjtZQUFVO1lBQWE7U0FBZTtRQUMvTEMsOEJBQThCO1lBQUM7WUFBTztTQUFlO1FBQ3JEQyxZQUFZO1lBQUM7Z0JBQ1hDLFVBQVU7Z0JBQ1ZDLFFBQVE7WUFDVjtTQUFFO1FBQ0ZDLGlCQUFpQjtZQUFDO2dCQUNoQkYsVUFBVTtnQkFDVkMsUUFBUTtnQkFDUkUsZUFBZTtZQUNqQjtTQUFFO1FBQ0ZDLFdBQVc7UUFDWEMsYUFBYTtZQUFDcEI7WUFBWUk7WUFBaUJEO1lBQWNFO1NBQU87UUFDaEVnQixrQkFBa0I7WUFBQztnQkFDakJDLEtBQUs7Z0JBQ0xDLGVBQWU7b0JBQUM7aUJBQU87Z0JBQ3ZCSSxZQUFZO1lBQ2Q7WUFBRztnQkFDREwsS0FBSztnQkFDTEMsZUFBZTtvQkFBQztpQkFBTTtnQkFDdEJDLE9BQU87WUFDVDtZQUFHO2dCQUNERixLQUFLO2dCQUNMQyxlQUFlO29CQUFDO2lCQUFNO2dCQUN0QkMsT0FBTztZQUNUO1NBQUU7SUFDSjtBQUNGO0FBQ0FJLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxNQUFNeEI7SUFDTnlCLE1BQU1MO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWtlLXJlbnRhbC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZS10eXBlLWNvbmZpZy5qcz80MWY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbG9vcE1vZHVsZSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvbG9vcC5qc1wiKTtcbnZhciBzcGFjZVByZXNlcnZlTW9kdWxlID0gcmVxdWlyZShcIi4vbW9kdWxlcy9zcGFjZS1wcmVzZXJ2ZS5qc1wiKTtcbnZhciByYXdYbWxNb2R1bGUgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3Jhd3htbC5qc1wiKTtcbnZhciBleHBhbmRQYWlyVHJhaXQgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2V4cGFuZC1wYWlyLXRyYWl0LmpzXCIpO1xudmFyIHJlbmRlciA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcmVuZGVyLmpzXCIpO1xuZnVuY3Rpb24gRG9jWEZpbGVUeXBlQ29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGdldFRlbXBsYXRlZEZpbGVzOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZWRGaWxlcygpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIHRleHRQYXRoOiBmdW5jdGlvbiB0ZXh0UGF0aChkb2MpIHtcbiAgICAgIHJldHVybiBkb2MudGV4dFRhcmdldDtcbiAgICB9LFxuICAgIHRhZ3NYbWxUZXh0QXJyYXk6IFtcIkNvbXBhbnlcIiwgXCJIeXBlcmxpbmtCYXNlXCIsIFwiTWFuYWdlclwiLCBcImNwOmNhdGVnb3J5XCIsIFwiY3A6a2V5d29yZHNcIiwgXCJkYzpjcmVhdG9yXCIsIFwiZGM6ZGVzY3JpcHRpb25cIiwgXCJkYzpzdWJqZWN0XCIsIFwiZGM6dGl0bGVcIiwgXCJjcDpjb250ZW50U3RhdHVzXCIsIFwidzp0XCIsIFwiYTp0XCIsIFwibTp0XCIsIFwidnQ6bHBzdHJcIiwgXCJ2dDpscHdzdHJcIl0sXG4gICAgdGFnc1htbExleGVkQXJyYXk6IFtcInc6cHJvb2ZTdGF0ZVwiLCBcInc6dGNcIiwgXCJ3OnRyXCIsIFwidzp0YmxcIiwgXCJ3OmJvZHlcIiwgXCJ3OmRvY3VtZW50XCIsIFwidzpwXCIsIFwidzpyXCIsIFwidzpiclwiLCBcInc6clByXCIsIFwidzpwUHJcIiwgXCJ3OnNwYWNpbmdcIiwgXCJ3OnNkdENvbnRlbnRcIiwgXCJ3OnNkdFwiLCBcInc6ZHJhd2luZ1wiLCBcInc6c2VjdFByXCIsIFwidzp0eXBlXCIsIFwidzpoZWFkZXJSZWZlcmVuY2VcIiwgXCJ3OmZvb3RlclJlZmVyZW5jZVwiLCBcInc6Ym9va21hcmtTdGFydFwiLCBcInc6Ym9va21hcmtFbmRcIiwgXCJ3OmNvbW1lbnRSYW5nZVN0YXJ0XCIsIFwidzpjb21tZW50UmFuZ2VFbmRcIiwgXCJ3OmNvbW1lbnRSZWZlcmVuY2VcIl0sXG4gICAgZHJvcHBlZFRhZ3NJbnNpZGVQbGFjZWhvbGRlcjogW1widzpwXCIsIFwidzpiclwiLCBcInc6Ym9va21hcmtTdGFydFwiLCBcInc6Ym9va21hcmtFbmRcIl0sXG4gICAgZXhwYW5kVGFnczogW3tcbiAgICAgIGNvbnRhaW5zOiBcInc6dGNcIixcbiAgICAgIGV4cGFuZDogXCJ3OnRyXCJcbiAgICB9XSxcbiAgICBvblBhcmFncmFwaExvb3A6IFt7XG4gICAgICBjb250YWluczogXCJ3OnBcIixcbiAgICAgIGV4cGFuZDogXCJ3OnBcIixcbiAgICAgIG9ubHlUZXh0SW5UYWc6IHRydWVcbiAgICB9XSxcbiAgICB0YWdSYXdYbWw6IFwidzpwXCIsXG4gICAgYmFzZU1vZHVsZXM6IFtsb29wTW9kdWxlLCBzcGFjZVByZXNlcnZlTW9kdWxlLCBleHBhbmRQYWlyVHJhaXQsIHJhd1htbE1vZHVsZSwgcmVuZGVyXSxcbiAgICB0YWdTaG91bGRDb250YWluOiBbe1xuICAgICAgdGFnOiBcInc6c2R0Q29udGVudFwiLFxuICAgICAgc2hvdWxkQ29udGFpbjogW1widzpwXCIsIFwidzpyXCIsIFwidzpjb21tZW50UmFuZ2VTdGFydFwiLCBcInc6c2R0XCJdLFxuICAgICAgdmFsdWU6IFwiPHc6cD48L3c6cD5cIlxuICAgIH0sIHtcbiAgICAgIHRhZzogXCJ3OnRjXCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJ3OnBcIl0sXG4gICAgICB2YWx1ZTogXCI8dzpwPjwvdzpwPlwiXG4gICAgfSwge1xuICAgICAgdGFnOiBcInc6dHJcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcInc6dGNcIl0sXG4gICAgICBkcm9wOiB0cnVlXG4gICAgfSwge1xuICAgICAgdGFnOiBcInc6dGJsXCIsXG4gICAgICBzaG91bGRDb250YWluOiBbXCJ3OnRyXCJdLFxuICAgICAgZHJvcDogdHJ1ZVxuICAgIH1dXG4gIH07XG59XG5mdW5jdGlvbiBQcHRYRmlsZVR5cGVDb25maWcoKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0VGVtcGxhdGVkRmlsZXM6IGZ1bmN0aW9uIGdldFRlbXBsYXRlZEZpbGVzKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG4gICAgdGV4dFBhdGg6IGZ1bmN0aW9uIHRleHRQYXRoKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy50ZXh0VGFyZ2V0O1xuICAgIH0sXG4gICAgdGFnc1htbFRleHRBcnJheTogW1wiQ29tcGFueVwiLCBcIkh5cGVybGlua0Jhc2VcIiwgXCJNYW5hZ2VyXCIsIFwiY3A6Y2F0ZWdvcnlcIiwgXCJjcDprZXl3b3Jkc1wiLCBcImRjOmNyZWF0b3JcIiwgXCJkYzpkZXNjcmlwdGlvblwiLCBcImRjOnN1YmplY3RcIiwgXCJkYzp0aXRsZVwiLCBcImE6dFwiLCBcIm06dFwiLCBcInZ0Omxwc3RyXCIsIFwidnQ6bHB3c3RyXCJdLFxuICAgIHRhZ3NYbWxMZXhlZEFycmF5OiBbXCJwOnNwXCIsIFwiYTp0Y1wiLCBcImE6dHJcIiwgXCJhOnRibFwiLCBcImE6Z3JhcGhpY0RhdGFcIiwgXCJhOnBcIiwgXCJhOnJcIiwgXCJhOnJQclwiLCBcInA6dHhCb2R5XCIsIFwiYTp0eEJvZHlcIiwgXCJhOm9mZlwiLCBcImE6ZXh0XCIsIFwicDpncmFwaGljRnJhbWVcIiwgXCJwOnhmcm1cIiwgXCJhMTY6cm93SWRcIiwgXCJhOmVuZFBhcmFSUHJcIl0sXG4gICAgZHJvcHBlZFRhZ3NJbnNpZGVQbGFjZWhvbGRlcjogW1wiYTpwXCIsIFwiYTplbmRQYXJhUlByXCJdLFxuICAgIGV4cGFuZFRhZ3M6IFt7XG4gICAgICBjb250YWluczogXCJhOnRjXCIsXG4gICAgICBleHBhbmQ6IFwiYTp0clwiXG4gICAgfV0sXG4gICAgb25QYXJhZ3JhcGhMb29wOiBbe1xuICAgICAgY29udGFpbnM6IFwiYTpwXCIsXG4gICAgICBleHBhbmQ6IFwiYTpwXCIsXG4gICAgICBvbmx5VGV4dEluVGFnOiB0cnVlXG4gICAgfV0sXG4gICAgdGFnUmF3WG1sOiBcInA6c3BcIixcbiAgICBiYXNlTW9kdWxlczogW2xvb3BNb2R1bGUsIGV4cGFuZFBhaXJUcmFpdCwgcmF3WG1sTW9kdWxlLCByZW5kZXJdLFxuICAgIHRhZ1Nob3VsZENvbnRhaW46IFt7XG4gICAgICB0YWc6IFwiYTp0YmxcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcImE6dHJcIl0sXG4gICAgICBkcm9wUGFyZW50OiBcInA6Z3JhcGhpY0ZyYW1lXCJcbiAgICB9LCB7XG4gICAgICB0YWc6IFwicDp0eEJvZHlcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcImE6cFwiXSxcbiAgICAgIHZhbHVlOiBcIjxhOnA+PC9hOnA+XCJcbiAgICB9LCB7XG4gICAgICB0YWc6IFwiYTp0eEJvZHlcIixcbiAgICAgIHNob3VsZENvbnRhaW46IFtcImE6cFwiXSxcbiAgICAgIHZhbHVlOiBcIjxhOnA+PC9hOnA+XCJcbiAgICB9XVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvY3g6IERvY1hGaWxlVHlwZUNvbmZpZyxcbiAgcHB0eDogUHB0WEZpbGVUeXBlQ29uZmlnXG59OyJdLCJuYW1lcyI6WyJsb29wTW9kdWxlIiwicmVxdWlyZSIsInNwYWNlUHJlc2VydmVNb2R1bGUiLCJyYXdYbWxNb2R1bGUiLCJleHBhbmRQYWlyVHJhaXQiLCJyZW5kZXIiLCJEb2NYRmlsZVR5cGVDb25maWciLCJnZXRUZW1wbGF0ZWRGaWxlcyIsInRleHRQYXRoIiwiZG9jIiwidGV4dFRhcmdldCIsInRhZ3NYbWxUZXh0QXJyYXkiLCJ0YWdzWG1sTGV4ZWRBcnJheSIsImRyb3BwZWRUYWdzSW5zaWRlUGxhY2Vob2xkZXIiLCJleHBhbmRUYWdzIiwiY29udGFpbnMiLCJleHBhbmQiLCJvblBhcmFncmFwaExvb3AiLCJvbmx5VGV4dEluVGFnIiwidGFnUmF3WG1sIiwiYmFzZU1vZHVsZXMiLCJ0YWdTaG91bGRDb250YWluIiwidGFnIiwic2hvdWxkQ29udGFpbiIsInZhbHVlIiwiZHJvcCIsIlBwdFhGaWxlVHlwZUNvbmZpZyIsImRyb3BQYXJlbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jeCIsInBwdHgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/file-type-config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/filetypes.js":
/*!****************************************************!*\
  !*** ./node_modules/docxtemplater/js/filetypes.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar docxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\";\nvar docxmContentType = \"application/vnd.ms-word.document.macroEnabled.main+xml\";\nvar dotxContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\";\nvar dotmContentType = \"application/vnd.ms-word.template.macroEnabledTemplate.main+xml\";\nvar headerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\";\nvar footnotesContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\";\nvar commentsContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\";\nvar footerContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\";\nvar pptxContentType = \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\";\nvar pptxSlideMaster = \"application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml\";\nvar pptxSlideLayout = \"application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml\";\nvar pptxPresentationContentType = \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\";\nvar xlsxContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\";\nvar xlsmContentType = \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\";\nvar xlsxWorksheetContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\";\n/*\n * This is used for the main part of the document, ie usually that would be the\n * type of word/document.xml\n */ var main = [\n    docxContentType,\n    docxmContentType,\n    dotxContentType,\n    dotmContentType\n];\nvar filetypes = {\n    main: main,\n    docx: [\n        headerContentType\n    ].concat(main, [\n        footerContentType,\n        footnotesContentType,\n        commentsContentType\n    ]),\n    pptx: [\n        pptxContentType,\n        pptxSlideMaster,\n        pptxSlideLayout,\n        pptxPresentationContentType\n    ],\n    xlsx: [\n        xlsxContentType,\n        xlsmContentType,\n        xlsxWorksheetContentType\n    ]\n};\nmodule.exports = filetypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9maWxldHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxrQkFBa0I7QUFDdEIsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsb0JBQW9CO0FBQ3hCLElBQUlDLHVCQUF1QjtBQUMzQixJQUFJQyxzQkFBc0I7QUFDMUIsSUFBSUMsb0JBQW9CO0FBQ3hCLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsa0JBQWtCO0FBQ3RCLElBQUlDLDhCQUE4QjtBQUNsQyxJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsa0JBQWtCO0FBQ3RCLElBQUlDLDJCQUEyQjtBQUMvQjs7O0NBR0MsR0FDRCxJQUFJQyxPQUFPO0lBQUNmO0lBQWlCQztJQUFrQkM7SUFBaUJDO0NBQWdCO0FBQ2hGLElBQUlhLFlBQVk7SUFDZEQsTUFBTUE7SUFDTkUsTUFBTTtRQUFDYjtLQUFrQixDQUFDYyxNQUFNLENBQUNILE1BQU07UUFBQ1I7UUFBbUJGO1FBQXNCQztLQUFvQjtJQUNyR2EsTUFBTTtRQUFDWDtRQUFpQkM7UUFBaUJDO1FBQWlCQztLQUE0QjtJQUN0RlMsTUFBTTtRQUFDUjtRQUFpQkM7UUFBaUJDO0tBQXlCO0FBQ3BFO0FBQ0FPLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWtlLXJlbnRhbC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvZmlsZXR5cGVzLmpzPzc1YzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBkb2N4Q29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50Lm1haW4reG1sXCI7XG52YXIgZG9jeG1Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9FbmFibGVkLm1haW4reG1sXCI7XG52YXIgZG90eENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC50ZW1wbGF0ZS5tYWluK3htbFwiO1xudmFyIGRvdG1Db250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9FbmFibGVkVGVtcGxhdGUubWFpbit4bWxcIjtcbnZhciBoZWFkZXJDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuaGVhZGVyK3htbFwiO1xudmFyIGZvb3Rub3Rlc0NvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290bm90ZXMreG1sXCI7XG52YXIgY29tbWVudHNDb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuY29tbWVudHMreG1sXCI7XG52YXIgZm9vdGVyQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rlcit4bWxcIjtcbnZhciBwcHR4Q29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZSt4bWxcIjtcbnZhciBwcHR4U2xpZGVNYXN0ZXIgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZU1hc3Rlcit4bWxcIjtcbnZhciBwcHR4U2xpZGVMYXlvdXQgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZUxheW91dCt4bWxcIjtcbnZhciBwcHR4UHJlc2VudGF0aW9uQ29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24ubWFpbit4bWxcIjtcbnZhciB4bHN4Q29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0Lm1haW4reG1sXCI7XG52YXIgeGxzbUNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQubWFjcm9FbmFibGVkLm1haW4reG1sXCI7XG52YXIgeGxzeFdvcmtzaGVldENvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC53b3Jrc2hlZXQreG1sXCI7XG4vKlxuICogVGhpcyBpcyB1c2VkIGZvciB0aGUgbWFpbiBwYXJ0IG9mIHRoZSBkb2N1bWVudCwgaWUgdXN1YWxseSB0aGF0IHdvdWxkIGJlIHRoZVxuICogdHlwZSBvZiB3b3JkL2RvY3VtZW50LnhtbFxuICovXG52YXIgbWFpbiA9IFtkb2N4Q29udGVudFR5cGUsIGRvY3htQ29udGVudFR5cGUsIGRvdHhDb250ZW50VHlwZSwgZG90bUNvbnRlbnRUeXBlXTtcbnZhciBmaWxldHlwZXMgPSB7XG4gIG1haW46IG1haW4sXG4gIGRvY3g6IFtoZWFkZXJDb250ZW50VHlwZV0uY29uY2F0KG1haW4sIFtmb290ZXJDb250ZW50VHlwZSwgZm9vdG5vdGVzQ29udGVudFR5cGUsIGNvbW1lbnRzQ29udGVudFR5cGVdKSxcbiAgcHB0eDogW3BwdHhDb250ZW50VHlwZSwgcHB0eFNsaWRlTWFzdGVyLCBwcHR4U2xpZGVMYXlvdXQsIHBwdHhQcmVzZW50YXRpb25Db250ZW50VHlwZV0sXG4gIHhsc3g6IFt4bHN4Q29udGVudFR5cGUsIHhsc21Db250ZW50VHlwZSwgeGxzeFdvcmtzaGVldENvbnRlbnRUeXBlXVxufTtcbm1vZHVsZS5leHBvcnRzID0gZmlsZXR5cGVzOyJdLCJuYW1lcyI6WyJkb2N4Q29udGVudFR5cGUiLCJkb2N4bUNvbnRlbnRUeXBlIiwiZG90eENvbnRlbnRUeXBlIiwiZG90bUNvbnRlbnRUeXBlIiwiaGVhZGVyQ29udGVudFR5cGUiLCJmb290bm90ZXNDb250ZW50VHlwZSIsImNvbW1lbnRzQ29udGVudFR5cGUiLCJmb290ZXJDb250ZW50VHlwZSIsInBwdHhDb250ZW50VHlwZSIsInBwdHhTbGlkZU1hc3RlciIsInBwdHhTbGlkZUxheW91dCIsInBwdHhQcmVzZW50YXRpb25Db250ZW50VHlwZSIsInhsc3hDb250ZW50VHlwZSIsInhsc21Db250ZW50VHlwZSIsInhsc3hXb3Jrc2hlZXRDb250ZW50VHlwZSIsIm1haW4iLCJmaWxldHlwZXMiLCJkb2N4IiwiY29uY2F0IiwicHB0eCIsInhsc3giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/filetypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/get-resolved-id.js":
/*!**********************************************************!*\
  !*** ./node_modules/docxtemplater/js/get-resolved-id.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nfunction getResolvedId(part, options) {\n    if (part.lIndex == null) {\n        return null;\n    }\n    var path = options.scopeManager.scopePathItem;\n    if (part.parentPart) {\n        path = path.slice(0, path.length - 1);\n    }\n    var res = options.filePath + \"@\" + part.lIndex.toString() + \"-\" + path.join(\"-\");\n    return res;\n}\nmodule.exports = getResolvedId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9nZXQtcmVzb2x2ZWQtaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTQSxjQUFjQyxJQUFJLEVBQUVDLE9BQU87SUFDbEMsSUFBSUQsS0FBS0UsTUFBTSxJQUFJLE1BQU07UUFDdkIsT0FBTztJQUNUO0lBQ0EsSUFBSUMsT0FBT0YsUUFBUUcsWUFBWSxDQUFDQyxhQUFhO0lBQzdDLElBQUlMLEtBQUtNLFVBQVUsRUFBRTtRQUNuQkgsT0FBT0EsS0FBS0ksS0FBSyxDQUFDLEdBQUdKLEtBQUtLLE1BQU0sR0FBRztJQUNyQztJQUNBLElBQUlDLE1BQU1SLFFBQVFTLFFBQVEsR0FBRyxNQUFNVixLQUFLRSxNQUFNLENBQUNTLFFBQVEsS0FBSyxNQUFNUixLQUFLUyxJQUFJLENBQUM7SUFDNUUsT0FBT0g7QUFDVDtBQUNBSSxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL2dldC1yZXNvbHZlZC1pZC5qcz83ZmIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBnZXRSZXNvbHZlZElkKHBhcnQsIG9wdGlvbnMpIHtcbiAgaWYgKHBhcnQubEluZGV4ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgcGF0aCA9IG9wdGlvbnMuc2NvcGVNYW5hZ2VyLnNjb3BlUGF0aEl0ZW07XG4gIGlmIChwYXJ0LnBhcmVudFBhcnQpIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCAtIDEpO1xuICB9XG4gIHZhciByZXMgPSBvcHRpb25zLmZpbGVQYXRoICsgXCJAXCIgKyBwYXJ0LmxJbmRleC50b1N0cmluZygpICsgXCItXCIgKyBwYXRoLmpvaW4oXCItXCIpO1xuICByZXR1cm4gcmVzO1xufVxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZXNvbHZlZElkOyJdLCJuYW1lcyI6WyJnZXRSZXNvbHZlZElkIiwicGFydCIsIm9wdGlvbnMiLCJsSW5kZXgiLCJwYXRoIiwic2NvcGVNYW5hZ2VyIiwic2NvcGVQYXRoSXRlbSIsInBhcmVudFBhcnQiLCJzbGljZSIsImxlbmd0aCIsInJlcyIsImZpbGVQYXRoIiwidG9TdHJpbmciLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/get-resolved-id.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/get-tags.js":
/*!***************************************************!*\
  !*** ./node_modules/docxtemplater/js/get-tags.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction isPlaceholder(part) {\n    return part.type === \"placeholder\";\n}\n/* eslint-disable-next-line complexity */ function getTags(postParsed) {\n    var tags = {};\n    var stack = [\n        {\n            items: postParsed.filter(isPlaceholder),\n            parents: [],\n            path: []\n        }\n    ];\n    function processFiltered(part, current, filtered) {\n        if (filtered.length) {\n            stack.push({\n                items: filtered,\n                parents: [].concat(_toConsumableArray(current.parents), [\n                    part\n                ]),\n                path: part.dataBound !== false && !part.attrParsed && part.value && !part.attrParsed ? [].concat(_toConsumableArray(current.path), [\n                    part.value\n                ]) : _toConsumableArray(current.path)\n            });\n        }\n    }\n    function getLocalTags(tags, path) {\n        var sizeScope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path.length;\n        var localTags = tags;\n        for(var i = 0; i < sizeScope; i++){\n            localTags = localTags[path[i]];\n        }\n        return localTags;\n    }\n    function getScopeSize(part, parents) {\n        return parents.reduce(function(size, parent) {\n            var lIndexLoop = typeof parent.lIndex === \"number\" ? parent.lIndex : parseInt(parent.lIndex.split(\"-\")[0], 10);\n            return lIndexLoop > part.lIndex ? size - 1 : size;\n        }, parents.length);\n    }\n    while(stack.length > 0){\n        var current = stack.pop();\n        var localTags = getLocalTags(tags, current.path);\n        for(var _i2 = 0, _current$items2 = current.items; _i2 < _current$items2.length; _i2++){\n            var _localTags4, _part$value2;\n            var part = _current$items2[_i2];\n            if (part.attrParsed) {\n                for(var key in part.attrParsed){\n                    processFiltered(part, current, part.attrParsed[key].filter(isPlaceholder));\n                }\n                continue;\n            }\n            if (part.subparsed) {\n                if (part.dataBound !== false) {\n                    var _localTags, _part$value;\n                    (_localTags = localTags)[_part$value = part.value] || (_localTags[_part$value] = {});\n                }\n                processFiltered(part, current, part.subparsed.filter(isPlaceholder));\n                continue;\n            }\n            if (part.cellParsed) {\n                for(var _i4 = 0, _part$cellPostParsed2 = part.cellPostParsed; _i4 < _part$cellPostParsed2.length; _i4++){\n                    var cp = _part$cellPostParsed2[_i4];\n                    if (cp.type === \"placeholder\") {\n                        if (cp.module === \"pro-xml-templating/xls-module-loop\") {\n                            continue;\n                        } else if (cp.subparsed) {\n                            var _localTags2, _cp$value;\n                            (_localTags2 = localTags)[_cp$value = cp.value] || (_localTags2[_cp$value] = {});\n                            processFiltered(cp, current, cp.subparsed.filter(isPlaceholder));\n                        } else {\n                            var _localTags3, _cp$value2;\n                            var sizeScope = getScopeSize(part, current.parents);\n                            localTags = getLocalTags(tags, current.path, sizeScope);\n                            (_localTags3 = localTags)[_cp$value2 = cp.value] || (_localTags3[_cp$value2] = {});\n                        }\n                    }\n                }\n                continue;\n            }\n            if (part.dataBound === false) {\n                continue;\n            }\n            (_localTags4 = localTags)[_part$value2 = part.value] || (_localTags4[_part$value2] = {});\n        }\n    }\n    return tags;\n}\nmodule.exports = {\n    getTags: getTags,\n    isPlaceholder: isPlaceholder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/get-tags.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/join-uncorrupt.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/join-uncorrupt.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), startsWith = _require.startsWith, endsWith = _require.endsWith, isStarting = _require.isStarting, isEnding = _require.isEnding, isWhiteSpace = _require.isWhiteSpace;\nvar filetypes = __webpack_require__(/*! ./filetypes.js */ \"(rsc)/./node_modules/docxtemplater/js/filetypes.js\");\nfunction addEmptyParagraphAfterTable(parts) {\n    var lastNonEmpty = \"\";\n    for(var i = 0, len = parts.length; i < len; i++){\n        var p = parts[i];\n        if (isWhiteSpace(p) || startsWith(p, \"<w:bookmarkEnd\")) {\n            continue;\n        }\n        if (endsWith(lastNonEmpty, \"</w:tbl>\")) {\n            if (!startsWith(p, \"<w:p\") && !startsWith(p, \"<w:tbl\") && !startsWith(p, \"<w:sectPr\")) {\n                p = \"<w:p/>\".concat(p);\n            }\n        }\n        lastNonEmpty = p;\n        parts[i] = p;\n    }\n    return parts;\n}\n// eslint-disable-next-line complexity\nfunction joinUncorrupt(parts, options) {\n    var contains = options.fileTypeConfig.tagShouldContain || [];\n    /*\n   * Before doing this \"uncorruption\" method here, this was done with the\n   * `part.emptyValue` trick, however, there were some corruptions that were\n   * not handled, for example with a template like this :\n   *\n   * ------------------------------------------------\n   * | {-w:p falsy}My para{/falsy}   |              |\n   * | {-w:p falsy}My para{/falsy}   |              |\n   * ------------------------------------------------\n   */ var collecting = \"\";\n    var currentlyCollecting = -1;\n    if (filetypes.docx.indexOf(options.contentType) !== -1) {\n        parts = addEmptyParagraphAfterTable(parts);\n    }\n    var startIndex = -1;\n    for(var j = 0, len2 = contains.length; j < len2; j++){\n        var _contains$j = contains[j], tag = _contains$j.tag, shouldContain = _contains$j.shouldContain, value = _contains$j.value, drop = _contains$j.drop, dropParent = _contains$j.dropParent;\n        for(var i = 0, len = parts.length; i < len; i++){\n            var part = parts[i];\n            if (currentlyCollecting === j) {\n                if (isEnding(part, tag)) {\n                    currentlyCollecting = -1;\n                    if (dropParent) {\n                        var start = -1;\n                        for(var k = startIndex; k > 0; k--){\n                            if (isStarting(parts[k], dropParent)) {\n                                start = k;\n                                break;\n                            }\n                        }\n                        for(var _k = start; _k <= parts.length; _k++){\n                            if (isEnding(parts[_k], dropParent)) {\n                                parts[_k] = \"\";\n                                break;\n                            }\n                            parts[_k] = \"\";\n                        }\n                    } else {\n                        for(var _k2 = startIndex; _k2 <= i; _k2++){\n                            parts[_k2] = \"\";\n                        }\n                        if (!drop) {\n                            parts[i] = collecting + value + part;\n                        }\n                    }\n                }\n                collecting += part;\n                for(var _k3 = 0, len3 = shouldContain.length; _k3 < len3; _k3++){\n                    var sc = shouldContain[_k3];\n                    if (isStarting(part, sc)) {\n                        currentlyCollecting = -1;\n                        break;\n                    }\n                }\n            }\n            if (currentlyCollecting === -1 && isStarting(part, tag) && /*\n       * To verify that the part doesn't have multiple tags,\n       * such as <w:tc><w:p>\n       */ part.substr(1).indexOf(\"<\") === -1) {\n                // self-closing tag such as <w:t/>\n                if (part[part.length - 2] === \"/\") {\n                    parts[i] = \"\";\n                } else {\n                    startIndex = i;\n                    currentlyCollecting = j;\n                    collecting = part;\n                }\n            }\n        }\n    }\n    return parts;\n}\nmodule.exports = joinUncorrupt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/join-uncorrupt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/lexer.js":
/*!************************************************!*\
  !*** ./node_modules/docxtemplater/js/lexer.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), getUnclosedTagException = _require.getUnclosedTagException, getUnopenedTagException = _require.getUnopenedTagException, getDuplicateOpenTagException = _require.getDuplicateOpenTagException, getDuplicateCloseTagException = _require.getDuplicateCloseTagException, throwMalformedXml = _require.throwMalformedXml, throwXmlInvalid = _require.throwXmlInvalid, XTTemplateError = _require.XTTemplateError;\nvar _require2 = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), isTextStart = _require2.isTextStart, isTextEnd = _require2.isTextEnd, wordToUtf8 = _require2.wordToUtf8, pushArray = _require2.pushArray;\nvar DELIMITER_NONE = 0, DELIMITER_EQUAL = 1, DELIMITER_START = 2, DELIMITER_END = 3;\nfunction inRange(range, match) {\n    return range[0] <= match.offset && match.offset < range[1];\n}\nfunction updateInTextTag(part, inTextTag) {\n    if (isTextStart(part)) {\n        if (inTextTag) {\n            throwMalformedXml();\n        }\n        return true;\n    }\n    if (isTextEnd(part)) {\n        if (!inTextTag) {\n            throwMalformedXml();\n        }\n        return false;\n    }\n    return inTextTag;\n}\nfunction getTag(tag) {\n    var position = \"\";\n    var start = 1;\n    var end = tag.indexOf(\" \");\n    if (tag[tag.length - 2] === \"/\") {\n        position = \"selfclosing\";\n        if (end === -1) {\n            end = tag.length - 2;\n        }\n    } else if (tag[1] === \"/\") {\n        start = 2;\n        position = \"end\";\n        if (end === -1) {\n            end = tag.length - 1;\n        }\n    } else {\n        position = \"start\";\n        if (end === -1) {\n            end = tag.length - 1;\n        }\n    }\n    return {\n        tag: tag.slice(start, end),\n        position: position\n    };\n}\nfunction tagMatcher(content, textMatchArray, othersMatchArray) {\n    var cursor = 0;\n    var contentLength = content.length;\n    var allMatches = {};\n    for(var _i2 = 0; _i2 < textMatchArray.length; _i2++){\n        var m = textMatchArray[_i2];\n        allMatches[m] = true;\n    }\n    for(var _i4 = 0; _i4 < othersMatchArray.length; _i4++){\n        var _m = othersMatchArray[_i4];\n        allMatches[_m] = false;\n    }\n    var totalMatches = [];\n    while(cursor < contentLength){\n        cursor = content.indexOf(\"<\", cursor);\n        if (cursor === -1) {\n            break;\n        }\n        var offset = cursor;\n        var nextOpening = content.indexOf(\"<\", cursor + 1);\n        cursor = content.indexOf(\">\", cursor);\n        if (cursor === -1 || nextOpening !== -1 && cursor > nextOpening) {\n            throwXmlInvalid(content, offset);\n        }\n        var tagText = content.slice(offset, cursor + 1);\n        var _getTag = getTag(tagText), tag = _getTag.tag, position = _getTag.position;\n        var text = allMatches[tag];\n        if (text == null) {\n            continue;\n        }\n        totalMatches.push({\n            type: \"tag\",\n            position: position,\n            text: text,\n            offset: offset,\n            value: tagText,\n            tag: tag\n        });\n    }\n    return totalMatches;\n}\nfunction getDelimiterErrors(delimiterMatches, fullText, syntaxOptions) {\n    var errors = [];\n    var inDelimiter = false;\n    var lastDelimiterMatch = {\n        offset: 0\n    };\n    var xtag;\n    var delimiterWithErrors = delimiterMatches.reduce(function(delimiterAcc, currDelimiterMatch) {\n        var position = currDelimiterMatch.position;\n        var delimiterOffset = currDelimiterMatch.offset;\n        var lastDelimiterOffset = lastDelimiterMatch.offset;\n        var lastDelimiterLength = lastDelimiterMatch.length;\n        xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset);\n        if (inDelimiter && position === \"start\") {\n            if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n                xtag = fullText.substr(lastDelimiterOffset, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n                if (!syntaxOptions.allowUnclosedTag) {\n                    errors.push(getDuplicateOpenTagException({\n                        xtag: xtag,\n                        offset: lastDelimiterOffset\n                    }));\n                    lastDelimiterMatch = currDelimiterMatch;\n                    delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                        error: true\n                    }));\n                    return delimiterAcc;\n                }\n            }\n            if (!syntaxOptions.allowUnclosedTag) {\n                errors.push(getUnclosedTagException({\n                    xtag: wordToUtf8(xtag),\n                    offset: lastDelimiterOffset\n                }));\n                lastDelimiterMatch = currDelimiterMatch;\n                delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                    error: true\n                }));\n                return delimiterAcc;\n            }\n            delimiterAcc.pop();\n        }\n        if (!inDelimiter && position === \"end\") {\n            if (syntaxOptions.allowUnopenedTag) {\n                return delimiterAcc;\n            }\n            if (lastDelimiterOffset + lastDelimiterLength === delimiterOffset) {\n                xtag = fullText.substr(lastDelimiterOffset - 4, delimiterOffset - lastDelimiterOffset + lastDelimiterLength + 4);\n                errors.push(getDuplicateCloseTagException({\n                    xtag: xtag,\n                    offset: lastDelimiterOffset\n                }));\n                lastDelimiterMatch = currDelimiterMatch;\n                delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                    error: true\n                }));\n                return delimiterAcc;\n            }\n            errors.push(getUnopenedTagException({\n                xtag: xtag,\n                offset: delimiterOffset\n            }));\n            lastDelimiterMatch = currDelimiterMatch;\n            delimiterAcc.push(_objectSpread(_objectSpread({}, currDelimiterMatch), {}, {\n                error: true\n            }));\n            return delimiterAcc;\n        }\n        inDelimiter = position === \"start\";\n        lastDelimiterMatch = currDelimiterMatch;\n        delimiterAcc.push(currDelimiterMatch);\n        return delimiterAcc;\n    }, []);\n    if (inDelimiter) {\n        var lastDelimiterOffset = lastDelimiterMatch.offset;\n        xtag = fullText.substr(lastDelimiterOffset, fullText.length - lastDelimiterOffset);\n        if (!syntaxOptions.allowUnclosedTag) {\n            errors.push(getUnclosedTagException({\n                xtag: wordToUtf8(xtag),\n                offset: lastDelimiterOffset\n            }));\n        } else {\n            delimiterWithErrors.pop();\n        }\n    }\n    return {\n        delimiterWithErrors: delimiterWithErrors,\n        errors: errors\n    };\n}\nfunction compareOffsets(startOffset, endOffset) {\n    if (startOffset === -1 && endOffset === -1) {\n        return DELIMITER_NONE;\n    }\n    if (startOffset === endOffset) {\n        return DELIMITER_EQUAL;\n    }\n    if (startOffset === -1 || endOffset === -1) {\n        return endOffset < startOffset ? DELIMITER_START : DELIMITER_END;\n    }\n    return startOffset < endOffset ? DELIMITER_START : DELIMITER_END;\n}\nfunction splitDelimiters(inside) {\n    var newDelimiters = inside.split(\" \");\n    if (newDelimiters.length !== 2) {\n        var err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n        err.properties = {\n            id: \"change_delimiters_invalid\",\n            explanation: \"Cannot parser delimiters\"\n        };\n        throw err;\n    }\n    var _newDelimiters = _slicedToArray(newDelimiters, 2), start = _newDelimiters[0], end = _newDelimiters[1];\n    if (start.length === 0 || end.length === 0) {\n        var _err = new XTTemplateError(\"New Delimiters cannot be parsed\");\n        _err.properties = {\n            id: \"change_delimiters_invalid\",\n            explanation: \"Cannot parser delimiters\"\n        };\n        throw _err;\n    }\n    return [\n        start,\n        end\n    ];\n}\nfunction getAllDelimiterIndexes(fullText, delimiters, syntaxOptions) {\n    var indexes = [];\n    var start = delimiters.start, end = delimiters.end;\n    var offset = -1;\n    var insideTag = false;\n    if (start == null && end == null) {\n        // Special case of delimiter set to null/null, no templating is done\n        return [];\n    }\n    while(true){\n        var startOffset = fullText.indexOf(start, offset + 1);\n        var endOffset = fullText.indexOf(end, offset + 1);\n        var position = null;\n        var len = void 0;\n        var compareResult = compareOffsets(startOffset, endOffset);\n        if (compareResult === DELIMITER_EQUAL) {\n            compareResult = insideTag ? DELIMITER_END : DELIMITER_START;\n        }\n        switch(compareResult){\n            case DELIMITER_NONE:\n                return indexes;\n            case DELIMITER_END:\n                insideTag = false;\n                offset = endOffset;\n                position = \"end\";\n                len = end.length;\n                break;\n            case DELIMITER_START:\n                insideTag = true;\n                offset = startOffset;\n                position = \"start\";\n                len = start.length;\n                break;\n        }\n        /*\n     * If tag starts with =, such as {=[ ]=}\n     * then the delimiters will change right after that tag.\n     *\n     * For example, with the following template :\n     *\n     * Hello {foo}, {=[ ]=}what's up with [name] ?\n     *\n     * The \"foo\" tag is a normal tag, the \"=[ ]=\" is a tag to change the\n     * delimiters to \"[\" and \"]\", and the last \"name\" is a tag with the new\n     * delimiters\n     */ if (syntaxOptions.changeDelimiterPrefix && compareResult === DELIMITER_START && fullText[offset + start.length] === syntaxOptions.changeDelimiterPrefix) {\n            indexes.push({\n                offset: startOffset,\n                position: \"start\",\n                length: start.length,\n                changedelimiter: true\n            });\n            var nextEqual = fullText.indexOf(syntaxOptions.changeDelimiterPrefix, offset + start.length + 1);\n            var nextEndOffset = fullText.indexOf(end, nextEqual + 1);\n            indexes.push({\n                offset: nextEndOffset,\n                position: \"end\",\n                length: end.length,\n                changedelimiter: true\n            });\n            var _insideTag = fullText.substr(offset + start.length + 1, nextEqual - offset - start.length - 1);\n            var _splitDelimiters = splitDelimiters(_insideTag);\n            var _splitDelimiters2 = _slicedToArray(_splitDelimiters, 2);\n            start = _splitDelimiters2[0];\n            end = _splitDelimiters2[1];\n            offset = nextEndOffset;\n            continue;\n        }\n        indexes.push({\n            offset: offset,\n            position: position,\n            length: len\n        });\n    }\n}\nfunction parseDelimiters(innerContentParts, delimiters, syntaxOptions) {\n    var full = innerContentParts.map(function(p) {\n        return p.value;\n    }).join(\"\");\n    var delimiterMatches = getAllDelimiterIndexes(full, delimiters, syntaxOptions);\n    var offset = 0;\n    var ranges = innerContentParts.map(function(part) {\n        offset += part.value.length;\n        return {\n            offset: offset - part.value.length,\n            lIndex: part.lIndex\n        };\n    });\n    var _getDelimiterErrors = getDelimiterErrors(delimiterMatches, full, syntaxOptions), delimiterWithErrors = _getDelimiterErrors.delimiterWithErrors, errors = _getDelimiterErrors.errors;\n    var cutNext = 0;\n    var delimiterIndex = 0;\n    var parsed = ranges.map(function(p, i) {\n        var offset = p.offset;\n        var range = [\n            offset,\n            offset + innerContentParts[i].value.length\n        ];\n        var partContent = innerContentParts[i].value;\n        var delimitersInOffset = [];\n        while(delimiterIndex < delimiterWithErrors.length && inRange(range, delimiterWithErrors[delimiterIndex])){\n            delimitersInOffset.push(delimiterWithErrors[delimiterIndex]);\n            delimiterIndex++;\n        }\n        var parts = [];\n        var cursor = 0;\n        if (cutNext > 0) {\n            cursor = cutNext;\n            cutNext = 0;\n        }\n        for(var _i6 = 0; _i6 < delimitersInOffset.length; _i6++){\n            var delimiterInOffset = delimitersInOffset[_i6];\n            var _value = partContent.substr(cursor, delimiterInOffset.offset - offset - cursor);\n            if (delimiterInOffset.changedelimiter) {\n                if (delimiterInOffset.position === \"start\") {\n                    if (_value.length > 0) {\n                        parts.push({\n                            type: \"content\",\n                            value: _value\n                        });\n                    }\n                } else {\n                    cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n                }\n                continue;\n            }\n            if (_value.length > 0) {\n                parts.push({\n                    type: \"content\",\n                    value: _value\n                });\n                cursor += _value.length;\n            }\n            var delimiterPart = {\n                type: \"delimiter\",\n                position: delimiterInOffset.position,\n                offset: cursor + offset\n            };\n            parts.push(delimiterPart);\n            cursor = delimiterInOffset.offset - offset + delimiterInOffset.length;\n        }\n        cutNext = cursor - partContent.length;\n        var value = partContent.substr(cursor);\n        if (value.length > 0) {\n            parts.push({\n                type: \"content\",\n                value: value\n            });\n        }\n        return parts;\n    }, this);\n    return {\n        parsed: parsed,\n        errors: errors\n    };\n}\nfunction isInsideContent(part) {\n    // Stryker disable all : because the part.position === \"insidetag\" would be enough but we want to make the API future proof\n    return part.type === \"content\" && part.position === \"insidetag\";\n// Stryker restore all\n}\nfunction getContentParts(xmlparsed) {\n    return xmlparsed.filter(isInsideContent);\n}\nfunction decodeContentParts(xmlparsed, fileType) {\n    var inTextTag = false;\n    for(var _i8 = 0; _i8 < xmlparsed.length; _i8++){\n        var part = xmlparsed[_i8];\n        inTextTag = updateInTextTag(part, inTextTag);\n        if (part.type === \"content\") {\n            part.position = inTextTag ? \"insidetag\" : \"outsidetag\";\n        }\n        if (fileType !== \"text\" && isInsideContent(part)) {\n            part.value = part.value.replace(/>/g, \"&gt;\");\n        }\n    }\n}\nmodule.exports = {\n    parseDelimiters: parseDelimiters,\n    parse: function parse(xmllexed, delimiters, syntax, fileType) {\n        decodeContentParts(xmllexed, fileType);\n        var _parseDelimiters = parseDelimiters(getContentParts(xmllexed), delimiters, syntax), delimiterParsed = _parseDelimiters.parsed, errors = _parseDelimiters.errors;\n        var lexed = [];\n        var index = 0;\n        var lIndex = 0;\n        for(var _i10 = 0; _i10 < xmllexed.length; _i10++){\n            var part = xmllexed[_i10];\n            if (isInsideContent(part)) {\n                for(var _i12 = 0, _delimiterParsed$inde2 = delimiterParsed[index]; _i12 < _delimiterParsed$inde2.length; _i12++){\n                    var p = _delimiterParsed$inde2[_i12];\n                    if (p.type === \"content\") {\n                        p.position = \"insidetag\";\n                    }\n                    p.lIndex = lIndex++;\n                }\n                pushArray(lexed, delimiterParsed[index]);\n                index++;\n            } else {\n                part.lIndex = lIndex++;\n                lexed.push(part);\n            }\n        }\n        return {\n            errors: errors,\n            lexed: lexed\n        };\n    },\n    xmlparse: function xmlparse(content, xmltags) {\n        var matches = tagMatcher(content, xmltags.text, xmltags.other);\n        var cursor = 0;\n        var parsed = matches.reduce(function(parsed, match) {\n            if (content.length > cursor && match.offset - cursor > 0) {\n                parsed.push({\n                    type: \"content\",\n                    value: content.substr(cursor, match.offset - cursor)\n                });\n            }\n            cursor = match.offset + match.value.length;\n            delete match.offset;\n            parsed.push(match);\n            return parsed;\n        }, []);\n        if (content.length > cursor) {\n            parsed.push({\n                type: \"content\",\n                value: content.substr(cursor)\n            });\n        }\n        return parsed;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/lexer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/merge-sort.js":
/*!*****************************************************!*\
  !*** ./node_modules/docxtemplater/js/merge-sort.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction getMinFromArrays(arrays, state) {\n    var minIndex = -1;\n    for(var i = 0, l = arrays.length; i < l; i++){\n        if (state[i] >= arrays[i].length) {\n            continue;\n        }\n        if (minIndex === -1 || arrays[i][state[i]].offset < arrays[minIndex][state[minIndex]].offset) {\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\nmodule.exports = function(arrays) {\n    var totalLength = arrays.reduce(function(sum, array) {\n        return sum + array.length;\n    }, 0);\n    arrays = arrays.filter(function(array) {\n        return array.length > 0;\n    });\n    var resultArray = new Array(totalLength);\n    var state = arrays.map(function() {\n        return 0;\n    });\n    for(var i = 0; i < totalLength; i++){\n        var arrayIndex = getMinFromArrays(arrays, state);\n        resultArray[i] = arrays[arrayIndex][state[arrayIndex]];\n        state[arrayIndex]++;\n    }\n    return resultArray;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tZXJnZS1zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsaUJBQWlCQyxNQUFNLEVBQUVDLEtBQUs7SUFDckMsSUFBSUMsV0FBVyxDQUFDO0lBQ2hCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJSixPQUFPSyxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQUs7UUFDN0MsSUFBSUYsS0FBSyxDQUFDRSxFQUFFLElBQUlILE1BQU0sQ0FBQ0csRUFBRSxDQUFDRSxNQUFNLEVBQUU7WUFDaEM7UUFDRjtRQUNBLElBQUlILGFBQWEsQ0FBQyxLQUFLRixNQUFNLENBQUNHLEVBQUUsQ0FBQ0YsS0FBSyxDQUFDRSxFQUFFLENBQUMsQ0FBQ0csTUFBTSxHQUFHTixNQUFNLENBQUNFLFNBQVMsQ0FBQ0QsS0FBSyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0ksTUFBTSxFQUFFO1lBQzVGSixXQUFXQztRQUNiO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBQ0FLLE9BQU9DLE9BQU8sR0FBRyxTQUFVUixNQUFNO0lBQy9CLElBQUlTLGNBQWNULE9BQU9VLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDbEQsT0FBT0QsTUFBTUMsTUFBTVAsTUFBTTtJQUMzQixHQUFHO0lBQ0hMLFNBQVNBLE9BQU9hLE1BQU0sQ0FBQyxTQUFVRCxLQUFLO1FBQ3BDLE9BQU9BLE1BQU1QLE1BQU0sR0FBRztJQUN4QjtJQUNBLElBQUlTLGNBQWMsSUFBSUMsTUFBTU47SUFDNUIsSUFBSVIsUUFBUUQsT0FBT2dCLEdBQUcsQ0FBQztRQUNyQixPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUliLElBQUksR0FBR0EsSUFBSU0sYUFBYU4sSUFBSztRQUNwQyxJQUFJYyxhQUFhbEIsaUJBQWlCQyxRQUFRQztRQUMxQ2EsV0FBVyxDQUFDWCxFQUFFLEdBQUdILE1BQU0sQ0FBQ2lCLFdBQVcsQ0FBQ2hCLEtBQUssQ0FBQ2dCLFdBQVcsQ0FBQztRQUN0RGhCLEtBQUssQ0FBQ2dCLFdBQVc7SUFDbkI7SUFDQSxPQUFPSDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL21lcmdlLXNvcnQuanM/NzE2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZ2V0TWluRnJvbUFycmF5cyhhcnJheXMsIHN0YXRlKSB7XG4gIHZhciBtaW5JbmRleCA9IC0xO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFycmF5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoc3RhdGVbaV0gPj0gYXJyYXlzW2ldLmxlbmd0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChtaW5JbmRleCA9PT0gLTEgfHwgYXJyYXlzW2ldW3N0YXRlW2ldXS5vZmZzZXQgPCBhcnJheXNbbWluSW5kZXhdW3N0YXRlW21pbkluZGV4XV0ub2Zmc2V0KSB7XG4gICAgICBtaW5JbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW5JbmRleDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFycmF5cykge1xuICB2YXIgdG90YWxMZW5ndGggPSBhcnJheXMucmVkdWNlKGZ1bmN0aW9uIChzdW0sIGFycmF5KSB7XG4gICAgcmV0dXJuIHN1bSArIGFycmF5Lmxlbmd0aDtcbiAgfSwgMCk7XG4gIGFycmF5cyA9IGFycmF5cy5maWx0ZXIoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lmxlbmd0aCA+IDA7XG4gIH0pO1xuICB2YXIgcmVzdWx0QXJyYXkgPSBuZXcgQXJyYXkodG90YWxMZW5ndGgpO1xuICB2YXIgc3RhdGUgPSBhcnJheXMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMDtcbiAgfSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWxMZW5ndGg7IGkrKykge1xuICAgIHZhciBhcnJheUluZGV4ID0gZ2V0TWluRnJvbUFycmF5cyhhcnJheXMsIHN0YXRlKTtcbiAgICByZXN1bHRBcnJheVtpXSA9IGFycmF5c1thcnJheUluZGV4XVtzdGF0ZVthcnJheUluZGV4XV07XG4gICAgc3RhdGVbYXJyYXlJbmRleF0rKztcbiAgfVxuICByZXR1cm4gcmVzdWx0QXJyYXk7XG59OyJdLCJuYW1lcyI6WyJnZXRNaW5Gcm9tQXJyYXlzIiwiYXJyYXlzIiwic3RhdGUiLCJtaW5JbmRleCIsImkiLCJsIiwibGVuZ3RoIiwib2Zmc2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsInRvdGFsTGVuZ3RoIiwicmVkdWNlIiwic3VtIiwiYXJyYXkiLCJmaWx0ZXIiLCJyZXN1bHRBcnJheSIsIkFycmF5IiwibWFwIiwiYXJyYXlJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/merge-sort.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/module-wrapper.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/module-wrapper.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), XTInternalError = _require.XTInternalError;\nfunction emptyFun() {}\nfunction identity(i) {\n    return i;\n}\nmodule.exports = function(module1) {\n    var defaults = {\n        set: emptyFun,\n        matchers: function matchers() {\n            return [];\n        },\n        parse: emptyFun,\n        render: emptyFun,\n        getTraits: emptyFun,\n        getFileType: emptyFun,\n        nullGetter: emptyFun,\n        optionsTransformer: identity,\n        postrender: identity,\n        errorsTransformer: identity,\n        getRenderedMap: identity,\n        preparse: identity,\n        postparse: identity,\n        on: emptyFun,\n        resolve: emptyFun,\n        preResolve: emptyFun\n    };\n    if (Object.keys(defaults).every(function(key) {\n        return !module1[key];\n    })) {\n        var err = new XTInternalError(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\");\n        err.properties = {\n            id: \"module_cannot_be_wrapped\",\n            explanation: \"This module cannot be wrapped, because it doesn't define any of the necessary functions\"\n        };\n        throw err;\n    }\n    for(var key in defaults){\n        module1[key] || (module1[key] = defaults[key]);\n    }\n    return module1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9tb2R1bGUtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLG9FQUFhLEdBQ2xDQyxrQkFBa0JGLFNBQVNFLGVBQWU7QUFDNUMsU0FBU0MsWUFBWTtBQUNyQixTQUFTQyxTQUFTQyxDQUFDO0lBQ2pCLE9BQU9BO0FBQ1Q7QUFDQUMsT0FBT0MsT0FBTyxHQUFHLFNBQVVELE9BQU07SUFDL0IsSUFBSUUsV0FBVztRQUNiQyxLQUFLTjtRQUNMTyxVQUFVLFNBQVNBO1lBQ2pCLE9BQU8sRUFBRTtRQUNYO1FBQ0FDLE9BQU9SO1FBQ1BTLFFBQVFUO1FBQ1JVLFdBQVdWO1FBQ1hXLGFBQWFYO1FBQ2JZLFlBQVlaO1FBQ1phLG9CQUFvQlo7UUFDcEJhLFlBQVliO1FBQ1pjLG1CQUFtQmQ7UUFDbkJlLGdCQUFnQmY7UUFDaEJnQixVQUFVaEI7UUFDVmlCLFdBQVdqQjtRQUNYa0IsSUFBSW5CO1FBQ0pvQixTQUFTcEI7UUFDVHFCLFlBQVlyQjtJQUNkO0lBQ0EsSUFBSXNCLE9BQU9DLElBQUksQ0FBQ2xCLFVBQVVtQixLQUFLLENBQUMsU0FBVUMsR0FBRztRQUMzQyxPQUFPLENBQUN0QixPQUFNLENBQUNzQixJQUFJO0lBQ3JCLElBQUk7UUFDRixJQUFJQyxNQUFNLElBQUkzQixnQkFBZ0I7UUFDOUIyQixJQUFJQyxVQUFVLEdBQUc7WUFDZkMsSUFBSTtZQUNKQyxhQUFhO1FBQ2Y7UUFDQSxNQUFNSDtJQUNSO0lBQ0EsSUFBSyxJQUFJRCxPQUFPcEIsU0FBVTtRQUN4QkYsT0FBTSxDQUFDc0IsSUFBSSxJQUFLdEIsQ0FBQUEsT0FBTSxDQUFDc0IsSUFBSSxHQUFHcEIsUUFBUSxDQUFDb0IsSUFBSTtJQUM3QztJQUNBLE9BQU90QjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL21vZHVsZS13cmFwcGVyLmpzPzAzOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKSxcbiAgWFRJbnRlcm5hbEVycm9yID0gX3JlcXVpcmUuWFRJbnRlcm5hbEVycm9yO1xuZnVuY3Rpb24gZW1wdHlGdW4oKSB7fVxuZnVuY3Rpb24gaWRlbnRpdHkoaSkge1xuICByZXR1cm4gaTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgc2V0OiBlbXB0eUZ1bixcbiAgICBtYXRjaGVyczogZnVuY3Rpb24gbWF0Y2hlcnMoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBwYXJzZTogZW1wdHlGdW4sXG4gICAgcmVuZGVyOiBlbXB0eUZ1bixcbiAgICBnZXRUcmFpdHM6IGVtcHR5RnVuLFxuICAgIGdldEZpbGVUeXBlOiBlbXB0eUZ1bixcbiAgICBudWxsR2V0dGVyOiBlbXB0eUZ1bixcbiAgICBvcHRpb25zVHJhbnNmb3JtZXI6IGlkZW50aXR5LFxuICAgIHBvc3RyZW5kZXI6IGlkZW50aXR5LFxuICAgIGVycm9yc1RyYW5zZm9ybWVyOiBpZGVudGl0eSxcbiAgICBnZXRSZW5kZXJlZE1hcDogaWRlbnRpdHksXG4gICAgcHJlcGFyc2U6IGlkZW50aXR5LFxuICAgIHBvc3RwYXJzZTogaWRlbnRpdHksXG4gICAgb246IGVtcHR5RnVuLFxuICAgIHJlc29sdmU6IGVtcHR5RnVuLFxuICAgIHByZVJlc29sdmU6IGVtcHR5RnVuXG4gIH07XG4gIGlmIChPYmplY3Qua2V5cyhkZWZhdWx0cykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhbW9kdWxlW2tleV07XG4gIH0pKSB7XG4gICAgdmFyIGVyciA9IG5ldyBYVEludGVybmFsRXJyb3IoXCJUaGlzIG1vZHVsZSBjYW5ub3QgYmUgd3JhcHBlZCwgYmVjYXVzZSBpdCBkb2Vzbid0IGRlZmluZSBhbnkgb2YgdGhlIG5lY2Vzc2FyeSBmdW5jdGlvbnNcIik7XG4gICAgZXJyLnByb3BlcnRpZXMgPSB7XG4gICAgICBpZDogXCJtb2R1bGVfY2Fubm90X2JlX3dyYXBwZWRcIixcbiAgICAgIGV4cGxhbmF0aW9uOiBcIlRoaXMgbW9kdWxlIGNhbm5vdCBiZSB3cmFwcGVkLCBiZWNhdXNlIGl0IGRvZXNuJ3QgZGVmaW5lIGFueSBvZiB0aGUgbmVjZXNzYXJ5IGZ1bmN0aW9uc1wiXG4gICAgfTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgbW9kdWxlW2tleV0gfHwgKG1vZHVsZVtrZXldID0gZGVmYXVsdHNba2V5XSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZTtcbn07Il0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsIlhUSW50ZXJuYWxFcnJvciIsImVtcHR5RnVuIiwiaWRlbnRpdHkiLCJpIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHRzIiwic2V0IiwibWF0Y2hlcnMiLCJwYXJzZSIsInJlbmRlciIsImdldFRyYWl0cyIsImdldEZpbGVUeXBlIiwibnVsbEdldHRlciIsIm9wdGlvbnNUcmFuc2Zvcm1lciIsInBvc3RyZW5kZXIiLCJlcnJvcnNUcmFuc2Zvcm1lciIsImdldFJlbmRlcmVkTWFwIiwicHJlcGFyc2UiLCJwb3N0cGFyc2UiLCJvbiIsInJlc29sdmUiLCJwcmVSZXNvbHZlIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5IiwiZXJyIiwicHJvcGVydGllcyIsImlkIiwiZXhwbGFuYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/common.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/common.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pushArray = _require.pushArray;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(rsc)/./node_modules/docxtemplater/js/filetypes.js\");\nvar _require2 = __webpack_require__(/*! ../content-types.js */ \"(rsc)/./node_modules/docxtemplater/js/content-types.js\"), settingsContentType = _require2.settingsContentType, coreContentType = _require2.coreContentType, appContentType = _require2.appContentType, customContentType = _require2.customContentType, diagramDataContentType = _require2.diagramDataContentType, diagramDrawingContentType = _require2.diagramDrawingContentType;\nvar commonContentTypes = [\n    settingsContentType,\n    coreContentType,\n    appContentType,\n    customContentType,\n    diagramDataContentType,\n    diagramDrawingContentType\n];\nvar Common = /*#__PURE__*/ function() {\n    function Common() {\n        _classCallCheck(this, Common);\n        this.name = \"Common\";\n    }\n    return _createClass(Common, [\n        {\n            key: \"getFileType\",\n            value: function getFileType(_ref) {\n                var doc = _ref.doc;\n                var invertedContentTypes = doc.invertedContentTypes;\n                if (!invertedContentTypes) {\n                    return;\n                }\n                for(var _i2 = 0; _i2 < commonContentTypes.length; _i2++){\n                    var ct = commonContentTypes[_i2];\n                    if (invertedContentTypes[ct]) {\n                        pushArray(doc.targets, invertedContentTypes[ct]);\n                    }\n                }\n                var keys = [\n                    \"docx\",\n                    \"pptx\",\n                    \"xlsx\"\n                ];\n                var ftCandidate;\n                for(var _i4 = 0; _i4 < keys.length; _i4++){\n                    var key = keys[_i4];\n                    var contentTypes = filetypes[key];\n                    for(var _i6 = 0; _i6 < contentTypes.length; _i6++){\n                        var _ct = contentTypes[_i6];\n                        if (invertedContentTypes[_ct]) {\n                            for(var _i8 = 0, _invertedContentTypes2 = invertedContentTypes[_ct]; _i8 < _invertedContentTypes2.length; _i8++){\n                                var target = _invertedContentTypes2[_i8];\n                                if (doc.relsTypes[target] && [\n                                    \"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument\",\n                                    \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"\n                                ].indexOf(doc.relsTypes[target]) === -1) {\n                                    continue;\n                                }\n                                ftCandidate = key;\n                                if (filetypes.main.indexOf(_ct) !== -1 || _ct === filetypes.pptx[0]) {\n                                    doc.textTarget || (doc.textTarget = target);\n                                }\n                                if (ftCandidate === \"xlsx\") {\n                                    continue;\n                                }\n                                doc.targets.push(target);\n                            }\n                        }\n                    }\n                    if (ftCandidate) {\n                        return ftCandidate;\n                    }\n                }\n                return ftCandidate;\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new Common());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js":
/*!********************************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/expand-pair-trait.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar traitName = \"expandPair\";\nvar mergeSort = __webpack_require__(/*! ../merge-sort.js */ \"(rsc)/./node_modules/docxtemplater/js/merge-sort.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), getLeft = _require.getLeft, getRight = _require.getRight, pushArray = _require.pushArray;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require2 = __webpack_require__(/*! ../traits.js */ \"(rsc)/./node_modules/docxtemplater/js/traits.js\"), getExpandToDefault = _require2.getExpandToDefault;\nvar _require3 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), getUnmatchedLoopException = _require3.getUnmatchedLoopException, getClosingTagNotMatchOpeningTag = _require3.getClosingTagNotMatchOpeningTag, getUnbalancedLoopException = _require3.getUnbalancedLoopException;\nfunction getOpenCountChange(part) {\n    switch(part.location){\n        case \"start\":\n            return 1;\n        case \"end\":\n            return -1;\n    }\n}\nfunction match(start, end) {\n    return start != null && end != null && (start.part.location === \"start\" && end.part.location === \"end\" && start.part.value === end.part.value || end.part.value === \"\");\n}\nfunction transformer(traits) {\n    var i = 0;\n    var errors = [];\n    while(i < traits.length){\n        var part = traits[i].part;\n        if (part.location === \"end\") {\n            if (i === 0) {\n                traits.splice(0, 1);\n                errors.push(getUnmatchedLoopException(part));\n                return {\n                    traits: traits,\n                    errors: errors\n                };\n            }\n            var endIndex = i;\n            var startIndex = i - 1;\n            var offseter = 1;\n            if (match(traits[startIndex], traits[endIndex])) {\n                traits.splice(endIndex, 1);\n                traits.splice(startIndex, 1);\n                return {\n                    errors: errors,\n                    traits: traits\n                };\n            }\n            while(offseter < 50){\n                var startCandidate = traits[startIndex - offseter];\n                var endCandidate = traits[endIndex + offseter];\n                if (match(startCandidate, traits[endIndex])) {\n                    traits.splice(endIndex, 1);\n                    traits.splice(startIndex - offseter, 1);\n                    return {\n                        errors: errors,\n                        traits: traits\n                    };\n                }\n                if (match(traits[startIndex], endCandidate)) {\n                    traits.splice(endIndex + offseter, 1);\n                    traits.splice(startIndex, 1);\n                    return {\n                        errors: errors,\n                        traits: traits\n                    };\n                }\n                offseter++;\n            }\n            errors.push(getClosingTagNotMatchOpeningTag({\n                tags: [\n                    traits[startIndex].part,\n                    traits[endIndex].part\n                ]\n            }));\n            traits.splice(endIndex, 1);\n            traits.splice(startIndex, 1);\n            return {\n                traits: traits,\n                errors: errors\n            };\n        }\n        i++;\n    }\n    for(var _i2 = 0; _i2 < traits.length; _i2++){\n        var _part = traits[_i2].part;\n        errors.push(getUnmatchedLoopException(_part));\n    }\n    return {\n        traits: [],\n        errors: errors\n    };\n}\nfunction getPairs(traits) {\n    var levelTraits = {};\n    var errors = [];\n    var pairs = [];\n    var transformedTraits = [];\n    pushArray(transformedTraits, traits);\n    while(transformedTraits.length > 0){\n        var result = transformer(transformedTraits);\n        pushArray(errors, result.errors);\n        transformedTraits = result.traits;\n    }\n    // Stryker disable all : because this check makes the function return quicker\n    if (errors.length > 0) {\n        return {\n            pairs: pairs,\n            errors: errors\n        };\n    }\n    // Stryker restore all\n    var countOpen = 0;\n    for(var _i4 = 0; _i4 < traits.length; _i4++){\n        var currentTrait = traits[_i4];\n        var part = currentTrait.part;\n        var change = getOpenCountChange(part);\n        countOpen += change;\n        if (change === 1) {\n            levelTraits[countOpen] = currentTrait;\n        } else {\n            var startTrait = levelTraits[countOpen + 1];\n            if (countOpen === 0) {\n                pairs.push([\n                    startTrait,\n                    currentTrait\n                ]);\n            }\n        }\n        countOpen = countOpen >= 0 ? countOpen : 0;\n    }\n    return {\n        pairs: pairs,\n        errors: errors\n    };\n}\nvar ExpandPairTrait = /*#__PURE__*/ function() {\n    function ExpandPairTrait() {\n        _classCallCheck(this, ExpandPairTrait);\n        this.name = \"ExpandPairTrait\";\n    }\n    return _createClass(ExpandPairTrait, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                if (docxtemplater.options.paragraphLoop) {\n                    pushArray(docxtemplater.fileTypeConfig.expandTags, docxtemplater.fileTypeConfig.onParagraphLoop);\n                }\n                this.expandTags = docxtemplater.fileTypeConfig.expandTags;\n                return options;\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, _ref) {\n                var _this = this;\n                var getTraits = _ref.getTraits, _postparse = _ref.postparse, fileType = _ref.fileType;\n                var traits = getTraits(traitName, postparsed);\n                traits = traits.map(function(trait) {\n                    return trait || [];\n                });\n                traits = mergeSort(traits);\n                var _getPairs = getPairs(traits), pairs = _getPairs.pairs, errors = _getPairs.errors;\n                var lastRight = 0;\n                var lastPair = null;\n                var expandedPairs = pairs.map(function(pair) {\n                    var expandTo = pair[0].part.expandTo;\n                    if (expandTo === \"auto\" && fileType !== \"text\") {\n                        var result = getExpandToDefault(postparsed, pair, _this.expandTags);\n                        if (result.error) {\n                            errors.push(result.error);\n                        }\n                        expandTo = result.value;\n                    }\n                    if (!expandTo || fileType === \"text\") {\n                        var _left = pair[0].offset;\n                        var _right = pair[1].offset;\n                        if (_left < lastRight && !_this.docxtemplater.options.syntax.allowUnbalancedLoops) {\n                            errors.push(getUnbalancedLoopException(pair, lastPair));\n                        }\n                        lastPair = pair;\n                        lastRight = _right;\n                        return [\n                            _left,\n                            _right\n                        ];\n                    }\n                    var left, right;\n                    try {\n                        left = getLeft(postparsed, expandTo, pair[0].offset);\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                    try {\n                        right = getRight(postparsed, expandTo, pair[1].offset);\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                    if (left < lastRight && !_this.docxtemplater.options.syntax.allowUnbalancedLoops) {\n                        errors.push(getUnbalancedLoopException(pair, lastPair));\n                    }\n                    lastRight = right;\n                    lastPair = pair;\n                    return [\n                        left,\n                        right\n                    ];\n                });\n                // Stryker disable all : because this check makes the function return quicker\n                if (errors.length > 0) {\n                    return {\n                        postparsed: postparsed,\n                        errors: errors\n                    };\n                }\n                // Stryker restore all\n                var currentPairIndex = 0;\n                var innerParts;\n                var newParsed = postparsed.reduce(function(newParsed, part, i) {\n                    var inPair = currentPairIndex < pairs.length && expandedPairs[currentPairIndex][0] <= i && i <= expandedPairs[currentPairIndex][1];\n                    var pair = pairs[currentPairIndex];\n                    var expandedPair = expandedPairs[currentPairIndex];\n                    if (!inPair) {\n                        newParsed.push(part);\n                        return newParsed;\n                    }\n                    // We're inside the pair\n                    if (expandedPair[0] === i) {\n                        // Start pair\n                        innerParts = [];\n                    }\n                    if (pair[0].offset !== i && pair[1].offset !== i) {\n                        // Exclude inner pair indexes\n                        innerParts.push(part);\n                    }\n                    if (expandedPair[1] === i) {\n                        // End pair\n                        var basePart = postparsed[pair[0].offset];\n                        basePart.subparsed = _postparse(innerParts, {\n                            basePart: basePart\n                        });\n                        basePart.endLindex = pair[1].part.lIndex;\n                        delete basePart.location;\n                        delete basePart.expandTo;\n                        newParsed.push(basePart);\n                        currentPairIndex++;\n                        var _expandedPair = expandedPairs[currentPairIndex];\n                        while(_expandedPair && _expandedPair[0] < i){\n                            /*\n             * If we have :\n             * expandedPairs =[[5,72],[51,67],[90,106]]\n             * Then after treating [5,72], we need to treat [90,106]\n             * Fixed since v3.58.4\n             */ currentPairIndex++;\n                            _expandedPair = expandedPairs[currentPairIndex];\n                        }\n                    }\n                    return newParsed;\n                }, []);\n                return {\n                    postparsed: newParsed,\n                    errors: errors\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new ExpandPairTrait());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/expand-pair-trait.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/loop.js":
/*!*******************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/loop.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), chunkBy = _require.chunkBy, last = _require.last, isParagraphStart = _require.isParagraphStart, isModule = _require.isModule, pushArray = _require.pushArray, isParagraphEnd = _require.isParagraphEnd, isContent = _require.isContent, startsWith = _require.startsWith, isTagEnd = _require.isTagEnd, isTagStart = _require.isTagStart, getSingleAttribute = _require.getSingleAttribute, setSingleAttribute = _require.setSingleAttribute;\nvar filetypes = __webpack_require__(/*! ../filetypes.js */ \"(rsc)/./node_modules/docxtemplater/js/filetypes.js\");\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar moduleName = \"loop\";\nfunction hasContent(parts) {\n    return parts.some(function(part) {\n        return isContent(part);\n    });\n}\nfunction getFirstMeaningFulPart(parsed) {\n    for(var _i2 = 0; _i2 < parsed.length; _i2++){\n        var part = parsed[_i2];\n        if (part.type !== \"content\") {\n            return part;\n        }\n    }\n    return null;\n}\nfunction isInsideParagraphLoop(part) {\n    var firstMeaningfulPart = getFirstMeaningFulPart(part.subparsed);\n    return firstMeaningfulPart != null && firstMeaningfulPart.tag !== \"w:t\";\n}\nfunction getPageBreakIfApplies(part) {\n    return part.hasPageBreak && isInsideParagraphLoop(part) ? '<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>' : \"\";\n}\nfunction isEnclosedByParagraphs(parsed) {\n    return parsed.length && isParagraphStart(parsed[0]) && isParagraphEnd(last(parsed));\n}\nfunction getOffset(chunk) {\n    return hasContent(chunk) ? 0 : chunk.length;\n}\nfunction addPageBreakAtEnd(subRendered) {\n    var j = subRendered.parts.length - 1;\n    if (subRendered.parts[j] === \"</w:p>\") {\n        subRendered.parts.splice(j, 0, '<w:r><w:br w:type=\"page\"/></w:r>');\n    } else {\n        subRendered.parts.push('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n    }\n}\nfunction addPageBreakAtBeginning(subRendered) {\n    subRendered.parts.unshift('<w:p><w:r><w:br w:type=\"page\"/></w:r></w:p>');\n}\nfunction isContinuous(parts) {\n    return parts.some(function(part) {\n        return isTagStart(\"w:type\", part) && part.value.indexOf(\"continuous\") !== -1;\n    });\n}\nfunction isNextPage(parts) {\n    return parts.some(function(part) {\n        return isTagStart(\"w:type\", part) && part.value.indexOf('w:val=\"nextPage\"') !== -1;\n    });\n}\nfunction addSectionBefore(parts, sect) {\n    return pushArray([\n        \"<w:p><w:pPr>\".concat(sect.map(function(_ref) {\n            var value = _ref.value;\n            return value;\n        }).join(\"\"), \"</w:pPr></w:p>\")\n    ], parts);\n}\nfunction addContinuousType(parts) {\n    var stop = false;\n    var inSectPr = false;\n    return parts.reduce(function(result, part) {\n        if (stop === false && startsWith(part, \"<w:sectPr\")) {\n            inSectPr = true;\n        }\n        if (inSectPr) {\n            if (startsWith(part, \"<w:type\")) {\n                stop = true;\n            }\n            if (stop === false && startsWith(part, \"</w:sectPr\")) {\n                result.push('<w:type w:val=\"continuous\"/>');\n            }\n        }\n        result.push(part);\n        return result;\n    }, []);\n}\nfunction dropHeaderFooterRefs(parts) {\n    return parts.filter(function(text) {\n        return !startsWith(text, \"<w:headerReference\") && !startsWith(text, \"<w:footerReference\");\n    });\n}\nfunction hasPageBreak(chunk) {\n    return chunk.some(function(part) {\n        return part.tag === \"w:br\" && part.value.indexOf('w:type=\"page\"') !== -1;\n    });\n}\nfunction hasImage(chunk) {\n    return chunk.some(function(_ref2) {\n        var tag = _ref2.tag;\n        return tag === \"w:drawing\";\n    });\n}\nfunction getSectPr(chunks) {\n    var collectSectPr = false;\n    var sectPrs = [];\n    for(var _i4 = 0; _i4 < chunks.length; _i4++){\n        var part = chunks[_i4];\n        if (isTagStart(\"w:sectPr\", part)) {\n            sectPrs.push([]);\n            collectSectPr = true;\n        }\n        if (collectSectPr) {\n            sectPrs[sectPrs.length - 1].push(part);\n        }\n        if (isTagEnd(\"w:sectPr\", part)) {\n            collectSectPr = false;\n        }\n    }\n    return sectPrs;\n}\nfunction getSectPrHeaderFooterChangeCount(chunks) {\n    var collectSectPr = false;\n    var sectPrCount = 0;\n    for(var _i6 = 0; _i6 < chunks.length; _i6++){\n        var part = chunks[_i6];\n        if (isTagStart(\"w:sectPr\", part)) {\n            collectSectPr = true;\n        }\n        if (collectSectPr) {\n            if (part.tag === \"w:headerReference\" || part.tag === \"w:footerReference\") {\n                sectPrCount++;\n                collectSectPr = false;\n            }\n        }\n        if (isTagEnd(\"w:sectPr\", part)) {\n            collectSectPr = false;\n        }\n    }\n    return sectPrCount;\n}\nfunction getLastSectPr(parsed) {\n    var sectPr = [];\n    var inSectPr = false;\n    for(var i = parsed.length - 1; i >= 0; i--){\n        var part = parsed[i];\n        if (isTagEnd(\"w:sectPr\", part)) {\n            inSectPr = true;\n        }\n        if (isTagStart(\"w:sectPr\", part)) {\n            sectPr.unshift(part.value);\n            inSectPr = false;\n        }\n        if (inSectPr) {\n            sectPr.unshift(part.value);\n        }\n        if (isParagraphStart(part)) {\n            if (sectPr.length > 0) {\n                return sectPr.join(\"\");\n            }\n            break;\n        }\n    }\n    return \"\";\n}\nvar LoopModule = /*#__PURE__*/ function() {\n    function LoopModule() {\n        _classCallCheck(this, LoopModule);\n        this.name = \"LoopModule\";\n        this.inXfrm = false;\n        this.totalSectPr = 0;\n        this.prefix = {\n            start: \"#\",\n            end: \"/\",\n            dash: /^-([^\\s]+)\\s(.+)/,\n            inverted: \"^\"\n        };\n    }\n    return _createClass(LoopModule, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(opts, docxtemplater) {\n                this.docxtemplater = docxtemplater;\n                return opts;\n            }\n        },\n        {\n            key: \"preparse\",\n            value: function preparse(parsed, _ref3) {\n                var contentType = _ref3.contentType;\n                if (filetypes.main.indexOf(contentType) !== -1) {\n                    this.sects = getSectPr(parsed);\n                }\n            }\n        },\n        {\n            key: \"matchers\",\n            value: function matchers() {\n                var module1 = moduleName;\n                return [\n                    [\n                        this.prefix.start,\n                        module1,\n                        {\n                            expandTo: \"auto\",\n                            location: \"start\",\n                            inverted: false\n                        }\n                    ],\n                    [\n                        this.prefix.inverted,\n                        module1,\n                        {\n                            expandTo: \"auto\",\n                            location: \"start\",\n                            inverted: true\n                        }\n                    ],\n                    [\n                        this.prefix.end,\n                        module1,\n                        {\n                            location: \"end\"\n                        }\n                    ],\n                    [\n                        this.prefix.dash,\n                        module1,\n                        function(_ref4) {\n                            var _ref5 = _slicedToArray(_ref4, 3), expandTo = _ref5[1], value = _ref5[2];\n                            return {\n                                location: \"start\",\n                                inverted: false,\n                                expandTo: expandTo,\n                                value: value\n                            };\n                        }\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"getTraits\",\n            value: function getTraits(traitName, parsed) {\n                // Stryker disable all : because getTraits should disappear in v4\n                if (traitName !== \"expandPair\") {\n                    return;\n                }\n                // Stryker restore all\n                return parsed.reduce(function(tags, part, offset) {\n                    if (isModule(part, moduleName) && part.subparsed == null) {\n                        tags.push({\n                            part: part,\n                            offset: offset\n                        });\n                    }\n                    return tags;\n                }, []);\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(parsed, _ref6) {\n                var basePart = _ref6.basePart;\n                if (basePart && this.docxtemplater.fileType === \"docx\" && parsed.length > 0) {\n                    basePart.sectPrCount = getSectPrHeaderFooterChangeCount(parsed);\n                    this.totalSectPr += basePart.sectPrCount;\n                    var sects = this.sects;\n                    sects.some(function(sect, index) {\n                        if (basePart.lIndex < sect[0].lIndex) {\n                            if (index + 1 < sects.length && isContinuous(sects[index + 1])) {\n                                basePart.addContinuousType = true;\n                            }\n                            return true;\n                        }\n                        if (parsed[0].lIndex < sect[0].lIndex && sect[0].lIndex < basePart.lIndex) {\n                            if (isNextPage(sects[index])) {\n                                basePart.addNextPage = {\n                                    index: index\n                                };\n                            }\n                            return true;\n                        }\n                    });\n                    basePart.lastParagrapSectPr = getLastSectPr(parsed);\n                }\n                if (!basePart || basePart.expandTo !== \"auto\" || basePart.module !== moduleName || !isEnclosedByParagraphs(parsed)) {\n                    return parsed;\n                }\n                basePart.paragraphLoop = true;\n                var level = 0;\n                var chunks = chunkBy(parsed, function(p) {\n                    if (isParagraphStart(p)) {\n                        level++;\n                        if (level === 1) {\n                            return \"start\";\n                        }\n                    }\n                    if (isParagraphEnd(p)) {\n                        level--;\n                        if (level === 0) {\n                            return \"end\";\n                        }\n                    }\n                    return null;\n                });\n                var firstChunk = chunks[0];\n                var lastChunk = last(chunks);\n                var firstOffset = getOffset(firstChunk);\n                var lastOffset = getOffset(lastChunk);\n                basePart.hasPageBreakBeginning = hasPageBreak(firstChunk);\n                basePart.hasPageBreak = hasPageBreak(lastChunk);\n                if (hasImage(firstChunk)) {\n                    firstOffset = 0;\n                }\n                if (hasImage(lastChunk)) {\n                    lastOffset = 0;\n                }\n                return parsed.slice(firstOffset, parsed.length - lastOffset);\n            }\n        },\n        {\n            key: \"resolve\",\n            value: function resolve(part, options) {\n                if (!isModule(part, moduleName)) {\n                    return null;\n                }\n                var sm = options.scopeManager;\n                var promisedValue = sm.getValueAsync(part.value, {\n                    part: part\n                });\n                var promises = [];\n                function loopOver(scope, i, length) {\n                    var scopeManager = sm.createSubScopeManager(scope, part.value, i, part, length);\n                    promises.push(options.resolve(_objectSpread(_objectSpread({}, options), {}, {\n                        compiled: part.subparsed,\n                        tags: {},\n                        scopeManager: scopeManager\n                    })));\n                }\n                var errorList = [];\n                return promisedValue.then(function(values) {\n                    return new Promise(function(resolve) {\n                        if (values instanceof Array) {\n                            Promise.all(values).then(resolve);\n                        } else {\n                            resolve(values);\n                        }\n                    }).then(function(values) {\n                        sm.loopOverValue(values, loopOver, part.inverted);\n                        return Promise.all(promises).then(function(r) {\n                            return r.map(function(_ref7) {\n                                var resolved = _ref7.resolved, errors = _ref7.errors;\n                                pushArray(errorList, errors);\n                                return resolved;\n                            });\n                        }).then(function(value) {\n                            if (errorList.length > 0) {\n                                throw errorList;\n                            }\n                            return value;\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, options) {\n                if (part.tag === \"p:xfrm\") {\n                    this.inXfrm = part.position === \"start\";\n                }\n                if (part.tag === \"a:ext\" && this.inXfrm) {\n                    this.lastExt = part;\n                    return part;\n                }\n                if (!isModule(part, moduleName)) {\n                    return null;\n                }\n                var totalValue = [];\n                var errors = [];\n                var heightOffset = 0;\n                var self = this;\n                var firstTag = part.subparsed[0];\n                var tagHeight = 0;\n                if ((firstTag === null || firstTag === void 0 ? void 0 : firstTag.tag) === \"a:tr\") {\n                    tagHeight = +getSingleAttribute(firstTag.value, \"h\");\n                }\n                heightOffset -= tagHeight;\n                var a16RowIdOffset = 0;\n                var insideParagraphLoop = isInsideParagraphLoop(part);\n                function loopOver(scope, i, length) {\n                    heightOffset += tagHeight;\n                    var scopeManager = options.scopeManager.createSubScopeManager(scope, part.value, i, part, length);\n                    for(var _i8 = 0, _part$subparsed2 = part.subparsed; _i8 < _part$subparsed2.length; _i8++){\n                        var pp = _part$subparsed2[_i8];\n                        if (isTagStart(\"a16:rowId\", pp)) {\n                            var val = +getSingleAttribute(pp.value, \"val\") + a16RowIdOffset;\n                            a16RowIdOffset = 1;\n                            pp.value = setSingleAttribute(pp.value, \"val\", val);\n                        }\n                    }\n                    var subRendered = options.render(_objectSpread(_objectSpread({}, options), {}, {\n                        compiled: part.subparsed,\n                        tags: {},\n                        scopeManager: scopeManager\n                    }));\n                    if (part.hasPageBreak && i === length - 1 && insideParagraphLoop) {\n                        addPageBreakAtEnd(subRendered);\n                    }\n                    var isNotFirst = scopeManager.scopePathItem.some(function(i) {\n                        return i !== 0;\n                    });\n                    if (isNotFirst) {\n                        if (part.sectPrCount === 1) {\n                            subRendered.parts = dropHeaderFooterRefs(subRendered.parts);\n                        }\n                        if (part.addContinuousType) {\n                            subRendered.parts = addContinuousType(subRendered.parts);\n                        }\n                    } else if (part.addNextPage) {\n                        subRendered.parts = addSectionBefore(subRendered.parts, self.sects[part.addNextPage.index]);\n                    }\n                    if (part.addNextPage) {\n                        addPageBreakAtEnd(subRendered);\n                    }\n                    if (part.hasPageBreakBeginning && insideParagraphLoop) {\n                        addPageBreakAtBeginning(subRendered);\n                    }\n                    for(var _i10 = 0, _subRendered$parts2 = subRendered.parts; _i10 < _subRendered$parts2.length; _i10++){\n                        var _val = _subRendered$parts2[_i10];\n                        totalValue.push(_val);\n                    }\n                    pushArray(errors, subRendered.errors);\n                }\n                var result = options.scopeManager.loopOver(part.value, loopOver, part.inverted, {\n                    part: part\n                });\n                // if the loop is showing empty content\n                if (result === false) {\n                    if (part.lastParagrapSectPr) {\n                        if (part.paragraphLoop) {\n                            return {\n                                value: \"<w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr></w:p>\")\n                            };\n                        }\n                        return {\n                            value: \"</w:t></w:r></w:p><w:p><w:pPr>\".concat(part.lastParagrapSectPr, \"</w:pPr><w:r><w:t>\")\n                        };\n                    }\n                    return {\n                        value: getPageBreakIfApplies(part) || \"\",\n                        errors: errors\n                    };\n                }\n                if (heightOffset !== 0) {\n                    var cy = +getSingleAttribute(this.lastExt.value, \"cy\");\n                    /*\n         * We do edit the value of a previous result here\n         * #edit-value-backwards\n         */ this.lastExt.value = setSingleAttribute(this.lastExt.value, \"cy\", cy + heightOffset);\n                }\n                return {\n                    value: options.joinUncorrupt(totalValue, _objectSpread(_objectSpread({}, options), {}, {\n                        basePart: part\n                    })),\n                    errors: errors\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new LoopModule());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/loop.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/rawxml.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/rawxml.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar traits = __webpack_require__(/*! ../traits.js */ \"(rsc)/./node_modules/docxtemplater/js/traits.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), isContent = _require.isContent;\nvar _require2 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), throwRawTagShouldBeOnlyTextInParagraph = _require2.throwRawTagShouldBeOnlyTextInParagraph, getInvalidRawXMLValueException = _require2.getInvalidRawXMLValueException;\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar moduleName = \"rawxml\";\nfunction getInner(_ref) {\n    var part = _ref.part, left = _ref.left, right = _ref.right, postparsed = _ref.postparsed, index = _ref.index;\n    var paragraphParts = postparsed.slice(left + 1, right);\n    for(var i = 0, len = paragraphParts.length; i < len; i++){\n        if (i === index - left - 1) {\n            continue;\n        }\n        var p = paragraphParts[i];\n        if (isContent(p)) {\n            throwRawTagShouldBeOnlyTextInParagraph({\n                paragraphParts: paragraphParts,\n                part: part\n            });\n        }\n    }\n    return part;\n}\nvar RawXmlModule = /*#__PURE__*/ function() {\n    function RawXmlModule() {\n        _classCallCheck(this, RawXmlModule);\n        this.name = \"RawXmlModule\";\n        this.prefix = \"@\";\n    }\n    return _createClass(RawXmlModule, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                this.fileTypeConfig = docxtemplater.fileTypeConfig;\n                return options;\n            }\n        },\n        {\n            key: \"matchers\",\n            value: function matchers() {\n                return [\n                    [\n                        this.prefix,\n                        moduleName\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed) {\n                return traits.expandToOne(postparsed, {\n                    moduleName: moduleName,\n                    getInner: getInner,\n                    expandTo: this.fileTypeConfig.tagRawXml,\n                    error: {\n                        message: \"Raw tag not in paragraph\",\n                        id: \"raw_tag_outerxml_invalid\",\n                        explanation: function explanation(part) {\n                            return 'The tag \"'.concat(part.value, '\" is not inside a paragraph, putting raw tags inside an inline loop is disallowed.');\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, options) {\n                if (part.module !== moduleName) {\n                    return null;\n                }\n                var value;\n                var errors = [];\n                try {\n                    value = options.scopeManager.getValue(part.value, {\n                        part: part\n                    });\n                    value !== null && value !== void 0 ? value : value = options.nullGetter(part);\n                } catch (e) {\n                    errors.push(e);\n                    return {\n                        errors: errors\n                    };\n                }\n                value = value ? value : \"\";\n                if (typeof value === \"string\") {\n                    return {\n                        value: value\n                    };\n                }\n                return {\n                    errors: [\n                        getInvalidRawXMLValueException({\n                            tag: part.value,\n                            value: value,\n                            offset: part.offset\n                        })\n                    ]\n                };\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new RawXmlModule());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/rawxml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/render.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/render.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), getScopeCompilationError = _require.getScopeCompilationError, getCorruptCharactersException = _require.getCorruptCharactersException;\nvar _require2 = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), utf8ToWord = _require2.utf8ToWord, hasCorruptCharacters = _require2.hasCorruptCharacters, removeCorruptCharacters = _require2.removeCorruptCharacters;\nvar _require3 = __webpack_require__(/*! ../content-types.js */ \"(rsc)/./node_modules/docxtemplater/js/content-types.js\"), settingsContentType = _require3.settingsContentType, coreContentType = _require3.coreContentType, appContentType = _require3.appContentType, customContentType = _require3.customContentType;\nvar NON_LINE_BREAKS_CONTENT_TYPE = [\n    settingsContentType,\n    coreContentType,\n    appContentType,\n    customContentType\n];\nvar ftprefix = {\n    docx: \"w\",\n    pptx: \"a\"\n};\nvar Render = /*#__PURE__*/ function() {\n    function Render() {\n        _classCallCheck(this, Render);\n        this.name = \"Render\";\n        this.recordRun = false;\n        this.recordedRun = [];\n    }\n    return _createClass(Render, [\n        {\n            key: \"optionsTransformer\",\n            value: function optionsTransformer(options, docxtemplater) {\n                this.docxtemplater = docxtemplater;\n                this.brTag = docxtemplater.fileType === \"docx\" ? \"<w:r><w:br/></w:r>\" : \"<a:br/>\";\n                this.prefix = ftprefix[docxtemplater.fileType];\n                this.runStartTag = \"\".concat(this.prefix, \":r\");\n                this.runPropsStartTag = \"\".concat(this.prefix, \":rPr\");\n                return options;\n            }\n        },\n        {\n            key: \"set\",\n            value: function set(obj) {\n                if (obj.compiled) {\n                    this.compiled = obj.compiled;\n                }\n                if (obj.data != null) {\n                    this.data = obj.data;\n                }\n            }\n        },\n        {\n            key: \"getRenderedMap\",\n            value: function getRenderedMap(mapper) {\n                for(var from in this.compiled){\n                    mapper[from] = {\n                        from: from,\n                        data: this.data\n                    };\n                }\n                return mapper;\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, options) {\n                var errors = [];\n                for(var _i2 = 0; _i2 < postparsed.length; _i2++){\n                    var p = postparsed[_i2];\n                    if (p.type === \"placeholder\") {\n                        var tag = p.value;\n                        try {\n                            options.cachedParsers[p.lIndex] = this.docxtemplater.parser(tag, {\n                                tag: p\n                            });\n                        } catch (rootError) {\n                            errors.push(getScopeCompilationError({\n                                tag: tag,\n                                rootError: rootError,\n                                offset: p.offset\n                            }));\n                        }\n                    }\n                }\n                return {\n                    postparsed: postparsed,\n                    errors: errors\n                };\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(part, _ref) {\n                var contentType = _ref.contentType, scopeManager = _ref.scopeManager, linebreaks = _ref.linebreaks, nullGetter = _ref.nullGetter, fileType = _ref.fileType, stripInvalidXMLChars = _ref.stripInvalidXMLChars;\n                if (NON_LINE_BREAKS_CONTENT_TYPE.indexOf(contentType) !== -1) {\n                    // Fixes issue tested in #docprops-linebreak\n                    linebreaks = false;\n                }\n                if (linebreaks) {\n                    this.recordRuns(part);\n                }\n                if (part.type !== \"placeholder\" || part.module) {\n                    return;\n                }\n                var value;\n                try {\n                    value = scopeManager.getValue(part.value, {\n                        part: part\n                    });\n                } catch (e) {\n                    return {\n                        errors: [\n                            e\n                        ]\n                    };\n                }\n                value !== null && value !== void 0 ? value : value = nullGetter(part);\n                if (typeof value === \"string\") {\n                    if (stripInvalidXMLChars) {\n                        value = removeCorruptCharacters(value);\n                    } else if ([\n                        \"docx\",\n                        \"pptx\",\n                        \"xlsx\"\n                    ].indexOf(fileType) !== -1 && hasCorruptCharacters(value)) {\n                        return {\n                            errors: [\n                                getCorruptCharactersException({\n                                    tag: part.value,\n                                    value: value,\n                                    offset: part.offset\n                                })\n                            ]\n                        };\n                    }\n                }\n                if (fileType === \"text\") {\n                    return {\n                        value: value\n                    };\n                }\n                return {\n                    value: linebreaks && typeof value === \"string\" ? this.renderLineBreaks(value) : utf8ToWord(value)\n                };\n            }\n        },\n        {\n            key: \"recordRuns\",\n            value: function recordRuns(part) {\n                if (part.tag === this.runStartTag) {\n                    this.recordedRun = \"\";\n                } else if (part.tag === this.runPropsStartTag) {\n                    if (part.position === \"start\") {\n                        this.recordRun = true;\n                        this.recordedRun += part.value;\n                    }\n                    if (part.position === \"end\" || part.position === \"selfclosing\") {\n                        this.recordedRun += part.value;\n                        this.recordRun = false;\n                    }\n                } else if (this.recordRun) {\n                    this.recordedRun += part.value;\n                }\n            }\n        },\n        {\n            key: \"renderLineBreaks\",\n            value: function renderLineBreaks(value) {\n                var result = [];\n                var lines = value.split(\"\\n\");\n                for(var i = 0, len = lines.length; i < len; i++){\n                    result.push(utf8ToWord(lines[i]));\n                    if (i < lines.length - 1) {\n                        result.push(\"</\".concat(this.prefix, \":t></\").concat(this.prefix, \":r>\").concat(this.brTag, \"<\").concat(this.prefix, \":r>\").concat(this.recordedRun, \"<\").concat(this.prefix, \":t\").concat(this.docxtemplater.fileType === \"docx\" ? ' xml:space=\"preserve\"' : \"\", \">\"));\n                    }\n                }\n                return result;\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new Render());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/render.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/modules/space-preserve.js":
/*!*****************************************************************!*\
  !*** ./node_modules/docxtemplater/js/modules/space-preserve.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar wrapper = __webpack_require__(/*! ../module-wrapper.js */ \"(rsc)/./node_modules/docxtemplater/js/module-wrapper.js\");\nvar _require = __webpack_require__(/*! ../doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), isTextStart = _require.isTextStart, isTextEnd = _require.isTextEnd, endsWith = _require.endsWith, startsWith = _require.startsWith, pushArray = _require.pushArray;\nvar wTpreserve = '<w:t xml:space=\"preserve\">';\nvar wTpreservelen = wTpreserve.length;\nvar wtEnd = \"</w:t>\";\nvar wtEndlen = wtEnd.length;\nfunction isWtStart(part) {\n    return isTextStart(part) && part.tag === \"w:t\";\n}\nfunction addXMLPreserve(chunk, index) {\n    var tag = chunk[index].value;\n    if (chunk[index + 1].value === \"</w:t>\") {\n        return tag;\n    }\n    if (tag.indexOf('xml:space=\"preserve\"') !== -1) {\n        return tag;\n    }\n    return tag.substr(0, tag.length - 1) + ' xml:space=\"preserve\">';\n}\nfunction isInsideLoop(meta, chunk) {\n    return meta && meta.basePart && chunk.length > 1;\n}\n// This module is used only for `docx` files\nvar SpacePreserve = /*#__PURE__*/ function() {\n    function SpacePreserve() {\n        _classCallCheck(this, SpacePreserve);\n        this.name = \"SpacePreserveModule\";\n    }\n    return _createClass(SpacePreserve, [\n        {\n            key: \"postparse\",\n            value: function postparse(postparsed, meta) {\n                var chunk = [], inTextTag = false, endLindex = 0, lastTextTag = 0;\n                function isStartingPlaceHolder(part, chunk) {\n                    return part.type === \"placeholder\" && chunk.length > 1;\n                }\n                var result = postparsed.reduce(function(postparsed, part) {\n                    if (isWtStart(part)) {\n                        inTextTag = true;\n                        lastTextTag = chunk.length;\n                    }\n                    if (!inTextTag) {\n                        postparsed.push(part);\n                        return postparsed;\n                    }\n                    chunk.push(part);\n                    if (isInsideLoop(meta, chunk)) {\n                        endLindex = meta.basePart.endLindex;\n                        chunk[0].value = addXMLPreserve(chunk, 0);\n                    }\n                    if (isStartingPlaceHolder(part, chunk)) {\n                        chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n                        endLindex = part.endLindex;\n                    }\n                    if (isTextEnd(part) && part.lIndex > endLindex) {\n                        if (endLindex !== 0) {\n                            chunk[lastTextTag].value = addXMLPreserve(chunk, lastTextTag);\n                        }\n                        pushArray(postparsed, chunk);\n                        chunk = [];\n                        inTextTag = false;\n                        endLindex = 0;\n                        lastTextTag = 0;\n                    }\n                    return postparsed;\n                }, []);\n                pushArray(result, chunk);\n                return result;\n            }\n        },\n        {\n            key: \"postrender\",\n            value: function postrender(parts) {\n                var lastNonEmpty = \"\";\n                var lastNonEmptyIndex = 0;\n                for(var i = 0, len = parts.length; i < len; i++){\n                    var p = parts[i];\n                    if (p === \"\") {\n                        continue;\n                    }\n                    if (endsWith(lastNonEmpty, wTpreserve) && startsWith(p, wtEnd)) {\n                        parts[lastNonEmptyIndex] = lastNonEmpty.substr(0, lastNonEmpty.length - wTpreservelen) + \"<w:t/>\";\n                        p = p.substr(wtEndlen);\n                    }\n                    lastNonEmpty = p;\n                    lastNonEmptyIndex = i;\n                    parts[i] = p;\n                }\n                return parts;\n            }\n        }\n    ]);\n}();\nmodule.exports = function() {\n    return wrapper(new SpacePreserve());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/modules/space-preserve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/parser.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), wordToUtf8 = _require.wordToUtf8, pushArray = _require.pushArray;\nvar _require2 = __webpack_require__(/*! ./prefix-matcher.js */ \"(rsc)/./node_modules/docxtemplater/js/prefix-matcher.js\"), match = _require2.match, getValue = _require2.getValue, getValues = _require2.getValues;\nfunction getMatchers(modules, options) {\n    var allMatchers = [];\n    for(var _i2 = 0; _i2 < modules.length; _i2++){\n        var _module = modules[_i2];\n        if (_module.matchers) {\n            var matchers = _module.matchers(options);\n            if (!(matchers instanceof Array)) {\n                throw new Error(\"module matcher returns a non array\");\n            }\n            pushArray(allMatchers, matchers);\n        }\n    }\n    return allMatchers;\n}\nfunction getMatches(matchers, placeHolderContent, options) {\n    var matches = [];\n    for(var _i4 = 0; _i4 < matchers.length; _i4++){\n        var matcher = matchers[_i4];\n        var _matcher = _slicedToArray(matcher, 2), prefix = _matcher[0], _module2 = _matcher[1];\n        var properties = matcher[2] || {};\n        if (options.match(prefix, placeHolderContent)) {\n            var values = options.getValues(prefix, placeHolderContent);\n            if (typeof properties === \"function\") {\n                properties = properties(values);\n            }\n            if (!properties.value) {\n                var _values = _slicedToArray(values, 2);\n                properties.value = _values[1];\n            }\n            matches.push(_objectSpread({\n                type: \"placeholder\",\n                prefix: prefix,\n                module: _module2,\n                onMatch: properties.onMatch,\n                priority: properties.priority\n            }, properties));\n        }\n    }\n    return matches;\n}\nfunction moduleParse(placeHolderContent, options) {\n    var modules = options.modules;\n    var startOffset = options.startOffset;\n    var endLindex = options.lIndex;\n    var moduleParsed;\n    options.offset = startOffset;\n    options.match = match;\n    options.getValue = getValue;\n    options.getValues = getValues;\n    var matchers = getMatchers(modules, options);\n    var matches = getMatches(matchers, placeHolderContent, options);\n    if (matches.length > 0) {\n        var bestMatch = null;\n        for(var _i6 = 0; _i6 < matches.length; _i6++){\n            var _match = matches[_i6];\n            _match.priority || (_match.priority = -_match.value.length);\n            if (!bestMatch || _match.priority > bestMatch.priority) {\n                bestMatch = _match;\n            }\n        }\n        bestMatch.offset = startOffset;\n        delete bestMatch.priority;\n        bestMatch.endLindex = endLindex;\n        bestMatch.lIndex = endLindex;\n        bestMatch.raw = placeHolderContent;\n        if (bestMatch.onMatch) {\n            bestMatch.onMatch(bestMatch);\n        }\n        delete bestMatch.onMatch;\n        delete bestMatch.prefix;\n        return bestMatch;\n    }\n    for(var _i8 = 0; _i8 < modules.length; _i8++){\n        var _module3 = modules[_i8];\n        moduleParsed = _module3.parse(placeHolderContent, options);\n        if (moduleParsed) {\n            moduleParsed.offset = startOffset;\n            moduleParsed.endLindex = endLindex;\n            moduleParsed.lIndex = endLindex;\n            moduleParsed.raw = placeHolderContent;\n            return moduleParsed;\n        }\n    }\n    return {\n        type: \"placeholder\",\n        value: placeHolderContent,\n        offset: startOffset,\n        endLindex: endLindex,\n        lIndex: endLindex\n    };\n}\nvar parser = {\n    preparse: function preparse(parsed, modules, options) {\n        function preparse(parsed, options) {\n            for(var _i10 = 0; _i10 < modules.length; _i10++){\n                var _module4 = modules[_i10];\n                parsed = _module4.preparse(parsed, options) || parsed;\n            }\n            return parsed;\n        }\n        return preparse(parsed, options);\n    },\n    parse: function parse(lexed, modules, options) {\n        var inPlaceHolder = false;\n        var placeHolderContent = \"\";\n        var startOffset;\n        var tailParts = [];\n        var droppedTags = options.fileTypeConfig.droppedTagsInsidePlaceholder || [];\n        return lexed.reduce(function(parsed, token) {\n            if (token.type === \"delimiter\") {\n                inPlaceHolder = token.position === \"start\";\n                if (token.position === \"end\") {\n                    options.parse = function(placeHolderContent) {\n                        return moduleParse(placeHolderContent, _objectSpread(_objectSpread(_objectSpread({}, options), token), {}, {\n                            startOffset: startOffset,\n                            modules: modules\n                        }));\n                    };\n                    parsed.push(options.parse(wordToUtf8(placeHolderContent)));\n                    pushArray(parsed, tailParts);\n                    tailParts = [];\n                }\n                if (token.position === \"start\") {\n                    tailParts = [];\n                    startOffset = token.offset;\n                }\n                placeHolderContent = \"\";\n                return parsed;\n            }\n            if (!inPlaceHolder) {\n                parsed.push(token);\n                return parsed;\n            }\n            if (token.type !== \"content\" || token.position !== \"insidetag\") {\n                if (droppedTags.indexOf(token.tag) !== -1) {\n                    return parsed;\n                }\n                tailParts.push(token);\n                return parsed;\n            }\n            placeHolderContent += token.value;\n            return parsed;\n        }, []);\n    },\n    postparse: function postparse(postparsed, modules, options) {\n        function getTraits(traitName, postparsed) {\n            return modules.map(function(module1) {\n                return module1.getTraits(traitName, postparsed);\n            });\n        }\n        var errors = [];\n        function _postparse(postparsed, options) {\n            return modules.reduce(function(postparsed, module1) {\n                var r = module1.postparse(postparsed, _objectSpread(_objectSpread({}, options), {}, {\n                    postparse: function postparse(parsed, opts) {\n                        return _postparse(parsed, _objectSpread(_objectSpread({}, options), opts));\n                    },\n                    getTraits: getTraits\n                }));\n                if (r == null) {\n                    return postparsed;\n                }\n                if (r.errors) {\n                    pushArray(errors, r.errors);\n                    return r.postparsed;\n                }\n                return r;\n            }, postparsed);\n        }\n        return {\n            postparsed: _postparse(postparsed, options),\n            errors: errors\n        };\n    }\n};\nmodule.exports = parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/postrender.js":
/*!*****************************************************!*\
  !*** ./node_modules/docxtemplater/js/postrender.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n/*\n * Convert string to array (typed, when possible)\n * Stryker disable all : because this is a utility function that was copied\n * from\n * https://github.com/open-xml-templating/pizzip/blob/34a840553c604980859dc6d0dcd1f89b6e5527b3/es6/utf8.js#L33\n */ function string2buf(str) {\n    var c, c2, mPos, i, bufLen = 0;\n    var strLen = str.length;\n    // count binary size\n    for(mPos = 0; mPos < strLen; mPos++){\n        c = str.charCodeAt(mPos);\n        if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n            c2 = str.charCodeAt(mPos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                mPos++;\n            }\n        }\n        bufLen += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    var buf = new Uint8Array(bufLen);\n    // convert\n    for(i = 0, mPos = 0; i < bufLen; mPos++){\n        c = str.charCodeAt(mPos);\n        if ((c & 0xfc00) === 0xd800 && mPos + 1 < strLen) {\n            c2 = str.charCodeAt(mPos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                mPos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */ buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xc0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xe0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n}\n// Stryker restore all\nfunction postrender(parts, options) {\n    for(var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++){\n        var _module = _options$modules2[_i2];\n        parts = _module.postrender(parts, options);\n    }\n    var fullLength = 0;\n    var newParts = options.joinUncorrupt(parts, options);\n    var longStr = \"\";\n    var lenStr = 0;\n    var maxCompact = 65536;\n    var uintArrays = [];\n    for(var i = 0, len = newParts.length; i < len; i++){\n        var part = newParts[i];\n        /*\n     * This condition should be hit in the integration test at :\n     * it(\"should not regress with long file (hit maxCompact value of 65536)\", function () {\n     * Stryker disable all : because this is an optimisation that won't make any tests fail\n     */ if (part.length + lenStr > maxCompact) {\n            var _arr = string2buf(longStr);\n            fullLength += _arr.length;\n            uintArrays.push(_arr);\n            longStr = \"\";\n        }\n        // Stryker restore all\n        longStr += part;\n        lenStr += part.length;\n        delete newParts[i];\n    }\n    var arr = string2buf(longStr);\n    fullLength += arr.length;\n    uintArrays.push(arr);\n    var array = new Uint8Array(fullLength);\n    var j = 0;\n    // Stryker disable all : because this is an optimisation that won't make any tests fail\n    for(var _i4 = 0; _i4 < uintArrays.length; _i4++){\n        var buf = uintArrays[_i4];\n        for(var _i5 = 0; _i5 < buf.length; ++_i5){\n            array[_i5 + j] = buf[_i5];\n        }\n        j += buf.length;\n    } // Stryker restore all\n    return array;\n}\nmodule.exports = postrender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/postrender.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/prefix-matcher.js":
/*!*********************************************************!*\
  !*** ./node_modules/docxtemplater/js/prefix-matcher.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nvar nbspRegex = new RegExp(String.fromCharCode(160), \"g\");\nfunction replaceNbsps(str) {\n    return str.replace(nbspRegex, \" \");\n}\nfunction match(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return replaceNbsps(placeHolderContent.substr(0, condition.length)) === condition;\n    }\n    if (condition instanceof RegExp) {\n        return condition.test(replaceNbsps(placeHolderContent));\n    }\n    if (type === \"function\") {\n        return !!condition(placeHolderContent);\n    }\n}\nfunction getValue(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return replaceNbsps(placeHolderContent).substr(condition.length);\n    }\n    if (condition instanceof RegExp) {\n        return replaceNbsps(placeHolderContent).match(condition)[1];\n    }\n    if (type === \"function\") {\n        return condition(placeHolderContent);\n    }\n}\nfunction getValues(condition, placeHolderContent) {\n    var type = _typeof(condition);\n    if (type === \"string\") {\n        return [\n            placeHolderContent,\n            replaceNbsps(placeHolderContent).substr(condition.length)\n        ];\n    }\n    if (condition instanceof RegExp) {\n        return replaceNbsps(placeHolderContent).match(condition);\n    }\n    if (type === \"function\") {\n        return [\n            placeHolderContent,\n            condition(placeHolderContent)\n        ];\n    }\n}\nmodule.exports = {\n    match: match,\n    getValue: getValue,\n    getValues: getValues\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9wcmVmaXgtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFFBQVFDLENBQUM7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQUksT0FBTyxPQUFPQTtJQUFHLElBQUksU0FBVUEsQ0FBQztRQUFJLE9BQU9BLEtBQUssY0FBYyxPQUFPQyxVQUFVRCxFQUFFRyxXQUFXLEtBQUtGLFVBQVVELE1BQU1DLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUcsR0FBR0QsUUFBUUM7QUFBSTtBQUM3VCxJQUFJSyxZQUFZLElBQUlDLE9BQU9DLE9BQU9DLFlBQVksQ0FBQyxNQUFNO0FBQ3JELFNBQVNDLGFBQWFDLEdBQUc7SUFDdkIsT0FBT0EsSUFBSUMsT0FBTyxDQUFDTixXQUFXO0FBQ2hDO0FBQ0EsU0FBU08sTUFBTUMsU0FBUyxFQUFFQyxrQkFBa0I7SUFDMUMsSUFBSUMsT0FBT2hCLFFBQVFjO0lBQ25CLElBQUlFLFNBQVMsVUFBVTtRQUNyQixPQUFPTixhQUFhSyxtQkFBbUJFLE1BQU0sQ0FBQyxHQUFHSCxVQUFVSSxNQUFNLE9BQU9KO0lBQzFFO0lBQ0EsSUFBSUEscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9PLFVBQVVLLElBQUksQ0FBQ1QsYUFBYUs7SUFDckM7SUFDQSxJQUFJQyxTQUFTLFlBQVk7UUFDdkIsT0FBTyxDQUFDLENBQUNGLFVBQVVDO0lBQ3JCO0FBQ0Y7QUFDQSxTQUFTSyxTQUFTTixTQUFTLEVBQUVDLGtCQUFrQjtJQUM3QyxJQUFJQyxPQUFPaEIsUUFBUWM7SUFDbkIsSUFBSUUsU0FBUyxVQUFVO1FBQ3JCLE9BQU9OLGFBQWFLLG9CQUFvQkUsTUFBTSxDQUFDSCxVQUFVSSxNQUFNO0lBQ2pFO0lBQ0EsSUFBSUoscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9HLGFBQWFLLG9CQUFvQkYsS0FBSyxDQUFDQyxVQUFVLENBQUMsRUFBRTtJQUM3RDtJQUNBLElBQUlFLFNBQVMsWUFBWTtRQUN2QixPQUFPRixVQUFVQztJQUNuQjtBQUNGO0FBQ0EsU0FBU00sVUFBVVAsU0FBUyxFQUFFQyxrQkFBa0I7SUFDOUMsSUFBSUMsT0FBT2hCLFFBQVFjO0lBQ25CLElBQUlFLFNBQVMsVUFBVTtRQUNyQixPQUFPO1lBQUNEO1lBQW9CTCxhQUFhSyxvQkFBb0JFLE1BQU0sQ0FBQ0gsVUFBVUksTUFBTTtTQUFFO0lBQ3hGO0lBQ0EsSUFBSUoscUJBQXFCUCxRQUFRO1FBQy9CLE9BQU9HLGFBQWFLLG9CQUFvQkYsS0FBSyxDQUFDQztJQUNoRDtJQUNBLElBQUlFLFNBQVMsWUFBWTtRQUN2QixPQUFPO1lBQUNEO1lBQW9CRCxVQUFVQztTQUFvQjtJQUM1RDtBQUNGO0FBQ0FPLE9BQU9DLE9BQU8sR0FBRztJQUNmVixPQUFPQTtJQUNQTyxVQUFVQTtJQUNWQyxXQUFXQTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL3ByZWZpeC1tYXRjaGVyLmpzPzczNzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbnZhciBuYnNwUmVnZXggPSBuZXcgUmVnRXhwKFN0cmluZy5mcm9tQ2hhckNvZGUoMTYwKSwgXCJnXCIpO1xuZnVuY3Rpb24gcmVwbGFjZU5ic3BzKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UobmJzcFJlZ2V4LCBcIiBcIik7XG59XG5mdW5jdGlvbiBtYXRjaChjb25kaXRpb24sIHBsYWNlSG9sZGVyQ29udGVudCkge1xuICB2YXIgdHlwZSA9IF90eXBlb2YoY29uZGl0aW9uKTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gcmVwbGFjZU5ic3BzKHBsYWNlSG9sZGVyQ29udGVudC5zdWJzdHIoMCwgY29uZGl0aW9uLmxlbmd0aCkpID09PSBjb25kaXRpb247XG4gIH1cbiAgaWYgKGNvbmRpdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBjb25kaXRpb24udGVzdChyZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KSk7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiAhIWNvbmRpdGlvbihwbGFjZUhvbGRlckNvbnRlbnQpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRWYWx1ZShjb25kaXRpb24sIHBsYWNlSG9sZGVyQ29udGVudCkge1xuICB2YXIgdHlwZSA9IF90eXBlb2YoY29uZGl0aW9uKTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gcmVwbGFjZU5ic3BzKHBsYWNlSG9sZGVyQ29udGVudCkuc3Vic3RyKGNvbmRpdGlvbi5sZW5ndGgpO1xuICB9XG4gIGlmIChjb25kaXRpb24gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVwbGFjZU5ic3BzKHBsYWNlSG9sZGVyQ29udGVudCkubWF0Y2goY29uZGl0aW9uKVsxXTtcbiAgfVxuICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGNvbmRpdGlvbihwbGFjZUhvbGRlckNvbnRlbnQpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRWYWx1ZXMoY29uZGl0aW9uLCBwbGFjZUhvbGRlckNvbnRlbnQpIHtcbiAgdmFyIHR5cGUgPSBfdHlwZW9mKGNvbmRpdGlvbik7XG4gIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIFtwbGFjZUhvbGRlckNvbnRlbnQsIHJlcGxhY2VOYnNwcyhwbGFjZUhvbGRlckNvbnRlbnQpLnN1YnN0cihjb25kaXRpb24ubGVuZ3RoKV07XG4gIH1cbiAgaWYgKGNvbmRpdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZXBsYWNlTmJzcHMocGxhY2VIb2xkZXJDb250ZW50KS5tYXRjaChjb25kaXRpb24pO1xuICB9XG4gIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gW3BsYWNlSG9sZGVyQ29udGVudCwgY29uZGl0aW9uKHBsYWNlSG9sZGVyQ29udGVudCldO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWF0Y2g6IG1hdGNoLFxuICBnZXRWYWx1ZTogZ2V0VmFsdWUsXG4gIGdldFZhbHVlczogZ2V0VmFsdWVzXG59OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJuYnNwUmVnZXgiLCJSZWdFeHAiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyZXBsYWNlTmJzcHMiLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giLCJjb25kaXRpb24iLCJwbGFjZUhvbGRlckNvbnRlbnQiLCJ0eXBlIiwic3Vic3RyIiwibGVuZ3RoIiwidGVzdCIsImdldFZhbHVlIiwiZ2V0VmFsdWVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/prefix-matcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/render.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/render.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), throwUnimplementedTagType = _require.throwUnimplementedTagType, XTScopeParserError = _require.XTScopeParserError;\nvar _require2 = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pushArray = _require2.pushArray;\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(rsc)/./node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleRender(part, options) {\n    for(var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++){\n        var _module = _options$modules2[_i2];\n        var moduleRendered = _module.render(part, options);\n        if (moduleRendered) {\n            return moduleRendered;\n        }\n    }\n    return false;\n}\nfunction render(options) {\n    var baseNullGetter = options.baseNullGetter;\n    var compiled = options.compiled, scopeManager = options.scopeManager;\n    options.nullGetter = function(part, sm) {\n        return baseNullGetter(part, sm || scopeManager);\n    };\n    var errors = [];\n    var parts = [];\n    for(var i = 0, len = compiled.length; i < len; i++){\n        var part = compiled[i];\n        options.index = i;\n        options.resolvedId = getResolvedId(part, options);\n        var moduleRendered = void 0;\n        try {\n            moduleRendered = moduleRender(part, options);\n        } catch (e) {\n            if (e instanceof XTScopeParserError) {\n                errors.push(e);\n                parts.push(part);\n                continue;\n            }\n            throw e;\n        }\n        if (moduleRendered) {\n            if (moduleRendered.errors) {\n                pushArray(errors, moduleRendered.errors);\n            }\n            parts.push(moduleRendered);\n            continue;\n        }\n        if (part.type === \"content\" || part.type === \"tag\") {\n            parts.push(part);\n            continue;\n        }\n        throwUnimplementedTagType(part, i);\n    }\n    // This is done in two steps because for some files, it is possible to #edit-value-backwards\n    var totalParts = [];\n    for(var _i4 = 0; _i4 < parts.length; _i4++){\n        var value = parts[_i4].value;\n        if (value instanceof Array) {\n            pushArray(totalParts, value);\n        } else if (value) {\n            totalParts.push(value);\n        }\n    }\n    return {\n        errors: errors,\n        parts: totalParts\n    };\n}\nmodule.exports = render;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9yZW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQyxvRUFBYSxHQUNsQ0MsNEJBQTRCRixTQUFTRSx5QkFBeUIsRUFDOURDLHFCQUFxQkgsU0FBU0csa0JBQWtCO0FBQ2xELElBQUlDLFlBQVlILG1CQUFPQSxDQUFDLDBFQUFnQixHQUN0Q0ksWUFBWUQsVUFBVUMsU0FBUztBQUNqQyxJQUFJQyxnQkFBZ0JMLG1CQUFPQSxDQUFDLHNGQUFzQjtBQUNsRCxTQUFTTSxhQUFhQyxJQUFJLEVBQUVDLE9BQU87SUFDakMsSUFBSyxJQUFJQyxNQUFNLEdBQUdDLG9CQUFvQkYsUUFBUUcsT0FBTyxFQUFFRixNQUFNQyxrQkFBa0JFLE1BQU0sRUFBRUgsTUFBTztRQUM1RixJQUFJSSxVQUFVSCxpQkFBaUIsQ0FBQ0QsSUFBSTtRQUNwQyxJQUFJSyxpQkFBaUJELFFBQVFFLE1BQU0sQ0FBQ1IsTUFBTUM7UUFDMUMsSUFBSU0sZ0JBQWdCO1lBQ2xCLE9BQU9BO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUNBLFNBQVNDLE9BQU9QLE9BQU87SUFDckIsSUFBSVEsaUJBQWlCUixRQUFRUSxjQUFjO0lBQzNDLElBQUlDLFdBQVdULFFBQVFTLFFBQVEsRUFDN0JDLGVBQWVWLFFBQVFVLFlBQVk7SUFDckNWLFFBQVFXLFVBQVUsR0FBRyxTQUFVWixJQUFJLEVBQUVhLEVBQUU7UUFDckMsT0FBT0osZUFBZVQsTUFBTWEsTUFBTUY7SUFDcEM7SUFDQSxJQUFJRyxTQUFTLEVBQUU7SUFDZixJQUFJQyxRQUFRLEVBQUU7SUFDZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTVAsU0FBU0wsTUFBTSxFQUFFVyxJQUFJQyxLQUFLRCxJQUFLO1FBQ25ELElBQUloQixPQUFPVSxRQUFRLENBQUNNLEVBQUU7UUFDdEJmLFFBQVFpQixLQUFLLEdBQUdGO1FBQ2hCZixRQUFRa0IsVUFBVSxHQUFHckIsY0FBY0UsTUFBTUM7UUFDekMsSUFBSU0saUJBQWlCLEtBQUs7UUFDMUIsSUFBSTtZQUNGQSxpQkFBaUJSLGFBQWFDLE1BQU1DO1FBQ3RDLEVBQUUsT0FBT21CLEdBQUc7WUFDVixJQUFJQSxhQUFhekIsb0JBQW9CO2dCQUNuQ21CLE9BQU9PLElBQUksQ0FBQ0Q7Z0JBQ1pMLE1BQU1NLElBQUksQ0FBQ3JCO2dCQUNYO1lBQ0Y7WUFDQSxNQUFNb0I7UUFDUjtRQUNBLElBQUliLGdCQUFnQjtZQUNsQixJQUFJQSxlQUFlTyxNQUFNLEVBQUU7Z0JBQ3pCakIsVUFBVWlCLFFBQVFQLGVBQWVPLE1BQU07WUFDekM7WUFDQUMsTUFBTU0sSUFBSSxDQUFDZDtZQUNYO1FBQ0Y7UUFDQSxJQUFJUCxLQUFLc0IsSUFBSSxLQUFLLGFBQWF0QixLQUFLc0IsSUFBSSxLQUFLLE9BQU87WUFDbERQLE1BQU1NLElBQUksQ0FBQ3JCO1lBQ1g7UUFDRjtRQUNBTiwwQkFBMEJNLE1BQU1nQjtJQUNsQztJQUVBLDRGQUE0RjtJQUM1RixJQUFJTyxhQUFhLEVBQUU7SUFDbkIsSUFBSyxJQUFJQyxNQUFNLEdBQUdBLE1BQU1ULE1BQU1WLE1BQU0sRUFBRW1CLE1BQU87UUFDM0MsSUFBSUMsUUFBUVYsS0FBSyxDQUFDUyxJQUFJLENBQUNDLEtBQUs7UUFDNUIsSUFBSUEsaUJBQWlCQyxPQUFPO1lBQzFCN0IsVUFBVTBCLFlBQVlFO1FBQ3hCLE9BQU8sSUFBSUEsT0FBTztZQUNoQkYsV0FBV0YsSUFBSSxDQUFDSTtRQUNsQjtJQUNGO0lBQ0EsT0FBTztRQUNMWCxRQUFRQTtRQUNSQyxPQUFPUTtJQUNUO0FBQ0Y7QUFDQUksT0FBT0MsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWtlLXJlbnRhbC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvcmVuZGVyLmpzP2Y4YTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKSxcbiAgdGhyb3dVbmltcGxlbWVudGVkVGFnVHlwZSA9IF9yZXF1aXJlLnRocm93VW5pbXBsZW1lbnRlZFRhZ1R5cGUsXG4gIFhUU2NvcGVQYXJzZXJFcnJvciA9IF9yZXF1aXJlLlhUU2NvcGVQYXJzZXJFcnJvcjtcbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKFwiLi9kb2MtdXRpbHMuanNcIiksXG4gIHB1c2hBcnJheSA9IF9yZXF1aXJlMi5wdXNoQXJyYXk7XG52YXIgZ2V0UmVzb2x2ZWRJZCA9IHJlcXVpcmUoXCIuL2dldC1yZXNvbHZlZC1pZC5qc1wiKTtcbmZ1bmN0aW9uIG1vZHVsZVJlbmRlcihwYXJ0LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIF9pMiA9IDAsIF9vcHRpb25zJG1vZHVsZXMyID0gb3B0aW9ucy5tb2R1bGVzOyBfaTIgPCBfb3B0aW9ucyRtb2R1bGVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIF9tb2R1bGUgPSBfb3B0aW9ucyRtb2R1bGVzMltfaTJdO1xuICAgIHZhciBtb2R1bGVSZW5kZXJlZCA9IF9tb2R1bGUucmVuZGVyKHBhcnQsIG9wdGlvbnMpO1xuICAgIGlmIChtb2R1bGVSZW5kZXJlZCkge1xuICAgICAgcmV0dXJuIG1vZHVsZVJlbmRlcmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiByZW5kZXIob3B0aW9ucykge1xuICB2YXIgYmFzZU51bGxHZXR0ZXIgPSBvcHRpb25zLmJhc2VOdWxsR2V0dGVyO1xuICB2YXIgY29tcGlsZWQgPSBvcHRpb25zLmNvbXBpbGVkLFxuICAgIHNjb3BlTWFuYWdlciA9IG9wdGlvbnMuc2NvcGVNYW5hZ2VyO1xuICBvcHRpb25zLm51bGxHZXR0ZXIgPSBmdW5jdGlvbiAocGFydCwgc20pIHtcbiAgICByZXR1cm4gYmFzZU51bGxHZXR0ZXIocGFydCwgc20gfHwgc2NvcGVNYW5hZ2VyKTtcbiAgfTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgcGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbXBpbGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHBhcnQgPSBjb21waWxlZFtpXTtcbiAgICBvcHRpb25zLmluZGV4ID0gaTtcbiAgICBvcHRpb25zLnJlc29sdmVkSWQgPSBnZXRSZXNvbHZlZElkKHBhcnQsIG9wdGlvbnMpO1xuICAgIHZhciBtb2R1bGVSZW5kZXJlZCA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgbW9kdWxlUmVuZGVyZWQgPSBtb2R1bGVSZW5kZXIocGFydCwgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBYVFNjb3BlUGFyc2VyRXJyb3IpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVJlbmRlcmVkKSB7XG4gICAgICBpZiAobW9kdWxlUmVuZGVyZWQuZXJyb3JzKSB7XG4gICAgICAgIHB1c2hBcnJheShlcnJvcnMsIG1vZHVsZVJlbmRlcmVkLmVycm9ycyk7XG4gICAgICB9XG4gICAgICBwYXJ0cy5wdXNoKG1vZHVsZVJlbmRlcmVkKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocGFydC50eXBlID09PSBcImNvbnRlbnRcIiB8fCBwYXJ0LnR5cGUgPT09IFwidGFnXCIpIHtcbiAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGhyb3dVbmltcGxlbWVudGVkVGFnVHlwZShwYXJ0LCBpKTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgZG9uZSBpbiB0d28gc3RlcHMgYmVjYXVzZSBmb3Igc29tZSBmaWxlcywgaXQgaXMgcG9zc2libGUgdG8gI2VkaXQtdmFsdWUtYmFja3dhcmRzXG4gIHZhciB0b3RhbFBhcnRzID0gW107XG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IHBhcnRzLmxlbmd0aDsgX2k0KyspIHtcbiAgICB2YXIgdmFsdWUgPSBwYXJ0c1tfaTRdLnZhbHVlO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBwdXNoQXJyYXkodG90YWxQYXJ0cywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHRvdGFsUGFydHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgcGFydHM6IHRvdGFsUGFydHNcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gcmVuZGVyOyJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJ0aHJvd1VuaW1wbGVtZW50ZWRUYWdUeXBlIiwiWFRTY29wZVBhcnNlckVycm9yIiwiX3JlcXVpcmUyIiwicHVzaEFycmF5IiwiZ2V0UmVzb2x2ZWRJZCIsIm1vZHVsZVJlbmRlciIsInBhcnQiLCJvcHRpb25zIiwiX2kyIiwiX29wdGlvbnMkbW9kdWxlczIiLCJtb2R1bGVzIiwibGVuZ3RoIiwiX21vZHVsZSIsIm1vZHVsZVJlbmRlcmVkIiwicmVuZGVyIiwiYmFzZU51bGxHZXR0ZXIiLCJjb21waWxlZCIsInNjb3BlTWFuYWdlciIsIm51bGxHZXR0ZXIiLCJzbSIsImVycm9ycyIsInBhcnRzIiwiaSIsImxlbiIsImluZGV4IiwicmVzb2x2ZWRJZCIsImUiLCJwdXNoIiwidHlwZSIsInRvdGFsUGFydHMiLCJfaTQiLCJ2YWx1ZSIsIkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/render.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/resolve.js":
/*!**************************************************!*\
  !*** ./node_modules/docxtemplater/js/resolve.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pushArray = _require.pushArray;\nvar getResolvedId = __webpack_require__(/*! ./get-resolved-id.js */ \"(rsc)/./node_modules/docxtemplater/js/get-resolved-id.js\");\nfunction moduleResolve(part, options) {\n    for(var _i2 = 0, _options$modules2 = options.modules; _i2 < _options$modules2.length; _i2++){\n        var _module = _options$modules2[_i2];\n        var moduleResolved = _module.resolve(part, options);\n        if (moduleResolved) {\n            return moduleResolved;\n        }\n    }\n    return false;\n}\nfunction resolve(options) {\n    var resolved = [];\n    var baseNullGetter = options.baseNullGetter;\n    var compiled = options.compiled, scopeManager = options.scopeManager;\n    options.nullGetter = function(part, sm) {\n        return baseNullGetter(part, sm || scopeManager);\n    };\n    options.resolved = resolved;\n    var errors = [];\n    return Promise.all(compiled.filter(function(part) {\n        return [\n            \"content\",\n            \"tag\"\n        ].indexOf(part.type) === -1;\n    }).reduce(function(promises, part) {\n        var moduleResolved = moduleResolve(part, _objectSpread(_objectSpread({}, options), {}, {\n            resolvedId: getResolvedId(part, options)\n        }));\n        var result;\n        if (moduleResolved) {\n            result = moduleResolved.then(function(value) {\n                resolved.push({\n                    tag: part.value,\n                    lIndex: part.lIndex,\n                    value: value\n                });\n            });\n        } else if (part.type === \"placeholder\") {\n            result = scopeManager.getValueAsync(part.value, {\n                part: part\n            }).then(function(value) {\n                return value == null ? options.nullGetter(part) : value;\n            }).then(function(value) {\n                resolved.push({\n                    tag: part.value,\n                    lIndex: part.lIndex,\n                    value: value\n                });\n                return value;\n            });\n        } else {\n            return;\n        }\n        promises.push(result[\"catch\"](function(e) {\n            if (e instanceof Array) {\n                pushArray(errors, e);\n            } else {\n                errors.push(e);\n            }\n        }));\n        return promises;\n    }, [])).then(function() {\n        return {\n            errors: errors,\n            resolved: resolved\n        };\n    });\n}\nmodule.exports = resolve;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/resolve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/scope-manager.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/scope-manager.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), getScopeParserExecutionError = _require.getScopeParserExecutionError;\nvar _require2 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/docxtemplater/js/utils.js\"), last = _require2.last;\nvar _require3 = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), concatArrays = _require3.concatArrays;\nfunction find(list, fn) {\n    var length = list.length >>> 0;\n    var value;\n    for(var i = 0; i < length; i++){\n        value = list[i];\n        if (fn.call(this, value, i, list)) {\n            return value;\n        }\n    }\n    return undefined;\n}\nfunction _getValue(tag, meta, num) {\n    var _this = this;\n    var scope = this.scopeList[num];\n    if (this.root.finishedResolving) {\n        var w = this.resolved;\n        var _loop = function _loop() {\n            var lIndex = _this.scopeLindex[i];\n            w = find(w, function(r) {\n                return r.lIndex === lIndex;\n            });\n            w = w.value[_this.scopePathItem[i]];\n        };\n        for(var i = this.resolveOffset, len = this.scopePath.length; i < len; i++){\n            _loop();\n        }\n        return find(w, function(r) {\n            return meta.part.lIndex === r.lIndex;\n        }).value;\n    }\n    // search in the scopes (in reverse order) and keep the first defined value\n    var result;\n    var parser;\n    if (!this.cachedParsers || !meta.part) {\n        parser = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    } else if (this.cachedParsers[meta.part.lIndex]) {\n        parser = this.cachedParsers[meta.part.lIndex];\n    } else {\n        parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    }\n    try {\n        result = parser.get(scope, this.getContext(meta, num));\n    } catch (error) {\n        throw getScopeParserExecutionError({\n            tag: tag,\n            scope: scope,\n            error: error,\n            offset: meta.part.offset\n        });\n    }\n    if (result == null && num > 0) {\n        return _getValue.call(this, tag, meta, num - 1);\n    }\n    return result;\n}\nfunction _getValueAsync(tag, meta, num) {\n    var _this2 = this;\n    var scope = this.scopeList[num];\n    // search in the scopes (in reverse order) and keep the first defined value\n    var parser;\n    if (!this.cachedParsers || !meta.part) {\n        parser = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    } else if (this.cachedParsers[meta.part.lIndex]) {\n        parser = this.cachedParsers[meta.part.lIndex];\n    } else {\n        parser = this.cachedParsers[meta.part.lIndex] = this.parser(tag, {\n            tag: meta.part,\n            scopePath: this.scopePath\n        });\n    }\n    return Promise.resolve().then(function() {\n        return parser.get(scope, _this2.getContext(meta, num));\n    })[\"catch\"](function(error) {\n        throw getScopeParserExecutionError({\n            tag: tag,\n            scope: scope,\n            error: error,\n            offset: meta.part.offset\n        });\n    }).then(function(result) {\n        if (result == null && num > 0) {\n            return _getValueAsync.call(_this2, tag, meta, num - 1);\n        }\n        return result;\n    });\n}\nvar ScopeManager = /*#__PURE__*/ function() {\n    function ScopeManager(options) {\n        _classCallCheck(this, ScopeManager);\n        this.root = options.root || this;\n        this.resolveOffset = options.resolveOffset || 0;\n        this.scopePath = options.scopePath;\n        this.scopePathItem = options.scopePathItem;\n        this.scopePathLength = options.scopePathLength;\n        this.scopeList = options.scopeList;\n        this.scopeType = \"\";\n        this.scopeTypes = options.scopeTypes;\n        this.scopeLindex = options.scopeLindex;\n        this.parser = options.parser;\n        this.resolved = options.resolved;\n        this.cachedParsers = options.cachedParsers;\n    }\n    return _createClass(ScopeManager, [\n        {\n            key: \"loopOver\",\n            value: function loopOver(tag, functor, inverted, meta) {\n                return this.loopOverValue(this.getValue(tag, meta), functor, inverted);\n            }\n        },\n        {\n            key: \"functorIfInverted\",\n            value: function functorIfInverted(inverted, functor, value, i, length) {\n                if (inverted) {\n                    functor(value, i, length);\n                }\n                return inverted;\n            }\n        },\n        {\n            key: \"isValueFalsy\",\n            value: function isValueFalsy(value, type) {\n                return value == null || !value || type === \"[object Array]\" && value.length === 0;\n            }\n        },\n        {\n            key: \"loopOverValue\",\n            value: function loopOverValue(value, functor, inverted) {\n                if (this.root.finishedResolving) {\n                    inverted = false;\n                }\n                var type = Object.prototype.toString.call(value);\n                if (this.isValueFalsy(value, type)) {\n                    this.scopeType = false;\n                    return this.functorIfInverted(inverted, functor, last(this.scopeList), 0, 1);\n                }\n                if (type === \"[object Array]\") {\n                    this.scopeType = \"array\";\n                    for(var i = 0; i < value.length; i++){\n                        this.functorIfInverted(!inverted, functor, value[i], i, value.length);\n                    }\n                    return true;\n                }\n                if (type === \"[object Object]\") {\n                    this.scopeType = \"object\";\n                    return this.functorIfInverted(!inverted, functor, value, 0, 1);\n                }\n                return this.functorIfInverted(!inverted, functor, last(this.scopeList), 0, 1);\n            }\n        },\n        {\n            key: \"getValue\",\n            value: function getValue(tag, meta) {\n                var result = _getValue.call(this, tag, meta, this.scopeList.length - 1);\n                if (typeof result === \"function\") {\n                    return result(this.scopeList[this.scopeList.length - 1], this);\n                }\n                return result;\n            }\n        },\n        {\n            key: \"getValueAsync\",\n            value: function getValueAsync(tag, meta) {\n                var _this3 = this;\n                return _getValueAsync.call(this, tag, meta, this.scopeList.length - 1).then(function(result) {\n                    if (typeof result === \"function\") {\n                        return result(_this3.scopeList[_this3.scopeList.length - 1], _this3);\n                    }\n                    return result;\n                });\n            }\n        },\n        {\n            key: \"getContext\",\n            value: function getContext(meta, num) {\n                return {\n                    num: num,\n                    meta: meta,\n                    scopeList: this.scopeList,\n                    resolved: this.resolved,\n                    scopePath: this.scopePath,\n                    scopeTypes: this.scopeTypes,\n                    scopePathItem: this.scopePathItem,\n                    scopePathLength: this.scopePathLength\n                };\n            }\n        },\n        {\n            key: \"createSubScopeManager\",\n            value: function createSubScopeManager(scope, tag, i, part, length) {\n                return new ScopeManager({\n                    root: this.root,\n                    resolveOffset: this.resolveOffset,\n                    resolved: this.resolved,\n                    parser: this.parser,\n                    cachedParsers: this.cachedParsers,\n                    scopeTypes: concatArrays([\n                        this.scopeTypes,\n                        [\n                            this.scopeType\n                        ]\n                    ]),\n                    scopeList: concatArrays([\n                        this.scopeList,\n                        [\n                            scope\n                        ]\n                    ]),\n                    scopePath: concatArrays([\n                        this.scopePath,\n                        [\n                            tag\n                        ]\n                    ]),\n                    scopePathItem: concatArrays([\n                        this.scopePathItem,\n                        [\n                            i\n                        ]\n                    ]),\n                    scopePathLength: concatArrays([\n                        this.scopePathLength,\n                        [\n                            length\n                        ]\n                    ]),\n                    scopeLindex: concatArrays([\n                        this.scopeLindex,\n                        [\n                            part.lIndex\n                        ]\n                    ])\n                });\n            }\n        }\n    ]);\n}();\nmodule.exports = function(options) {\n    options.scopePath = [];\n    options.scopePathItem = [];\n    options.scopePathLength = [];\n    options.scopeTypes = [];\n    options.scopeLindex = [];\n    options.scopeList = [\n        options.tags\n    ];\n    return new ScopeManager(options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy9zY29wZS1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsUUFBUUMsQ0FBQztJQUFJO0lBQTJCLE9BQU9ELFVBQVUsY0FBYyxPQUFPRSxVQUFVLFlBQVksT0FBT0EsT0FBT0MsUUFBUSxHQUFHLFNBQVVGLENBQUM7UUFBSSxPQUFPLE9BQU9BO0lBQUcsSUFBSSxTQUFVQSxDQUFDO1FBQUksT0FBT0EsS0FBSyxjQUFjLE9BQU9DLFVBQVVELEVBQUVHLFdBQVcsS0FBS0YsVUFBVUQsTUFBTUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFBRyxHQUFHRCxRQUFRQztBQUFJO0FBQzdULFNBQVNLLGdCQUFnQkMsQ0FBQyxFQUFFQyxDQUFDO0lBQUksSUFBSSxDQUFFRCxDQUFBQSxhQUFhQyxDQUFBQSxHQUFJLE1BQU0sSUFBSUMsVUFBVTtBQUFzQztBQUNsSCxTQUFTQyxrQkFBa0JDLENBQUMsRUFBRUMsQ0FBQztJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxFQUFFRSxNQUFNLEVBQUVELElBQUs7UUFBRSxJQUFJWixJQUFJVyxDQUFDLENBQUNDLEVBQUU7UUFBRVosRUFBRWMsVUFBVSxHQUFHZCxFQUFFYyxVQUFVLElBQUksQ0FBQyxHQUFHZCxFQUFFZSxZQUFZLEdBQUcsQ0FBQyxHQUFHLFdBQVdmLEtBQU1BLENBQUFBLEVBQUVnQixRQUFRLEdBQUcsQ0FBQyxJQUFJQyxPQUFPQyxjQUFjLENBQUNSLEdBQUdTLGVBQWVuQixFQUFFb0IsR0FBRyxHQUFHcEI7SUFBSTtBQUFFO0FBQ3ZPLFNBQVNxQixhQUFhWCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUFJLE9BQU9ELEtBQUtGLGtCQUFrQkMsRUFBRU4sU0FBUyxFQUFFTyxJQUFJQyxLQUFLSCxrQkFBa0JDLEdBQUdFLElBQUlLLE9BQU9DLGNBQWMsQ0FBQ1IsR0FBRyxhQUFhO1FBQUVNLFVBQVUsQ0FBQztJQUFFLElBQUlOO0FBQUc7QUFDMUssU0FBU1MsZUFBZVAsQ0FBQztJQUFJLElBQUlVLElBQUlDLGFBQWFYLEdBQUc7SUFBVyxPQUFPLFlBQVliLFFBQVF1QixLQUFLQSxJQUFJQSxJQUFJO0FBQUk7QUFDNUcsU0FBU0MsYUFBYVgsQ0FBQyxFQUFFRCxDQUFDO0lBQUksSUFBSSxZQUFZWixRQUFRYSxNQUFNLENBQUNBLEdBQUcsT0FBT0E7SUFBRyxJQUFJRixJQUFJRSxDQUFDLENBQUNYLE9BQU91QixXQUFXLENBQUM7SUFBRSxJQUFJLEtBQUssTUFBTWQsR0FBRztRQUFFLElBQUlZLElBQUlaLEVBQUVlLElBQUksQ0FBQ2IsR0FBR0QsS0FBSztRQUFZLElBQUksWUFBWVosUUFBUXVCLElBQUksT0FBT0E7UUFBRyxNQUFNLElBQUlkLFVBQVU7SUFBaUQ7SUFBRSxPQUFPLENBQUMsYUFBYUcsSUFBSWUsU0FBU0MsTUFBSyxFQUFHZjtBQUFJO0FBQzNULElBQUlnQixXQUFXQyxtQkFBT0EsQ0FBQyxvRUFBYSxHQUNsQ0MsK0JBQStCRixTQUFTRSw0QkFBNEI7QUFDdEUsSUFBSUMsWUFBWUYsbUJBQU9BLENBQUMsa0VBQVksR0FDbENHLE9BQU9ELFVBQVVDLElBQUk7QUFDdkIsSUFBSUMsWUFBWUosbUJBQU9BLENBQUMsMEVBQWdCLEdBQ3RDSyxlQUFlRCxVQUFVQyxZQUFZO0FBQ3ZDLFNBQVNDLEtBQUtDLElBQUksRUFBRUMsRUFBRTtJQUNwQixJQUFJeEIsU0FBU3VCLEtBQUt2QixNQUFNLEtBQUs7SUFDN0IsSUFBSXlCO0lBQ0osSUFBSyxJQUFJaEIsSUFBSSxHQUFHQSxJQUFJVCxRQUFRUyxJQUFLO1FBQy9CZ0IsUUFBUUYsSUFBSSxDQUFDZCxFQUFFO1FBQ2YsSUFBSWUsR0FBR1osSUFBSSxDQUFDLElBQUksRUFBRWEsT0FBT2hCLEdBQUdjLE9BQU87WUFDakMsT0FBT0U7UUFDVDtJQUNGO0lBQ0EsT0FBT0M7QUFDVDtBQUNBLFNBQVNDLFVBQVVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxHQUFHO0lBQy9CLElBQUlDLFFBQVEsSUFBSTtJQUNoQixJQUFJQyxRQUFRLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxJQUFJO0lBQy9CLElBQUksSUFBSSxDQUFDSSxJQUFJLENBQUNDLGlCQUFpQixFQUFFO1FBQy9CLElBQUlDLElBQUksSUFBSSxDQUFDQyxRQUFRO1FBQ3JCLElBQUlDLFFBQVEsU0FBU0E7WUFDbkIsSUFBSUMsU0FBU1IsTUFBTVMsV0FBVyxDQUFDL0IsRUFBRTtZQUNqQzJCLElBQUlkLEtBQUtjLEdBQUcsU0FBVXRDLENBQUM7Z0JBQ3JCLE9BQU9BLEVBQUV5QyxNQUFNLEtBQUtBO1lBQ3RCO1lBQ0FILElBQUlBLEVBQUVYLEtBQUssQ0FBQ00sTUFBTVUsYUFBYSxDQUFDaEMsRUFBRSxDQUFDO1FBQ3JDO1FBQ0EsSUFBSyxJQUFJQSxJQUFJLElBQUksQ0FBQ2lDLGFBQWEsRUFBRUMsTUFBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQzVDLE1BQU0sRUFBRVMsSUFBSWtDLEtBQUtsQyxJQUFLO1lBQzFFNkI7UUFDRjtRQUNBLE9BQU9oQixLQUFLYyxHQUFHLFNBQVV0QyxDQUFDO1lBQ3hCLE9BQU8rQixLQUFLZ0IsSUFBSSxDQUFDTixNQUFNLEtBQUt6QyxFQUFFeUMsTUFBTTtRQUN0QyxHQUFHZCxLQUFLO0lBQ1Y7SUFDQSwyRUFBMkU7SUFDM0UsSUFBSXFCO0lBQ0osSUFBSUM7SUFDSixJQUFJLENBQUMsSUFBSSxDQUFDQyxhQUFhLElBQUksQ0FBQ25CLEtBQUtnQixJQUFJLEVBQUU7UUFDckNFLFNBQVMsSUFBSSxDQUFDQSxNQUFNLENBQUNuQixLQUFLO1lBQ3hCQSxLQUFLQyxLQUFLZ0IsSUFBSTtZQUNkRCxXQUFXLElBQUksQ0FBQ0EsU0FBUztRQUMzQjtJQUNGLE9BQU8sSUFBSSxJQUFJLENBQUNJLGFBQWEsQ0FBQ25CLEtBQUtnQixJQUFJLENBQUNOLE1BQU0sQ0FBQyxFQUFFO1FBQy9DUSxTQUFTLElBQUksQ0FBQ0MsYUFBYSxDQUFDbkIsS0FBS2dCLElBQUksQ0FBQ04sTUFBTSxDQUFDO0lBQy9DLE9BQU87UUFDTFEsU0FBUyxJQUFJLENBQUNDLGFBQWEsQ0FBQ25CLEtBQUtnQixJQUFJLENBQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ1EsTUFBTSxDQUFDbkIsS0FBSztZQUMvREEsS0FBS0MsS0FBS2dCLElBQUk7WUFDZEQsV0FBVyxJQUFJLENBQUNBLFNBQVM7UUFDM0I7SUFDRjtJQUNBLElBQUk7UUFDRkUsU0FBU0MsT0FBT0UsR0FBRyxDQUFDakIsT0FBTyxJQUFJLENBQUNrQixVQUFVLENBQUNyQixNQUFNQztJQUNuRCxFQUFFLE9BQU9xQixPQUFPO1FBQ2QsTUFBTWxDLDZCQUE2QjtZQUNqQ1csS0FBS0E7WUFDTEksT0FBT0E7WUFDUG1CLE9BQU9BO1lBQ1BDLFFBQVF2QixLQUFLZ0IsSUFBSSxDQUFDTyxNQUFNO1FBQzFCO0lBQ0Y7SUFDQSxJQUFJTixVQUFVLFFBQVFoQixNQUFNLEdBQUc7UUFDN0IsT0FBT0gsVUFBVWYsSUFBSSxDQUFDLElBQUksRUFBRWdCLEtBQUtDLE1BQU1DLE1BQU07SUFDL0M7SUFDQSxPQUFPZ0I7QUFDVDtBQUNBLFNBQVNPLGVBQWV6QixHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRztJQUNwQyxJQUFJd0IsU0FBUyxJQUFJO0lBQ2pCLElBQUl0QixRQUFRLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxJQUFJO0lBQy9CLDJFQUEyRTtJQUMzRSxJQUFJaUI7SUFDSixJQUFJLENBQUMsSUFBSSxDQUFDQyxhQUFhLElBQUksQ0FBQ25CLEtBQUtnQixJQUFJLEVBQUU7UUFDckNFLFNBQVMsSUFBSSxDQUFDQSxNQUFNLENBQUNuQixLQUFLO1lBQ3hCQSxLQUFLQyxLQUFLZ0IsSUFBSTtZQUNkRCxXQUFXLElBQUksQ0FBQ0EsU0FBUztRQUMzQjtJQUNGLE9BQU8sSUFBSSxJQUFJLENBQUNJLGFBQWEsQ0FBQ25CLEtBQUtnQixJQUFJLENBQUNOLE1BQU0sQ0FBQyxFQUFFO1FBQy9DUSxTQUFTLElBQUksQ0FBQ0MsYUFBYSxDQUFDbkIsS0FBS2dCLElBQUksQ0FBQ04sTUFBTSxDQUFDO0lBQy9DLE9BQU87UUFDTFEsU0FBUyxJQUFJLENBQUNDLGFBQWEsQ0FBQ25CLEtBQUtnQixJQUFJLENBQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ1EsTUFBTSxDQUFDbkIsS0FBSztZQUMvREEsS0FBS0MsS0FBS2dCLElBQUk7WUFDZEQsV0FBVyxJQUFJLENBQUNBLFNBQVM7UUFDM0I7SUFDRjtJQUNBLE9BQU9XLFFBQVFDLE9BQU8sR0FBR0MsSUFBSSxDQUFDO1FBQzVCLE9BQU9WLE9BQU9FLEdBQUcsQ0FBQ2pCLE9BQU9zQixPQUFPSixVQUFVLENBQUNyQixNQUFNQztJQUNuRCxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVVxQixLQUFLO1FBQ3pCLE1BQU1sQyw2QkFBNkI7WUFDakNXLEtBQUtBO1lBQ0xJLE9BQU9BO1lBQ1BtQixPQUFPQTtZQUNQQyxRQUFRdkIsS0FBS2dCLElBQUksQ0FBQ08sTUFBTTtRQUMxQjtJQUNGLEdBQUdLLElBQUksQ0FBQyxTQUFVWCxNQUFNO1FBQ3RCLElBQUlBLFVBQVUsUUFBUWhCLE1BQU0sR0FBRztZQUM3QixPQUFPdUIsZUFBZXpDLElBQUksQ0FBQzBDLFFBQVExQixLQUFLQyxNQUFNQyxNQUFNO1FBQ3REO1FBQ0EsT0FBT2dCO0lBQ1Q7QUFDRjtBQUNBLElBQUlZLGVBQWUsV0FBVyxHQUFFO0lBQzlCLFNBQVNBLGFBQWFDLE9BQU87UUFDM0JuRSxnQkFBZ0IsSUFBSSxFQUFFa0U7UUFDdEIsSUFBSSxDQUFDeEIsSUFBSSxHQUFHeUIsUUFBUXpCLElBQUksSUFBSSxJQUFJO1FBQ2hDLElBQUksQ0FBQ1EsYUFBYSxHQUFHaUIsUUFBUWpCLGFBQWEsSUFBSTtRQUM5QyxJQUFJLENBQUNFLFNBQVMsR0FBR2UsUUFBUWYsU0FBUztRQUNsQyxJQUFJLENBQUNILGFBQWEsR0FBR2tCLFFBQVFsQixhQUFhO1FBQzFDLElBQUksQ0FBQ21CLGVBQWUsR0FBR0QsUUFBUUMsZUFBZTtRQUM5QyxJQUFJLENBQUMzQixTQUFTLEdBQUcwQixRQUFRMUIsU0FBUztRQUNsQyxJQUFJLENBQUM0QixTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDQyxVQUFVLEdBQUdILFFBQVFHLFVBQVU7UUFDcEMsSUFBSSxDQUFDdEIsV0FBVyxHQUFHbUIsUUFBUW5CLFdBQVc7UUFDdEMsSUFBSSxDQUFDTyxNQUFNLEdBQUdZLFFBQVFaLE1BQU07UUFDNUIsSUFBSSxDQUFDVixRQUFRLEdBQUdzQixRQUFRdEIsUUFBUTtRQUNoQyxJQUFJLENBQUNXLGFBQWEsR0FBR1csUUFBUVgsYUFBYTtJQUM1QztJQUNBLE9BQU94QyxhQUFha0QsY0FBYztRQUFDO1lBQ2pDbkQsS0FBSztZQUNMa0IsT0FBTyxTQUFTc0MsU0FBU25DLEdBQUcsRUFBRW9DLE9BQU8sRUFBRUMsUUFBUSxFQUFFcEMsSUFBSTtnQkFDbkQsT0FBTyxJQUFJLENBQUNxQyxhQUFhLENBQUMsSUFBSSxDQUFDQyxRQUFRLENBQUN2QyxLQUFLQyxPQUFPbUMsU0FBU0M7WUFDL0Q7UUFDRjtRQUFHO1lBQ0QxRCxLQUFLO1lBQ0xrQixPQUFPLFNBQVMyQyxrQkFBa0JILFFBQVEsRUFBRUQsT0FBTyxFQUFFdkMsS0FBSyxFQUFFaEIsQ0FBQyxFQUFFVCxNQUFNO2dCQUNuRSxJQUFJaUUsVUFBVTtvQkFDWkQsUUFBUXZDLE9BQU9oQixHQUFHVDtnQkFDcEI7Z0JBQ0EsT0FBT2lFO1lBQ1Q7UUFDRjtRQUFHO1lBQ0QxRCxLQUFLO1lBQ0xrQixPQUFPLFNBQVM0QyxhQUFhNUMsS0FBSyxFQUFFNkMsSUFBSTtnQkFDdEMsT0FBTzdDLFNBQVMsUUFBUSxDQUFDQSxTQUFTNkMsU0FBUyxvQkFBb0I3QyxNQUFNekIsTUFBTSxLQUFLO1lBQ2xGO1FBQ0Y7UUFBRztZQUNETyxLQUFLO1lBQ0xrQixPQUFPLFNBQVN5QyxjQUFjekMsS0FBSyxFQUFFdUMsT0FBTyxFQUFFQyxRQUFRO2dCQUNwRCxJQUFJLElBQUksQ0FBQy9CLElBQUksQ0FBQ0MsaUJBQWlCLEVBQUU7b0JBQy9COEIsV0FBVztnQkFDYjtnQkFDQSxJQUFJSyxPQUFPbEUsT0FBT2IsU0FBUyxDQUFDZ0YsUUFBUSxDQUFDM0QsSUFBSSxDQUFDYTtnQkFDMUMsSUFBSSxJQUFJLENBQUM0QyxZQUFZLENBQUM1QyxPQUFPNkMsT0FBTztvQkFDbEMsSUFBSSxDQUFDVCxTQUFTLEdBQUc7b0JBQ2pCLE9BQU8sSUFBSSxDQUFDTyxpQkFBaUIsQ0FBQ0gsVUFBVUQsU0FBUzdDLEtBQUssSUFBSSxDQUFDYyxTQUFTLEdBQUcsR0FBRztnQkFDNUU7Z0JBQ0EsSUFBSXFDLFNBQVMsa0JBQWtCO29CQUM3QixJQUFJLENBQUNULFNBQVMsR0FBRztvQkFDakIsSUFBSyxJQUFJcEQsSUFBSSxHQUFHQSxJQUFJZ0IsTUFBTXpCLE1BQU0sRUFBRVMsSUFBSzt3QkFDckMsSUFBSSxDQUFDMkQsaUJBQWlCLENBQUMsQ0FBQ0gsVUFBVUQsU0FBU3ZDLEtBQUssQ0FBQ2hCLEVBQUUsRUFBRUEsR0FBR2dCLE1BQU16QixNQUFNO29CQUN0RTtvQkFDQSxPQUFPO2dCQUNUO2dCQUNBLElBQUlzRSxTQUFTLG1CQUFtQjtvQkFDOUIsSUFBSSxDQUFDVCxTQUFTLEdBQUc7b0JBQ2pCLE9BQU8sSUFBSSxDQUFDTyxpQkFBaUIsQ0FBQyxDQUFDSCxVQUFVRCxTQUFTdkMsT0FBTyxHQUFHO2dCQUM5RDtnQkFDQSxPQUFPLElBQUksQ0FBQzJDLGlCQUFpQixDQUFDLENBQUNILFVBQVVELFNBQVM3QyxLQUFLLElBQUksQ0FBQ2MsU0FBUyxHQUFHLEdBQUc7WUFDN0U7UUFDRjtRQUFHO1lBQ0QxQixLQUFLO1lBQ0xrQixPQUFPLFNBQVMwQyxTQUFTdkMsR0FBRyxFQUFFQyxJQUFJO2dCQUNoQyxJQUFJaUIsU0FBU25CLFVBQVVmLElBQUksQ0FBQyxJQUFJLEVBQUVnQixLQUFLQyxNQUFNLElBQUksQ0FBQ0ksU0FBUyxDQUFDakMsTUFBTSxHQUFHO2dCQUNyRSxJQUFJLE9BQU84QyxXQUFXLFlBQVk7b0JBQ2hDLE9BQU9BLE9BQU8sSUFBSSxDQUFDYixTQUFTLENBQUMsSUFBSSxDQUFDQSxTQUFTLENBQUNqQyxNQUFNLEdBQUcsRUFBRSxFQUFFLElBQUk7Z0JBQy9EO2dCQUNBLE9BQU84QztZQUNUO1FBQ0Y7UUFBRztZQUNEdkMsS0FBSztZQUNMa0IsT0FBTyxTQUFTK0MsY0FBYzVDLEdBQUcsRUFBRUMsSUFBSTtnQkFDckMsSUFBSTRDLFNBQVMsSUFBSTtnQkFDakIsT0FBT3BCLGVBQWV6QyxJQUFJLENBQUMsSUFBSSxFQUFFZ0IsS0FBS0MsTUFBTSxJQUFJLENBQUNJLFNBQVMsQ0FBQ2pDLE1BQU0sR0FBRyxHQUFHeUQsSUFBSSxDQUFDLFNBQVVYLE1BQU07b0JBQzFGLElBQUksT0FBT0EsV0FBVyxZQUFZO3dCQUNoQyxPQUFPQSxPQUFPMkIsT0FBT3hDLFNBQVMsQ0FBQ3dDLE9BQU94QyxTQUFTLENBQUNqQyxNQUFNLEdBQUcsRUFBRSxFQUFFeUU7b0JBQy9EO29CQUNBLE9BQU8zQjtnQkFDVDtZQUNGO1FBQ0Y7UUFBRztZQUNEdkMsS0FBSztZQUNMa0IsT0FBTyxTQUFTeUIsV0FBV3JCLElBQUksRUFBRUMsR0FBRztnQkFDbEMsT0FBTztvQkFDTEEsS0FBS0E7b0JBQ0xELE1BQU1BO29CQUNOSSxXQUFXLElBQUksQ0FBQ0EsU0FBUztvQkFDekJJLFVBQVUsSUFBSSxDQUFDQSxRQUFRO29CQUN2Qk8sV0FBVyxJQUFJLENBQUNBLFNBQVM7b0JBQ3pCa0IsWUFBWSxJQUFJLENBQUNBLFVBQVU7b0JBQzNCckIsZUFBZSxJQUFJLENBQUNBLGFBQWE7b0JBQ2pDbUIsaUJBQWlCLElBQUksQ0FBQ0EsZUFBZTtnQkFDdkM7WUFDRjtRQUNGO1FBQUc7WUFDRHJELEtBQUs7WUFDTGtCLE9BQU8sU0FBU2lELHNCQUFzQjFDLEtBQUssRUFBRUosR0FBRyxFQUFFbkIsQ0FBQyxFQUFFb0MsSUFBSSxFQUFFN0MsTUFBTTtnQkFDL0QsT0FBTyxJQUFJMEQsYUFBYTtvQkFDdEJ4QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtvQkFDZlEsZUFBZSxJQUFJLENBQUNBLGFBQWE7b0JBQ2pDTCxVQUFVLElBQUksQ0FBQ0EsUUFBUTtvQkFDdkJVLFFBQVEsSUFBSSxDQUFDQSxNQUFNO29CQUNuQkMsZUFBZSxJQUFJLENBQUNBLGFBQWE7b0JBQ2pDYyxZQUFZekMsYUFBYTt3QkFBQyxJQUFJLENBQUN5QyxVQUFVO3dCQUFFOzRCQUFDLElBQUksQ0FBQ0QsU0FBUzt5QkFBQztxQkFBQztvQkFDNUQ1QixXQUFXWixhQUFhO3dCQUFDLElBQUksQ0FBQ1ksU0FBUzt3QkFBRTs0QkFBQ0Q7eUJBQU07cUJBQUM7b0JBQ2pEWSxXQUFXdkIsYUFBYTt3QkFBQyxJQUFJLENBQUN1QixTQUFTO3dCQUFFOzRCQUFDaEI7eUJBQUk7cUJBQUM7b0JBQy9DYSxlQUFlcEIsYUFBYTt3QkFBQyxJQUFJLENBQUNvQixhQUFhO3dCQUFFOzRCQUFDaEM7eUJBQUU7cUJBQUM7b0JBQ3JEbUQsaUJBQWlCdkMsYUFBYTt3QkFBQyxJQUFJLENBQUN1QyxlQUFlO3dCQUFFOzRCQUFDNUQ7eUJBQU87cUJBQUM7b0JBQzlEd0MsYUFBYW5CLGFBQWE7d0JBQUMsSUFBSSxDQUFDbUIsV0FBVzt3QkFBRTs0QkFBQ0ssS0FBS04sTUFBTTt5QkFBQztxQkFBQztnQkFDN0Q7WUFDRjtRQUNGO0tBQUU7QUFDSjtBQUNBb0MsT0FBT0MsT0FBTyxHQUFHLFNBQVVqQixPQUFPO0lBQ2hDQSxRQUFRZixTQUFTLEdBQUcsRUFBRTtJQUN0QmUsUUFBUWxCLGFBQWEsR0FBRyxFQUFFO0lBQzFCa0IsUUFBUUMsZUFBZSxHQUFHLEVBQUU7SUFDNUJELFFBQVFHLFVBQVUsR0FBRyxFQUFFO0lBQ3ZCSCxRQUFRbkIsV0FBVyxHQUFHLEVBQUU7SUFDeEJtQixRQUFRMUIsU0FBUyxHQUFHO1FBQUMwQixRQUFRa0IsSUFBSTtLQUFDO0lBQ2xDLE9BQU8sSUFBSW5CLGFBQWFDO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb2N4dGVtcGxhdGVyL2pzL3Njb3BlLW1hbmFnZXIuanM/OTViYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vZXJyb3JzLmpzXCIpLFxuICBnZXRTY29wZVBhcnNlckV4ZWN1dGlvbkVycm9yID0gX3JlcXVpcmUuZ2V0U2NvcGVQYXJzZXJFeGVjdXRpb25FcnJvcjtcbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKSxcbiAgbGFzdCA9IF9yZXF1aXJlMi5sYXN0O1xudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoXCIuL2RvYy11dGlscy5qc1wiKSxcbiAgY29uY2F0QXJyYXlzID0gX3JlcXVpcmUzLmNvbmNhdEFycmF5cztcbmZ1bmN0aW9uIGZpbmQobGlzdCwgZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICB2YXIgdmFsdWU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YWx1ZSA9IGxpc3RbaV07XG4gICAgaWYgKGZuLmNhbGwodGhpcywgdmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBfZ2V0VmFsdWUodGFnLCBtZXRhLCBudW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdmFyIHNjb3BlID0gdGhpcy5zY29wZUxpc3RbbnVtXTtcbiAgaWYgKHRoaXMucm9vdC5maW5pc2hlZFJlc29sdmluZykge1xuICAgIHZhciB3ID0gdGhpcy5yZXNvbHZlZDtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgIHZhciBsSW5kZXggPSBfdGhpcy5zY29wZUxpbmRleFtpXTtcbiAgICAgIHcgPSBmaW5kKHcsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHJldHVybiByLmxJbmRleCA9PT0gbEluZGV4O1xuICAgICAgfSk7XG4gICAgICB3ID0gdy52YWx1ZVtfdGhpcy5zY29wZVBhdGhJdGVtW2ldXTtcbiAgICB9O1xuICAgIGZvciAodmFyIGkgPSB0aGlzLnJlc29sdmVPZmZzZXQsIGxlbiA9IHRoaXMuc2NvcGVQYXRoLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBfbG9vcCgpO1xuICAgIH1cbiAgICByZXR1cm4gZmluZCh3LCBmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIG1ldGEucGFydC5sSW5kZXggPT09IHIubEluZGV4O1xuICAgIH0pLnZhbHVlO1xuICB9XG4gIC8vIHNlYXJjaCBpbiB0aGUgc2NvcGVzIChpbiByZXZlcnNlIG9yZGVyKSBhbmQga2VlcCB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZVxuICB2YXIgcmVzdWx0O1xuICB2YXIgcGFyc2VyO1xuICBpZiAoIXRoaXMuY2FjaGVkUGFyc2VycyB8fCAhbWV0YS5wYXJ0KSB7XG4gICAgcGFyc2VyID0gdGhpcy5wYXJzZXIodGFnLCB7XG4gICAgICB0YWc6IG1ldGEucGFydCxcbiAgICAgIHNjb3BlUGF0aDogdGhpcy5zY29wZVBhdGhcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0aGlzLmNhY2hlZFBhcnNlcnNbbWV0YS5wYXJ0LmxJbmRleF0pIHtcbiAgICBwYXJzZXIgPSB0aGlzLmNhY2hlZFBhcnNlcnNbbWV0YS5wYXJ0LmxJbmRleF07XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VyID0gdGhpcy5jYWNoZWRQYXJzZXJzW21ldGEucGFydC5sSW5kZXhdID0gdGhpcy5wYXJzZXIodGFnLCB7XG4gICAgICB0YWc6IG1ldGEucGFydCxcbiAgICAgIHNjb3BlUGF0aDogdGhpcy5zY29wZVBhdGhcbiAgICB9KTtcbiAgfVxuICB0cnkge1xuICAgIHJlc3VsdCA9IHBhcnNlci5nZXQoc2NvcGUsIHRoaXMuZ2V0Q29udGV4dChtZXRhLCBudW0pKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBnZXRTY29wZVBhcnNlckV4ZWN1dGlvbkVycm9yKHtcbiAgICAgIHRhZzogdGFnLFxuICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgb2Zmc2V0OiBtZXRhLnBhcnQub2Zmc2V0XG4gICAgfSk7XG4gIH1cbiAgaWYgKHJlc3VsdCA9PSBudWxsICYmIG51bSA+IDApIHtcbiAgICByZXR1cm4gX2dldFZhbHVlLmNhbGwodGhpcywgdGFnLCBtZXRhLCBudW0gLSAxKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2dldFZhbHVlQXN5bmModGFnLCBtZXRhLCBudW0pIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG4gIHZhciBzY29wZSA9IHRoaXMuc2NvcGVMaXN0W251bV07XG4gIC8vIHNlYXJjaCBpbiB0aGUgc2NvcGVzIChpbiByZXZlcnNlIG9yZGVyKSBhbmQga2VlcCB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZVxuICB2YXIgcGFyc2VyO1xuICBpZiAoIXRoaXMuY2FjaGVkUGFyc2VycyB8fCAhbWV0YS5wYXJ0KSB7XG4gICAgcGFyc2VyID0gdGhpcy5wYXJzZXIodGFnLCB7XG4gICAgICB0YWc6IG1ldGEucGFydCxcbiAgICAgIHNjb3BlUGF0aDogdGhpcy5zY29wZVBhdGhcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0aGlzLmNhY2hlZFBhcnNlcnNbbWV0YS5wYXJ0LmxJbmRleF0pIHtcbiAgICBwYXJzZXIgPSB0aGlzLmNhY2hlZFBhcnNlcnNbbWV0YS5wYXJ0LmxJbmRleF07XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VyID0gdGhpcy5jYWNoZWRQYXJzZXJzW21ldGEucGFydC5sSW5kZXhdID0gdGhpcy5wYXJzZXIodGFnLCB7XG4gICAgICB0YWc6IG1ldGEucGFydCxcbiAgICAgIHNjb3BlUGF0aDogdGhpcy5zY29wZVBhdGhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcnNlci5nZXQoc2NvcGUsIF90aGlzMi5nZXRDb250ZXh0KG1ldGEsIG51bSkpO1xuICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHRocm93IGdldFNjb3BlUGFyc2VyRXhlY3V0aW9uRXJyb3Ioe1xuICAgICAgdGFnOiB0YWcsXG4gICAgICBzY29wZTogc2NvcGUsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBvZmZzZXQ6IG1ldGEucGFydC5vZmZzZXRcbiAgICB9KTtcbiAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIG51bSA+IDApIHtcbiAgICAgIHJldHVybiBfZ2V0VmFsdWVBc3luYy5jYWxsKF90aGlzMiwgdGFnLCBtZXRhLCBudW0gLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG59XG52YXIgU2NvcGVNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2NvcGVNYW5hZ2VyKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2NvcGVNYW5hZ2VyKTtcbiAgICB0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgfHwgdGhpcztcbiAgICB0aGlzLnJlc29sdmVPZmZzZXQgPSBvcHRpb25zLnJlc29sdmVPZmZzZXQgfHwgMDtcbiAgICB0aGlzLnNjb3BlUGF0aCA9IG9wdGlvbnMuc2NvcGVQYXRoO1xuICAgIHRoaXMuc2NvcGVQYXRoSXRlbSA9IG9wdGlvbnMuc2NvcGVQYXRoSXRlbTtcbiAgICB0aGlzLnNjb3BlUGF0aExlbmd0aCA9IG9wdGlvbnMuc2NvcGVQYXRoTGVuZ3RoO1xuICAgIHRoaXMuc2NvcGVMaXN0ID0gb3B0aW9ucy5zY29wZUxpc3Q7XG4gICAgdGhpcy5zY29wZVR5cGUgPSBcIlwiO1xuICAgIHRoaXMuc2NvcGVUeXBlcyA9IG9wdGlvbnMuc2NvcGVUeXBlcztcbiAgICB0aGlzLnNjb3BlTGluZGV4ID0gb3B0aW9ucy5zY29wZUxpbmRleDtcbiAgICB0aGlzLnBhcnNlciA9IG9wdGlvbnMucGFyc2VyO1xuICAgIHRoaXMucmVzb2x2ZWQgPSBvcHRpb25zLnJlc29sdmVkO1xuICAgIHRoaXMuY2FjaGVkUGFyc2VycyA9IG9wdGlvbnMuY2FjaGVkUGFyc2VycztcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFNjb3BlTWFuYWdlciwgW3tcbiAgICBrZXk6IFwibG9vcE92ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9vcE92ZXIodGFnLCBmdW5jdG9yLCBpbnZlcnRlZCwgbWV0YSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9vcE92ZXJWYWx1ZSh0aGlzLmdldFZhbHVlKHRhZywgbWV0YSksIGZ1bmN0b3IsIGludmVydGVkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZnVuY3RvcklmSW52ZXJ0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnVuY3RvcklmSW52ZXJ0ZWQoaW52ZXJ0ZWQsIGZ1bmN0b3IsIHZhbHVlLCBpLCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICBmdW5jdG9yKHZhbHVlLCBpLCBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGludmVydGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1ZhbHVlRmFsc3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNWYWx1ZUZhbHN5KHZhbHVlLCB0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCAhdmFsdWUgfHwgdHlwZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9vcE92ZXJWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb29wT3ZlclZhbHVlKHZhbHVlLCBmdW5jdG9yLCBpbnZlcnRlZCkge1xuICAgICAgaWYgKHRoaXMucm9vdC5maW5pc2hlZFJlc29sdmluZykge1xuICAgICAgICBpbnZlcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHRoaXMuaXNWYWx1ZUZhbHN5KHZhbHVlLCB0eXBlKSkge1xuICAgICAgICB0aGlzLnNjb3BlVHlwZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jdG9ySWZJbnZlcnRlZChpbnZlcnRlZCwgZnVuY3RvciwgbGFzdCh0aGlzLnNjb3BlTGlzdCksIDAsIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgICB0aGlzLnNjb3BlVHlwZSA9IFwiYXJyYXlcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuZnVuY3RvcklmSW52ZXJ0ZWQoIWludmVydGVkLCBmdW5jdG9yLCB2YWx1ZVtpXSwgaSwgdmFsdWUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XG4gICAgICAgIHRoaXMuc2NvcGVUeXBlID0gXCJvYmplY3RcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3RvcklmSW52ZXJ0ZWQoIWludmVydGVkLCBmdW5jdG9yLCB2YWx1ZSwgMCwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5mdW5jdG9ySWZJbnZlcnRlZCghaW52ZXJ0ZWQsIGZ1bmN0b3IsIGxhc3QodGhpcy5zY29wZUxpc3QpLCAwLCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUodGFnLCBtZXRhKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gX2dldFZhbHVlLmNhbGwodGhpcywgdGFnLCBtZXRhLCB0aGlzLnNjb3BlTGlzdC5sZW5ndGggLSAxKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLnNjb3BlTGlzdFt0aGlzLnNjb3BlTGlzdC5sZW5ndGggLSAxXSwgdGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRWYWx1ZUFzeW5jXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlQXN5bmModGFnLCBtZXRhKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHJldHVybiBfZ2V0VmFsdWVBc3luYy5jYWxsKHRoaXMsIHRhZywgbWV0YSwgdGhpcy5zY29wZUxpc3QubGVuZ3RoIC0gMSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0KF90aGlzMy5zY29wZUxpc3RbX3RoaXMzLnNjb3BlTGlzdC5sZW5ndGggLSAxXSwgX3RoaXMzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udGV4dChtZXRhLCBudW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG51bTogbnVtLFxuICAgICAgICBtZXRhOiBtZXRhLFxuICAgICAgICBzY29wZUxpc3Q6IHRoaXMuc2NvcGVMaXN0LFxuICAgICAgICByZXNvbHZlZDogdGhpcy5yZXNvbHZlZCxcbiAgICAgICAgc2NvcGVQYXRoOiB0aGlzLnNjb3BlUGF0aCxcbiAgICAgICAgc2NvcGVUeXBlczogdGhpcy5zY29wZVR5cGVzLFxuICAgICAgICBzY29wZVBhdGhJdGVtOiB0aGlzLnNjb3BlUGF0aEl0ZW0sXG4gICAgICAgIHNjb3BlUGF0aExlbmd0aDogdGhpcy5zY29wZVBhdGhMZW5ndGhcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVN1YlNjb3BlTWFuYWdlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTdWJTY29wZU1hbmFnZXIoc2NvcGUsIHRhZywgaSwgcGFydCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFNjb3BlTWFuYWdlcih7XG4gICAgICAgIHJvb3Q6IHRoaXMucm9vdCxcbiAgICAgICAgcmVzb2x2ZU9mZnNldDogdGhpcy5yZXNvbHZlT2Zmc2V0LFxuICAgICAgICByZXNvbHZlZDogdGhpcy5yZXNvbHZlZCxcbiAgICAgICAgcGFyc2VyOiB0aGlzLnBhcnNlcixcbiAgICAgICAgY2FjaGVkUGFyc2VyczogdGhpcy5jYWNoZWRQYXJzZXJzLFxuICAgICAgICBzY29wZVR5cGVzOiBjb25jYXRBcnJheXMoW3RoaXMuc2NvcGVUeXBlcywgW3RoaXMuc2NvcGVUeXBlXV0pLFxuICAgICAgICBzY29wZUxpc3Q6IGNvbmNhdEFycmF5cyhbdGhpcy5zY29wZUxpc3QsIFtzY29wZV1dKSxcbiAgICAgICAgc2NvcGVQYXRoOiBjb25jYXRBcnJheXMoW3RoaXMuc2NvcGVQYXRoLCBbdGFnXV0pLFxuICAgICAgICBzY29wZVBhdGhJdGVtOiBjb25jYXRBcnJheXMoW3RoaXMuc2NvcGVQYXRoSXRlbSwgW2ldXSksXG4gICAgICAgIHNjb3BlUGF0aExlbmd0aDogY29uY2F0QXJyYXlzKFt0aGlzLnNjb3BlUGF0aExlbmd0aCwgW2xlbmd0aF1dKSxcbiAgICAgICAgc2NvcGVMaW5kZXg6IGNvbmNhdEFycmF5cyhbdGhpcy5zY29wZUxpbmRleCwgW3BhcnQubEluZGV4XV0pXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucy5zY29wZVBhdGggPSBbXTtcbiAgb3B0aW9ucy5zY29wZVBhdGhJdGVtID0gW107XG4gIG9wdGlvbnMuc2NvcGVQYXRoTGVuZ3RoID0gW107XG4gIG9wdGlvbnMuc2NvcGVUeXBlcyA9IFtdO1xuICBvcHRpb25zLnNjb3BlTGluZGV4ID0gW107XG4gIG9wdGlvbnMuc2NvcGVMaXN0ID0gW29wdGlvbnMudGFnc107XG4gIHJldHVybiBuZXcgU2NvcGVNYW5hZ2VyKG9wdGlvbnMpO1xufTsiXSwibmFtZXMiOlsiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImUiLCJyIiwidCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiZ2V0U2NvcGVQYXJzZXJFeGVjdXRpb25FcnJvciIsIl9yZXF1aXJlMiIsImxhc3QiLCJfcmVxdWlyZTMiLCJjb25jYXRBcnJheXMiLCJmaW5kIiwibGlzdCIsImZuIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJfZ2V0VmFsdWUiLCJ0YWciLCJtZXRhIiwibnVtIiwiX3RoaXMiLCJzY29wZSIsInNjb3BlTGlzdCIsInJvb3QiLCJmaW5pc2hlZFJlc29sdmluZyIsInciLCJyZXNvbHZlZCIsIl9sb29wIiwibEluZGV4Iiwic2NvcGVMaW5kZXgiLCJzY29wZVBhdGhJdGVtIiwicmVzb2x2ZU9mZnNldCIsImxlbiIsInNjb3BlUGF0aCIsInBhcnQiLCJyZXN1bHQiLCJwYXJzZXIiLCJjYWNoZWRQYXJzZXJzIiwiZ2V0IiwiZ2V0Q29udGV4dCIsImVycm9yIiwib2Zmc2V0IiwiX2dldFZhbHVlQXN5bmMiLCJfdGhpczIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJTY29wZU1hbmFnZXIiLCJvcHRpb25zIiwic2NvcGVQYXRoTGVuZ3RoIiwic2NvcGVUeXBlIiwic2NvcGVUeXBlcyIsImxvb3BPdmVyIiwiZnVuY3RvciIsImludmVydGVkIiwibG9vcE92ZXJWYWx1ZSIsImdldFZhbHVlIiwiZnVuY3RvcklmSW52ZXJ0ZWQiLCJpc1ZhbHVlRmFsc3kiLCJ0eXBlIiwidG9TdHJpbmciLCJnZXRWYWx1ZUFzeW5jIiwiX3RoaXMzIiwiY3JlYXRlU3ViU2NvcGVNYW5hZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsInRhZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/scope-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/traits.js":
/*!*************************************************!*\
  !*** ./node_modules/docxtemplater/js/traits.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), getRightOrNull = _require.getRightOrNull, getRight = _require.getRight, getLeft = _require.getLeft, getLeftOrNull = _require.getLeftOrNull, chunkBy = _require.chunkBy, isTagStart = _require.isTagStart, isTagEnd = _require.isTagEnd, isContent = _require.isContent, last = _require.last, first = _require.first;\nvar _require2 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/docxtemplater/js/errors.js\"), XTTemplateError = _require2.XTTemplateError, throwExpandNotFound = _require2.throwExpandNotFound, getLoopPositionProducesInvalidXMLError = _require2.getLoopPositionProducesInvalidXMLError;\nfunction lastTagIsOpenTag(tags, tag) {\n    if (tags.length === 0) {\n        return false;\n    }\n    var innerLastTag = last(tags).substr(1);\n    return innerLastTag.indexOf(tag) === 0;\n}\nfunction getListXmlElements(parts) {\n    /*\n   * Gets the list of closing and opening tags between two texts. It doesn't take\n   * into account tags that are opened then closed. Those that are closed then\n   * opened are kept\n   *\n   * Example input :\n   *\n   * [\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"table1\",\n   * \t\t...\n   * \t},\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"t1data1\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"position\": \"end\",\n   * \t\t\"text\": true,\n   * \t\t\"value\": \"</w:t>\",\n   * \t\t\"tag\": \"w:t\",\n   * \t\t\"lIndex\": 112\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:r>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:p>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"</w:tc>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:tc>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"content\",\n   * \t\t\"value\": \"<w:tcPr><w:tcW w:w=\"2444\" w:type=\"dxa\"/><w:tcBorders><w:top w:val=\"nil\"/><w:left w:val=\"nil\"/><w:bottom w:val=\"nil\"/><w:right w:val=\"nil\"/></w:tcBorders><w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"FFFFFF\"/></w:tcPr>\",\n   * \t},\n   * \t...\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:r>\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"tag\",\n   * \t\t\"value\": \"<w:t xml:space=\"preserve\">\",\n   * \t},\n   * \t{\n   * \t\t\"type\": \"placeholder\",\n   * \t\t\"value\": \"t1data4\",\n   * \t}\n   * ]\n   *\n   * Returns\n   *\n   * \t[\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:t>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:r>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:p>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"</w:tc>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:tc>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:p>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:r>\",\n   * \t\t},\n   * \t\t{\n   * \t\t\t\"tag\": \"<w:t>\",\n   * \t\t},\n   * \t]\n   */ var result = [];\n    for(var _i2 = 0; _i2 < parts.length; _i2++){\n        var _parts$_i = parts[_i2], position = _parts$_i.position, value = _parts$_i.value, tag = _parts$_i.tag;\n        // Stryker disable all : because removing this condition would also work but we want to make the API future proof\n        if (!tag) {\n            continue;\n        }\n        // Stryker restore all\n        if (position === \"end\") {\n            if (lastTagIsOpenTag(result, tag)) {\n                result.pop();\n            } else {\n                result.push(value);\n            }\n        } else if (position === \"start\") {\n            result.push(value);\n        }\n    // ignore position === \"selfclosing\"\n    }\n    return result;\n}\nfunction has(name, xmlElements) {\n    for(var _i4 = 0; _i4 < xmlElements.length; _i4++){\n        var xmlElement = xmlElements[_i4];\n        if (xmlElement.indexOf(\"<\".concat(name)) === 0) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getExpandToDefault(postparsed, pair, expandTags) {\n    var parts = postparsed.slice(pair[0].offset, pair[1].offset);\n    var xmlElements = getListXmlElements(parts);\n    var closingTagCount = xmlElements.filter(function(tag) {\n        return tag[1] === \"/\";\n    }).length;\n    var startingTagCount = xmlElements.filter(function(tag) {\n        return tag[1] !== \"/\" && tag[tag.length - 2] !== \"/\";\n    }).length;\n    if (closingTagCount !== startingTagCount) {\n        return {\n            error: getLoopPositionProducesInvalidXMLError({\n                tag: first(pair).part.value,\n                offset: [\n                    first(pair).part.offset,\n                    last(pair).part.offset\n                ]\n            })\n        };\n    }\n    var _loop = function _loop() {\n        var _expandTags$_i = expandTags[_i6], contains = _expandTags$_i.contains, expand = _expandTags$_i.expand, onlyTextInTag = _expandTags$_i.onlyTextInTag;\n        if (has(contains, xmlElements)) {\n            if (onlyTextInTag) {\n                var left = getLeftOrNull(postparsed, contains, pair[0].offset);\n                var right = getRightOrNull(postparsed, contains, pair[1].offset);\n                if (left === null || right === null) {\n                    return 0; // continue\n                }\n                var chunks = chunkBy(postparsed.slice(left, right), function(p) {\n                    return isTagStart(contains, p) ? \"start\" : isTagEnd(contains, p) ? \"end\" : null;\n                });\n                var firstChunk = first(chunks);\n                var lastChunk = last(chunks);\n                var firstContent = firstChunk.filter(isContent);\n                var lastContent = lastChunk.filter(isContent);\n                if (firstContent.length !== 1 || lastContent.length !== 1) {\n                    return 0; // continue\n                }\n            }\n            return {\n                v: {\n                    value: expand\n                }\n            };\n        }\n    }, _ret;\n    for(var _i6 = 0; _i6 < expandTags.length; _i6++){\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret) return _ret.v;\n    }\n    return {};\n}\nfunction getExpandLimit(part, index, postparsed, options) {\n    var expandTo = part.expandTo || options.expandTo;\n    // Stryker disable all : because this condition can be removed in v4 (the only usage was the image module before version 3.12.3 of the image module\n    if (!expandTo) {\n        return;\n    }\n    // Stryker restore all\n    var right, left;\n    try {\n        left = getLeft(postparsed, expandTo, index);\n        right = getRight(postparsed, expandTo, index);\n    } catch (rootError) {\n        var errProps = _objectSpread({\n            part: part,\n            rootError: rootError,\n            postparsed: postparsed,\n            expandTo: expandTo,\n            index: index\n        }, options.error);\n        if (options.onError) {\n            var errorResult = options.onError(errProps);\n            if (errorResult === \"ignore\") {\n                return;\n            }\n        }\n        throwExpandNotFound(errProps);\n    }\n    return [\n        left,\n        right\n    ];\n}\nfunction expandOne(_ref, part, postparsed, options) {\n    var _ref2 = _slicedToArray(_ref, 2), left = _ref2[0], right = _ref2[1];\n    var index = postparsed.indexOf(part);\n    var leftParts = postparsed.slice(left, index);\n    var rightParts = postparsed.slice(index + 1, right + 1);\n    var inner = options.getInner({\n        postparse: options.postparse,\n        index: index,\n        part: part,\n        leftParts: leftParts,\n        rightParts: rightParts,\n        left: left,\n        right: right,\n        postparsed: postparsed\n    });\n    if (!inner.length) {\n        inner.expanded = [\n            leftParts,\n            rightParts\n        ];\n        inner = [\n            inner\n        ];\n    }\n    return {\n        left: left,\n        right: right,\n        inner: inner\n    };\n}\n/* eslint-disable-next-line complexity */ function expandToOne(postparsed, options) {\n    var errors = [];\n    if (postparsed.errors) {\n        errors = postparsed.errors;\n        postparsed = postparsed.postparsed;\n    }\n    var limits = [];\n    for(var i = 0, len = postparsed.length; i < len; i++){\n        var part = postparsed[i];\n        if (part.type === \"placeholder\" && part.module === options.moduleName && /*\n     * The part.subparsed check is used to fix this github issue :\n     * https://github.com/open-xml-templating/docxtemplater/issues/671\n     */ !part.subparsed && !part.expanded) {\n            try {\n                var limit = getExpandLimit(part, i, postparsed, options);\n                if (!limit) {\n                    continue;\n                }\n                var _limit = _slicedToArray(limit, 2), left = _limit[0], right = _limit[1];\n                limits.push({\n                    left: left,\n                    right: right,\n                    part: part,\n                    i: i,\n                    leftPart: postparsed[left],\n                    rightPart: postparsed[right]\n                });\n            } catch (error) {\n                // The Error can only be a\n                errors.push(error);\n            }\n        }\n    }\n    limits.sort(function(l1, l2) {\n        if (l1.left === l2.left) {\n            return l2.part.lIndex < l1.part.lIndex ? 1 : -1;\n        }\n        return l2.left < l1.left ? 1 : -1;\n    });\n    var maxRight = -1;\n    var offset = 0;\n    for(var _i7 = 0, _len = limits.length; _i7 < _len; _i7++){\n        var _postparsed;\n        var _limit2 = limits[_i7];\n        maxRight = Math.max(maxRight, _i7 > 0 ? limits[_i7 - 1].right : 0);\n        if (_limit2.left < maxRight) {\n            continue;\n        }\n        var result = void 0;\n        try {\n            result = expandOne([\n                _limit2.left + offset,\n                _limit2.right + offset\n            ], _limit2.part, postparsed, options);\n        } catch (error) {\n            if (options.onError) {\n                var errorResult = options.onError(_objectSpread({\n                    part: _limit2.part,\n                    rootError: error,\n                    postparsed: postparsed,\n                    expandOne: expandOne\n                }, options.errors));\n                if (errorResult === \"ignore\") {\n                    continue;\n                }\n            }\n            if (error instanceof XTTemplateError) {\n                errors.push(error);\n            } else {\n                throw error;\n            }\n        }\n        if (!result) {\n            continue;\n        }\n        offset += result.inner.length - (result.right + 1 - result.left);\n        (_postparsed = postparsed).splice.apply(_postparsed, [\n            result.left,\n            result.right + 1 - result.left\n        ].concat(_toConsumableArray(result.inner)));\n    }\n    return {\n        postparsed: postparsed,\n        errors: errors\n    };\n}\nmodule.exports = {\n    expandToOne: expandToOne,\n    getExpandToDefault: getExpandToDefault\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/traits.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/utils.js":
/*!************************************************!*\
  !*** ./node_modules/docxtemplater/js/utils.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nfunction last(a) {\n    return a[a.length - 1];\n}\nfunction first(a) {\n    return a[0];\n}\nmodule.exports = {\n    last: last,\n    first: first\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLEtBQUtDLENBQUM7SUFDYixPQUFPQSxDQUFDLENBQUNBLEVBQUVDLE1BQU0sR0FBRyxFQUFFO0FBQ3hCO0FBQ0EsU0FBU0MsTUFBTUYsQ0FBQztJQUNkLE9BQU9BLENBQUMsQ0FBQyxFQUFFO0FBQ2I7QUFDQUcsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZMLE1BQU1BO0lBQ05HLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWtlLXJlbnRhbC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMvdXRpbHMuanM/NWMzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gbGFzdChhKSB7XG4gIHJldHVybiBhW2EubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBmaXJzdChhKSB7XG4gIHJldHVybiBhWzBdO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxhc3Q6IGxhc3QsXG4gIGZpcnN0OiBmaXJzdFxufTsiXSwibmFtZXMiOlsibGFzdCIsImEiLCJsZW5ndGgiLCJmaXJzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/xml-matcher.js":
/*!******************************************************!*\
  !*** ./node_modules/docxtemplater/js/xml-matcher.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pregMatchAll = _require.pregMatchAll;\nmodule.exports = function xmlMatcher(content, tagsXmlArray) {\n    var res = {\n        content: content\n    };\n    var taj = tagsXmlArray.join(\"|\");\n    var regexp = new RegExp(\"(?:(<(?:\".concat(taj, \")[^>]*>)([^<>]*)</(?:\").concat(taj, \")>)|(<(?:\").concat(taj, \")[^>]*/>)\"), \"g\");\n    res.matches = pregMatchAll(regexp, res.content);\n    return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9jeHRlbXBsYXRlci9qcy94bWwtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLDBFQUFnQixHQUNyQ0MsZUFBZUYsU0FBU0UsWUFBWTtBQUN0Q0MsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdDLE9BQU8sRUFBRUMsWUFBWTtJQUN4RCxJQUFJQyxNQUFNO1FBQ1JGLFNBQVNBO0lBQ1g7SUFDQSxJQUFJRyxNQUFNRixhQUFhRyxJQUFJLENBQUM7SUFDNUIsSUFBSUMsU0FBUyxJQUFJQyxPQUFPLFdBQVdDLE1BQU0sQ0FBQ0osS0FBSyx5QkFBeUJJLE1BQU0sQ0FBQ0osS0FBSyxhQUFhSSxNQUFNLENBQUNKLEtBQUssY0FBYztJQUMzSEQsSUFBSU0sT0FBTyxHQUFHWixhQUFhUyxRQUFRSCxJQUFJRixPQUFPO0lBQzlDLE9BQU9FO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWtlLXJlbnRhbC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvY3h0ZW1wbGF0ZXIvanMveG1sLW1hdGNoZXIuanM/YjBmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vZG9jLXV0aWxzLmpzXCIpLFxuICBwcmVnTWF0Y2hBbGwgPSBfcmVxdWlyZS5wcmVnTWF0Y2hBbGw7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhtbE1hdGNoZXIoY29udGVudCwgdGFnc1htbEFycmF5KSB7XG4gIHZhciByZXMgPSB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xuICB2YXIgdGFqID0gdGFnc1htbEFycmF5LmpvaW4oXCJ8XCIpO1xuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cChcIig/Oig8KD86XCIuY29uY2F0KHRhaiwgXCIpW14+XSo+KShbXjw+XSopPC8oPzpcIikuY29uY2F0KHRhaiwgXCIpPil8KDwoPzpcIikuY29uY2F0KHRhaiwgXCIpW14+XSovPilcIiksIFwiZ1wiKTtcbiAgcmVzLm1hdGNoZXMgPSBwcmVnTWF0Y2hBbGwocmVnZXhwLCByZXMuY29udGVudCk7XG4gIHJldHVybiByZXM7XG59OyJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJwcmVnTWF0Y2hBbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwieG1sTWF0Y2hlciIsImNvbnRlbnQiLCJ0YWdzWG1sQXJyYXkiLCJyZXMiLCJ0YWoiLCJqb2luIiwicmVnZXhwIiwiUmVnRXhwIiwiY29uY2F0IiwibWF0Y2hlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/xml-matcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/docxtemplater/js/xml-templater.js":
/*!********************************************************!*\
  !*** ./node_modules/docxtemplater/js/xml-templater.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nvar _require = __webpack_require__(/*! ./doc-utils.js */ \"(rsc)/./node_modules/docxtemplater/js/doc-utils.js\"), pushArray = _require.pushArray, wordToUtf8 = _require.wordToUtf8, convertSpaces = _require.convertSpaces;\nvar xmlMatcher = __webpack_require__(/*! ./xml-matcher.js */ \"(rsc)/./node_modules/docxtemplater/js/xml-matcher.js\");\nvar Lexer = __webpack_require__(/*! ./lexer.js */ \"(rsc)/./node_modules/docxtemplater/js/lexer.js\");\nvar Parser = __webpack_require__(/*! ./parser.js */ \"(rsc)/./node_modules/docxtemplater/js/parser.js\");\nvar _render = __webpack_require__(/*! ./render.js */ \"(rsc)/./node_modules/docxtemplater/js/render.js\");\nvar postrender = __webpack_require__(/*! ./postrender.js */ \"(rsc)/./node_modules/docxtemplater/js/postrender.js\");\nvar resolve = __webpack_require__(/*! ./resolve.js */ \"(rsc)/./node_modules/docxtemplater/js/resolve.js\");\nvar joinUncorrupt = __webpack_require__(/*! ./join-uncorrupt.js */ \"(rsc)/./node_modules/docxtemplater/js/join-uncorrupt.js\");\nfunction _getFullText(content, tagsXmlArray) {\n    var matcher = xmlMatcher(content, tagsXmlArray);\n    var result = matcher.matches.map(function(match) {\n        return match.array[2];\n    });\n    return wordToUtf8(convertSpaces(result.join(\"\")));\n}\nmodule.exports = /*#__PURE__*/ function() {\n    function XmlTemplater(content, options) {\n        _classCallCheck(this, XmlTemplater);\n        this.cachedParsers = {};\n        this.content = content;\n        for(var key in options){\n            this[key] = options[key];\n        }\n        this.setModules({\n            inspect: {\n                filePath: options.filePath\n            }\n        });\n    }\n    return _createClass(XmlTemplater, [\n        {\n            key: \"resolveTags\",\n            value: function resolveTags(tags) {\n                var _this = this;\n                this.tags = tags;\n                var options = this.getOptions();\n                var filePath = this.filePath;\n                options.scopeManager = this.scopeManager;\n                options.resolve = resolve;\n                var errors = [];\n                return Promise.all(this.modules.map(function(module1) {\n                    return Promise.resolve(module1.preResolve(options))[\"catch\"](function(e) {\n                        errors.push(e);\n                    });\n                })).then(function() {\n                    if (errors.length !== 0) {\n                        throw errors;\n                    }\n                    return resolve(options).then(function(_ref) {\n                        var resolved = _ref.resolved, errors = _ref.errors;\n                        errors = errors.map(function(error) {\n                            var _error;\n                            // If a string is thrown, convert it to a real Error\n                            if (!(error instanceof Error)) {\n                                error = new Error(error);\n                            }\n                            /*\n             * error properties might not be defined if some foreign error\n             * (unhandled error not thrown by docxtemplater willingly) is\n             * thrown.\n             */ (_error = error).properties || (_error.properties = {});\n                            error.properties.file = filePath;\n                            return error;\n                        });\n                        if (errors.length !== 0) {\n                            throw errors;\n                        }\n                        return Promise.all(resolved).then(function(resolved) {\n                            options.scopeManager.root.finishedResolving = true;\n                            options.scopeManager.resolved = resolved;\n                            _this.setModules({\n                                inspect: {\n                                    resolved: resolved,\n                                    filePath: filePath\n                                }\n                            });\n                            return resolved;\n                        });\n                    })[\"catch\"](function(error) {\n                        _this.errorChecker(error);\n                        throw error;\n                    });\n                });\n            }\n        },\n        {\n            key: \"getFullText\",\n            value: function getFullText() {\n                return _getFullText(this.content, this.fileTypeConfig.tagsXmlTextArray);\n            }\n        },\n        {\n            key: \"setModules\",\n            value: function setModules(obj) {\n                for(var _i2 = 0, _this$modules2 = this.modules; _i2 < _this$modules2.length; _i2++){\n                    var _module = _this$modules2[_i2];\n                    _module.set(obj);\n                }\n            }\n        },\n        {\n            key: \"preparse\",\n            value: function preparse() {\n                this.allErrors = [];\n                this.xmllexed = Lexer.xmlparse(this.content, {\n                    text: this.fileTypeConfig.tagsXmlTextArray,\n                    other: this.fileTypeConfig.tagsXmlLexedArray\n                });\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        xmllexed: this.xmllexed\n                    }\n                });\n                var _Lexer$parse = Lexer.parse(this.xmllexed, this.delimiters, this.syntax, this.fileType), lexed = _Lexer$parse.lexed, lexerErrors = _Lexer$parse.errors;\n                pushArray(this.allErrors, lexerErrors);\n                this.lexed = lexed;\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        lexed: this.lexed\n                    }\n                });\n                var options = this.getOptions();\n                this.lexed = Parser.preparse(this.lexed, this.modules, options);\n            }\n        },\n        {\n            key: \"parse\",\n            value: function parse() {\n                var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, noPostParse = _ref2.noPostParse;\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath\n                    }\n                });\n                var options = this.getOptions();\n                this.parsed = Parser.parse(this.lexed, this.modules, options);\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        parsed: this.parsed\n                    }\n                });\n                if (noPostParse) {\n                    return this;\n                }\n                // In v4, we could remove this \"this.postparse()\" so that users have to call this manually.\n                return this.postparse();\n            }\n        },\n        {\n            key: \"postparse\",\n            value: function postparse() {\n                var options = this.getOptions();\n                var _Parser$postparse = Parser.postparse(this.parsed, this.modules, options), postparsed = _Parser$postparse.postparsed, postparsedErrors = _Parser$postparse.errors;\n                this.postparsed = postparsed;\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        postparsed: this.postparsed\n                    }\n                });\n                pushArray(this.allErrors, postparsedErrors);\n                this.errorChecker(this.allErrors);\n                return this;\n            }\n        },\n        {\n            key: \"errorChecker\",\n            value: function errorChecker(errors) {\n                for(var _i4 = 0, _errors2 = errors; _i4 < _errors2.length; _i4++){\n                    var error = _errors2[_i4];\n                    /*\n         * error properties might not be defined if some foreign\n         * (unhandled error not thrown by docxtemplater willingly) is\n         * thrown.\n         */ error.properties || (error.properties = {});\n                    error.properties.file = this.filePath;\n                }\n                for(var _i6 = 0, _this$modules4 = this.modules; _i6 < _this$modules4.length; _i6++){\n                    var _module2 = _this$modules4[_i6];\n                    errors = _module2.errorsTransformer(errors);\n                }\n            }\n        },\n        {\n            key: \"baseNullGetter\",\n            value: function baseNullGetter(part, sm) {\n                var _this2 = this;\n                var value = this.modules.reduce(function(value, module1) {\n                    if (value != null) {\n                        return value;\n                    }\n                    return module1.nullGetter(part, sm, _this2);\n                }, null);\n                if (value != null) {\n                    return value;\n                }\n                return this.nullGetter(part, sm);\n            }\n        },\n        {\n            key: \"getOptions\",\n            value: function getOptions() {\n                return {\n                    compiled: this.postparsed,\n                    cachedParsers: this.cachedParsers,\n                    tags: this.tags,\n                    modules: this.modules,\n                    parser: this.parser,\n                    contentType: this.contentType,\n                    relsType: this.relsType,\n                    baseNullGetter: this.baseNullGetter.bind(this),\n                    filePath: this.filePath,\n                    fileTypeConfig: this.fileTypeConfig,\n                    fileType: this.fileType,\n                    linebreaks: this.linebreaks,\n                    stripInvalidXMLChars: this.stripInvalidXMLChars\n                };\n            }\n        },\n        {\n            key: \"render\",\n            value: function render(to) {\n                this.filePath = to;\n                var options = this.getOptions();\n                options.resolved = this.scopeManager.resolved;\n                options.scopeManager = this.scopeManager;\n                options.render = _render;\n                options.joinUncorrupt = joinUncorrupt;\n                var _render2 = _render(options), errors = _render2.errors, parts = _render2.parts;\n                if (errors.length > 0) {\n                    this.allErrors = errors;\n                    this.errorChecker(errors);\n                    return this;\n                }\n                this.content = postrender(parts, options);\n                this.setModules({\n                    inspect: {\n                        filePath: this.filePath,\n                        content: this.content\n                    }\n                });\n                return this;\n            }\n        }\n    ]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/docxtemplater/js/xml-templater.js\n");

/***/ })

};
;