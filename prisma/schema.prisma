// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  rentals       Rental[]
  maintenance   MaintenanceRecord[]
  notifications Notification[]
  generatedApplications GeneratedApplication[]

  @@map("users")
}

enum UserRole {
  STUDENT
  TEACHING_STAFF
  NON_TEACHING_STAFF
  ADMIN
}

// Bike model for fleet management
model Bike {
  id              String    @id @default(cuid())
  bikeNumber      String    @unique
  status          BikeStatus @default(AVAILABLE)
  model           String
  lastMaintenance DateTime?
  purchaseDate    DateTime
  currentLocation Json?     // Stores { lat: number, lng: number }
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  rentals         Rental[]
  maintenance     MaintenanceRecord[]
  locationHistory LocationHistory[]

  @@map("bikes")
}

enum BikeStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

// Rental transactions
model Rental {
  id            String    @id @default(cuid())
  userId        String
  bikeId        String
  startTime     DateTime  @default(now())
  endTime       DateTime?
  status        RentalStatus @default(ACTIVE)
  distance      Float?    // in kilometers
  carbonSaved   Float?    // in kg of CO2
  totalCost     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  bike          Bike      @relation(fields: [bikeId], references: [id])
  locationHistory LocationHistory[]

  @@map("rentals")
}

enum RentalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// Maintenance records
model MaintenanceRecord {
  id          String    @id @default(cuid())
  bikeId      String
  userId      String    // Staff who performed maintenance
  type        MaintenanceType
  description String
  cost        Float?
  startDate   DateTime  @default(now())
  endDate     DateTime?
  status      MaintenanceStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bike        Bike      @relation(fields: [bikeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("maintenance_records")
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  REPLACEMENT
  INSPECTION
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Location tracking history
model LocationHistory {
  id        String   @id @default(cuid())
  bikeId    String
  rentalId  String?
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  zone      String?  // For zone violation tracking

  // Relations
  bike      Bike     @relation(fields: [bikeId], references: [id])
  rental    Rental?  @relation(fields: [rentalId], references: [id])

  @@map("location_history")
}

// Notifications system
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  MAINTENANCE_REQUIRED
  ZONE_VIOLATION
  RENTAL_REMINDER
  SYSTEM_ALERT
}

// Analytics and reporting
model Analytics {
  id              String   @id @default(cuid())
  date            DateTime @default(now())
  totalRides      Int
  totalDistance   Float    // in kilometers
  totalCarbonSaved Float   // in kg of CO2
  activeUsers     Int
  bikeUtilization Float    // percentage
  maintenanceCount Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("analytics")
}

// New model for generated application PDFs
model GeneratedApplication {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  pdfUrl    String   // Stores the URL or path to the generated PDF
  createdAt DateTime @default(now())

  @@map("generated_applications")
}
