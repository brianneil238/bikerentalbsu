"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_components_Map_tsx"],{

/***/ "(app-pages-browser)/./src/components/Map.tsx":
/*!********************************!*\
  !*** ./src/components/Map.tsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Map; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @googlemaps/js-api-loader */ \"(app-pages-browser)/./node_modules/@googlemaps/js-api-loader/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction Map(param) {\n    let { bikes, selectedBike, onBikeSelect } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initMap = async ()=>{\n            const loader = new _googlemaps_js_api_loader__WEBPACK_IMPORTED_MODULE_2__.Loader({\n                apiKey: \"your-google-maps-api-key\" || 0,\n                version: \"weekly\"\n            });\n            try {\n                const google = await loader.load();\n                if (!mapRef.current) return;\n                const map = new google.maps.Map(mapRef.current, {\n                    center: {\n                        lat: 51.5074,\n                        lng: -0.1278\n                    },\n                    zoom: 13,\n                    styles: [\n                        {\n                            featureType: \"poi\",\n                            elementType: \"labels\",\n                            stylers: [\n                                {\n                                    visibility: \"off\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                mapInstanceRef.current = map;\n                // Add click listener to map to deselect bike\n                map.addListener(\"click\", ()=>{\n                    onBikeSelect(null);\n                });\n                // Update markers when bikes change\n                updateMarkers(google, map);\n            } catch (error) {\n                console.error(\"Error loading Google Maps:\", error);\n            }\n        };\n        initMap();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const google = window.google;\n        updateMarkers(google, mapInstanceRef.current);\n    }, [\n        bikes,\n        selectedBike\n    ]);\n    const updateMarkers = (google, map)=>{\n        // Clear existing markers\n        Object.values(markersRef.current).forEach((marker)=>marker.setMap(null));\n        markersRef.current = {};\n        // Add new markers\n        bikes.forEach((bike)=>{\n            if (!bike.currentLocation) return;\n            const marker = new google.maps.Marker({\n                position: bike.currentLocation,\n                map,\n                title: \"Bike #\".concat(bike.bikeNumber),\n                icon: {\n                    path: google.maps.SymbolPath.CIRCLE,\n                    scale: 8,\n                    fillColor: bike.status === \"IN_USE\" ? \"#EF4444\" : \"#10B981\",\n                    fillOpacity: 1,\n                    strokeColor: \"#FFFFFF\",\n                    strokeWeight: 2\n                }\n            });\n            marker.addListener(\"click\", ()=>{\n                onBikeSelect(bike);\n            });\n            markersRef.current[bike.id] = marker;\n            // If this is the selected bike, center the map on it\n            if ((selectedBike === null || selectedBike === void 0 ? void 0 : selectedBike.id) === bike.id) {\n                map.setCenter(bike.currentLocation);\n                map.setZoom(15);\n            }\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mapRef,\n        className: \"w-full h-full rounded-lg\",\n        style: {\n            minHeight: \"400px\"\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\brian\\\\Downloads\\\\bike rental website\\\\src\\\\components\\\\Map.tsx\",\n        lineNumber: 97,\n        columnNumber: 5\n    }, this);\n}\n_s(Map, \"HfxYcnpQhQPTJOnowaWcPQZAg+0=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL01hcC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVpRDtBQUNFO0FBR3BDLFNBQVNJLElBQUksS0FBK0M7UUFBL0MsRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBWSxHQUEvQzs7SUFDMUIsTUFBTUMsU0FBU04sNkNBQU1BLENBQWlCO0lBQ3RDLE1BQU1PLGlCQUFpQlAsNkNBQU1BLENBQXlCO0lBQ3RELE1BQU1RLGFBQWFSLDZDQUFNQSxDQUF3QyxDQUFDO0lBRWxFRCxnREFBU0EsQ0FBQztRQUNSLE1BQU1VLFVBQVU7WUFDZCxNQUFNQyxTQUFTLElBQUlULDZEQUFNQSxDQUFDO2dCQUN4QlUsUUFBUUMsMEJBQTJDLElBQUk7Z0JBQ3ZERyxTQUFTO1lBQ1g7WUFFQSxJQUFJO2dCQUNGLE1BQU1DLFNBQVMsTUFBTU4sT0FBT08sSUFBSTtnQkFDaEMsSUFBSSxDQUFDWCxPQUFPWSxPQUFPLEVBQUU7Z0JBRXJCLE1BQU1DLE1BQU0sSUFBSUgsT0FBT0ksSUFBSSxDQUFDbEIsR0FBRyxDQUFDSSxPQUFPWSxPQUFPLEVBQUU7b0JBQzlDRyxRQUFRO3dCQUFFQyxLQUFLO3dCQUFTQyxLQUFLLENBQUM7b0JBQU87b0JBQ3JDQyxNQUFNO29CQUNOQyxRQUFRO3dCQUNOOzRCQUNFQyxhQUFhOzRCQUNiQyxhQUFhOzRCQUNiQyxTQUFTO2dDQUFDO29DQUFFQyxZQUFZO2dDQUFNOzZCQUFFO3dCQUNsQztxQkFDRDtnQkFDSDtnQkFFQXRCLGVBQWVXLE9BQU8sR0FBR0M7Z0JBRXpCLDZDQUE2QztnQkFDN0NBLElBQUlXLFdBQVcsQ0FBQyxTQUFTO29CQUN2QnpCLGFBQWE7Z0JBQ2Y7Z0JBRUEsbUNBQW1DO2dCQUNuQzBCLGNBQWNmLFFBQVFHO1lBQ3hCLEVBQUUsT0FBT2EsT0FBTztnQkFDZEMsUUFBUUQsS0FBSyxDQUFDLDhCQUE4QkE7WUFDOUM7UUFDRjtRQUVBdkI7SUFDRixHQUFHLEVBQUU7SUFFTFYsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNRLGVBQWVXLE9BQU8sRUFBRTtRQUU3QixNQUFNRixTQUFTa0IsT0FBT2xCLE1BQU07UUFDNUJlLGNBQWNmLFFBQVFULGVBQWVXLE9BQU87SUFDOUMsR0FBRztRQUFDZjtRQUFPQztLQUFhO0lBRXhCLE1BQU0yQixnQkFBZ0IsQ0FBQ2YsUUFBOEJHO1FBQ25ELHlCQUF5QjtRQUN6QmdCLE9BQU9DLE1BQU0sQ0FBQzVCLFdBQVdVLE9BQU8sRUFBRW1CLE9BQU8sQ0FBQ0MsQ0FBQUEsU0FBVUEsT0FBT0MsTUFBTSxDQUFDO1FBQ2xFL0IsV0FBV1UsT0FBTyxHQUFHLENBQUM7UUFFdEIsa0JBQWtCO1FBQ2xCZixNQUFNa0MsT0FBTyxDQUFDRyxDQUFBQTtZQUNaLElBQUksQ0FBQ0EsS0FBS0MsZUFBZSxFQUFFO1lBRTNCLE1BQU1ILFNBQVMsSUFBSXRCLE9BQU9JLElBQUksQ0FBQ3NCLE1BQU0sQ0FBQztnQkFDcENDLFVBQVVILEtBQUtDLGVBQWU7Z0JBQzlCdEI7Z0JBQ0F5QixPQUFPLFNBQXlCLE9BQWhCSixLQUFLSyxVQUFVO2dCQUMvQkMsTUFBTTtvQkFDSkMsTUFBTS9CLE9BQU9JLElBQUksQ0FBQzRCLFVBQVUsQ0FBQ0MsTUFBTTtvQkFDbkNDLE9BQU87b0JBQ1BDLFdBQVdYLEtBQUtZLE1BQU0sS0FBSyxXQUFXLFlBQVk7b0JBQ2xEQyxhQUFhO29CQUNiQyxhQUFhO29CQUNiQyxjQUFjO2dCQUNoQjtZQUNGO1lBRUFqQixPQUFPUixXQUFXLENBQUMsU0FBUztnQkFDMUJ6QixhQUFhbUM7WUFDZjtZQUVBaEMsV0FBV1UsT0FBTyxDQUFDc0IsS0FBS2dCLEVBQUUsQ0FBQyxHQUFHbEI7WUFFOUIscURBQXFEO1lBQ3JELElBQUlsQyxDQUFBQSx5QkFBQUEsbUNBQUFBLGFBQWNvRCxFQUFFLE1BQUtoQixLQUFLZ0IsRUFBRSxFQUFFO2dCQUNoQ3JDLElBQUlzQyxTQUFTLENBQUNqQixLQUFLQyxlQUFlO2dCQUNsQ3RCLElBQUl1QyxPQUFPLENBQUM7WUFDZDtRQUNGO0lBQ0Y7SUFFQSxxQkFDRSw4REFBQ0M7UUFDQ0MsS0FBS3REO1FBQ0x1RCxXQUFVO1FBQ1ZDLE9BQU87WUFBRUMsV0FBVztRQUFROzs7Ozs7QUFHbEM7R0FoR3dCN0Q7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTWFwLnRzeD9iMTY1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnQGdvb2dsZW1hcHMvanMtYXBpLWxvYWRlcic7XHJcbmltcG9ydCB7IEJpa2UsIE1hcFByb3BzIH0gZnJvbSAnQC90eXBlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXAoeyBiaWtlcywgc2VsZWN0ZWRCaWtlLCBvbkJpa2VTZWxlY3QgfTogTWFwUHJvcHMpIHtcclxuICBjb25zdCBtYXBSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gIGNvbnN0IG1hcEluc3RhbmNlUmVmID0gdXNlUmVmPGdvb2dsZS5tYXBzLk1hcCB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IG1hcmtlcnNSZWYgPSB1c2VSZWY8eyBba2V5OiBzdHJpbmddOiBnb29nbGUubWFwcy5NYXJrZXIgfT4oe30pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgaW5pdE1hcCA9IGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbG9hZGVyID0gbmV3IExvYWRlcih7XHJcbiAgICAgICAgYXBpS2V5OiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZIHx8ICcnLFxyXG4gICAgICAgIHZlcnNpb246ICd3ZWVrbHknLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZ29vZ2xlID0gYXdhaXQgbG9hZGVyLmxvYWQoKTtcclxuICAgICAgICBpZiAoIW1hcFJlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAobWFwUmVmLmN1cnJlbnQsIHtcclxuICAgICAgICAgIGNlbnRlcjogeyBsYXQ6IDUxLjUwNzQsIGxuZzogLTAuMTI3OCB9LCAvLyBEZWZhdWx0IHRvIExvbmRvblxyXG4gICAgICAgICAgem9vbTogMTMsXHJcbiAgICAgICAgICBzdHlsZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncG9pJyxcclxuICAgICAgICAgICAgICBlbGVtZW50VHlwZTogJ2xhYmVscycsXHJcbiAgICAgICAgICAgICAgc3R5bGVyczogW3sgdmlzaWJpbGl0eTogJ29mZicgfV0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtYXBJbnN0YW5jZVJlZi5jdXJyZW50ID0gbWFwO1xyXG5cclxuICAgICAgICAvLyBBZGQgY2xpY2sgbGlzdGVuZXIgdG8gbWFwIHRvIGRlc2VsZWN0IGJpa2VcclxuICAgICAgICBtYXAuYWRkTGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgb25CaWtlU2VsZWN0KG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgbWFya2VycyB3aGVuIGJpa2VzIGNoYW5nZVxyXG4gICAgICAgIHVwZGF0ZU1hcmtlcnMoZ29vZ2xlLCBtYXApO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgR29vZ2xlIE1hcHM6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGluaXRNYXAoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBnb29nbGUgPSB3aW5kb3cuZ29vZ2xlO1xyXG4gICAgdXBkYXRlTWFya2Vycyhnb29nbGUsIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpO1xyXG4gIH0sIFtiaWtlcywgc2VsZWN0ZWRCaWtlXSk7XHJcblxyXG4gIGNvbnN0IHVwZGF0ZU1hcmtlcnMgPSAoZ29vZ2xlOiB0eXBlb2Ygd2luZG93Lmdvb2dsZSwgbWFwOiBnb29nbGUubWFwcy5NYXApID0+IHtcclxuICAgIC8vIENsZWFyIGV4aXN0aW5nIG1hcmtlcnNcclxuICAgIE9iamVjdC52YWx1ZXMobWFya2Vyc1JlZi5jdXJyZW50KS5mb3JFYWNoKG1hcmtlciA9PiBtYXJrZXIuc2V0TWFwKG51bGwpKTtcclxuICAgIG1hcmtlcnNSZWYuY3VycmVudCA9IHt9O1xyXG5cclxuICAgIC8vIEFkZCBuZXcgbWFya2Vyc1xyXG4gICAgYmlrZXMuZm9yRWFjaChiaWtlID0+IHtcclxuICAgICAgaWYgKCFiaWtlLmN1cnJlbnRMb2NhdGlvbikgcmV0dXJuO1xyXG5cclxuICAgICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgICAgcG9zaXRpb246IGJpa2UuY3VycmVudExvY2F0aW9uLFxyXG4gICAgICAgIG1hcCxcclxuICAgICAgICB0aXRsZTogYEJpa2UgIyR7YmlrZS5iaWtlTnVtYmVyfWAsXHJcbiAgICAgICAgaWNvbjoge1xyXG4gICAgICAgICAgcGF0aDogZ29vZ2xlLm1hcHMuU3ltYm9sUGF0aC5DSVJDTEUsXHJcbiAgICAgICAgICBzY2FsZTogOCxcclxuICAgICAgICAgIGZpbGxDb2xvcjogYmlrZS5zdGF0dXMgPT09ICdJTl9VU0UnID8gJyNFRjQ0NDQnIDogJyMxMEI5ODEnLFxyXG4gICAgICAgICAgZmlsbE9wYWNpdHk6IDEsXHJcbiAgICAgICAgICBzdHJva2VDb2xvcjogJyNGRkZGRkYnLFxyXG4gICAgICAgICAgc3Ryb2tlV2VpZ2h0OiAyLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBvbkJpa2VTZWxlY3QoYmlrZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbWFya2Vyc1JlZi5jdXJyZW50W2Jpa2UuaWRdID0gbWFya2VyO1xyXG5cclxuICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgc2VsZWN0ZWQgYmlrZSwgY2VudGVyIHRoZSBtYXAgb24gaXRcclxuICAgICAgaWYgKHNlbGVjdGVkQmlrZT8uaWQgPT09IGJpa2UuaWQpIHtcclxuICAgICAgICBtYXAuc2V0Q2VudGVyKGJpa2UuY3VycmVudExvY2F0aW9uKTtcclxuICAgICAgICBtYXAuc2V0Wm9vbSgxNSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIHJlZj17bWFwUmVmfVxyXG4gICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIHJvdW5kZWQtbGdcIlxyXG4gICAgICBzdHlsZT17eyBtaW5IZWlnaHQ6ICc0MDBweCcgfX1cclxuICAgIC8+XHJcbiAgKTtcclxufSAiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJMb2FkZXIiLCJNYXAiLCJiaWtlcyIsInNlbGVjdGVkQmlrZSIsIm9uQmlrZVNlbGVjdCIsIm1hcFJlZiIsIm1hcEluc3RhbmNlUmVmIiwibWFya2Vyc1JlZiIsImluaXRNYXAiLCJsb2FkZXIiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSIsInZlcnNpb24iLCJnb29nbGUiLCJsb2FkIiwiY3VycmVudCIsIm1hcCIsIm1hcHMiLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJ6b29tIiwic3R5bGVzIiwiZmVhdHVyZVR5cGUiLCJlbGVtZW50VHlwZSIsInN0eWxlcnMiLCJ2aXNpYmlsaXR5IiwiYWRkTGlzdGVuZXIiLCJ1cGRhdGVNYXJrZXJzIiwiZXJyb3IiLCJjb25zb2xlIiwid2luZG93IiwiT2JqZWN0IiwidmFsdWVzIiwiZm9yRWFjaCIsIm1hcmtlciIsInNldE1hcCIsImJpa2UiLCJjdXJyZW50TG9jYXRpb24iLCJNYXJrZXIiLCJwb3NpdGlvbiIsInRpdGxlIiwiYmlrZU51bWJlciIsImljb24iLCJwYXRoIiwiU3ltYm9sUGF0aCIsIkNJUkNMRSIsInNjYWxlIiwiZmlsbENvbG9yIiwic3RhdHVzIiwiZmlsbE9wYWNpdHkiLCJzdHJva2VDb2xvciIsInN0cm9rZVdlaWdodCIsImlkIiwic2V0Q2VudGVyIiwic2V0Wm9vbSIsImRpdiIsInJlZiIsImNsYXNzTmFtZSIsInN0eWxlIiwibWluSGVpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Map.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@googlemaps/js-api-loader/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@googlemaps/js-api-loader/dist/index.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ID: function() { return /* binding */ DEFAULT_ID; },\n/* harmony export */   Loader: function() { return /* binding */ Loader; },\n/* harmony export */   LoaderStatus: function() { return /* binding */ LoaderStatus; }\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\n// do not edit .js files directly - edit src/index.jst\nvar fastDeepEqual = function equal(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;\n            return true;\n        }\n        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            var key = keys[i];\n            if (!equal(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    return a !== a && b !== b;\n};\nvar isEqual = /*@__PURE__*/ getDefaultExportFromCjs(fastDeepEqual);\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */ var LoaderStatus;\n(function(LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */ class Loader {\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n            authReferrerPolicy: this.authReferrerPolicy\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     * @deprecated\n     */ createUrl() {\n        let url = this.url;\n        url += \"?callback=__googleMapsCallback&loading=async\";\n        if (this.apiKey) {\n            url += \"&key=\".concat(this.apiKey);\n        }\n        if (this.channel) {\n            url += \"&channel=\".concat(this.channel);\n        }\n        if (this.client) {\n            url += \"&client=\".concat(this.client);\n        }\n        if (this.libraries.length > 0) {\n            url += \"&libraries=\".concat(this.libraries.join(\",\"));\n        }\n        if (this.language) {\n            url += \"&language=\".concat(this.language);\n        }\n        if (this.region) {\n            url += \"&region=\".concat(this.region);\n        }\n        if (this.version) {\n            url += \"&v=\".concat(this.version);\n        }\n        if (this.mapIds) {\n            url += \"&map_ids=\".concat(this.mapIds.join(\",\"));\n        }\n        if (this.authReferrerPolicy) {\n            url += \"&auth_referrer_policy=\".concat(this.authReferrerPolicy);\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     * @deprecated, use importLibrary() instead.\n     */ load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     * @deprecated, use importLibrary() instead.\n     */ loadPromise() {\n        return new Promise((resolve, reject)=>{\n            this.loadCallback((err)=>{\n                if (!err) {\n                    resolve(window.google);\n                } else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    importLibrary(name) {\n        this.execute();\n        return google.maps.importLibrary(name);\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     * @deprecated, use importLibrary() instead.\n     */ loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */ setScript() {\n        var _a, _b;\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const params = {\n            key: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            libraries: this.libraries.length && this.libraries,\n            v: this.version,\n            mapIds: this.mapIds,\n            language: this.language,\n            region: this.region,\n            authReferrerPolicy: this.authReferrerPolicy\n        };\n        // keep the URL minimal:\n        Object.keys(params).forEach(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (key)=>!params[key] && delete params[key]);\n        if (!((_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.maps) === null || _b === void 0 ? void 0 : _b.importLibrary)) {\n            // tweaked copy of https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n            // which also sets the base url, the id, and the nonce\n            /* eslint-disable */ ((g)=>{\n                // @ts-ignore\n                let h, a, k, p = \"The Google Maps JavaScript API\", c = \"google\", l = \"importLibrary\", q = \"__ib__\", m = document, b = window;\n                // @ts-ignore\n                b = b[c] || (b[c] = {});\n                // @ts-ignore\n                const d = b.maps || (b.maps = {}), r = new Set(), e = new URLSearchParams(), u = ()=>// @ts-ignore\n                    h || (h = new Promise((f, n)=>__awaiter(this, void 0, void 0, function*() {\n                            var _a;\n                            yield a = m.createElement(\"script\");\n                            a.id = this.id;\n                            e.set(\"libraries\", [\n                                ...r\n                            ] + \"\");\n                            // @ts-ignore\n                            for(k in g)e.set(k.replace(/[A-Z]/g, (t)=>\"_\" + t[0].toLowerCase()), g[k]);\n                            e.set(\"callback\", c + \".maps.\" + q);\n                            a.src = this.url + \"?\" + e;\n                            d[q] = f;\n                            a.onerror = ()=>h = n(Error(p + \" could not load.\"));\n                            // @ts-ignore\n                            a.nonce = this.nonce || ((_a = m.querySelector(\"script[nonce]\")) === null || _a === void 0 ? void 0 : _a.nonce) || \"\";\n                            m.head.append(a);\n                        })));\n                // @ts-ignore\n                d[l] ? console.warn(p + \" only loads once. Ignoring:\", g) : d[l] = function(f) {\n                    for(var _len = arguments.length, n = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        n[_key - 1] = arguments[_key];\n                    }\n                    return r.add(f) && u().then(()=>d[l](f, ...n));\n                };\n            })(params);\n        /* eslint-enable */ }\n        // While most libraries populate the global namespace when loaded via bootstrap params,\n        // this is not the case for \"marker\" when used with the inline bootstrap loader\n        // (and maybe others in the future). So ensure there is an importLibrary for each:\n        const libraryPromises = this.libraries.map((library)=>this.importLibrary(library));\n        // ensure at least one library, to kick off loading...\n        if (!libraryPromises.length) {\n            libraryPromises.push(this.importLibrary(\"core\"));\n        }\n        Promise.all(libraryPromises).then(()=>this.callback(), (error)=>{\n            const event = new ErrorEvent(\"error\", {\n                error\n            }); // for backwards compat\n            this.loadErrorCallback(event);\n        });\n    }\n    /**\n     * Reset the loader state.\n     */ reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.error(\"Failed to load Google Maps script, retrying in \".concat(delay, \" ms.\"));\n            setTimeout(()=>{\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        } else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb)=>{\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.loading) {\n            // do nothing but wait\n            return;\n        }\n        if (this.done) {\n            this.callback();\n        } else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader. \" + \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            this.loading = true;\n            this.setScript();\n        }\n    }\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */ constructor({ apiKey, authReferrerPolicy, channel, client, id = DEFAULT_ID, language, libraries = [], mapIds, nonce, region, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", version }){\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.apiKey = apiKey;\n        this.authReferrerPolicy = authReferrerPolicy;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.language = language;\n        this.libraries = libraries;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.region = region;\n        this.retries = retries;\n        this.url = url;\n        this.version = version;\n        if (Loader.instance) {\n            if (!isEqual(this.options, Loader.instance.options)) {\n                throw new Error(\"Loader must not be called again with different options. \".concat(JSON.stringify(this.options), \" !== \").concat(JSON.stringify(Loader.instance.options)));\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@googlemaps/js-api-loader/dist/index.mjs\n"));

/***/ })

}]);