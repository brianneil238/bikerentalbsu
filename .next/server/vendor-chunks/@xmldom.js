"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xmldom";
exports.ids = ["vendor-chunks/@xmldom"];
exports.modules = {

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js":
/*!********************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/conventions.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties,\n * including NodeList.\n *\n * @param {T[] | { length: number; [number]: T }} list\n * @param {function (item: T, index: number, list:T[]):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac\n * Allows injecting a custom implementation in tests (`Array.prototype` by default).\n * @returns {T | undefined}\n * @template {unknown} T\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */ function find(list, predicate, ac) {\n    if (ac === undefined) {\n        ac = Array.prototype;\n    }\n    if (list && typeof ac.find === \"function\") {\n        return ac.find.call(list, predicate);\n    }\n    for(var i = 0; i < list.length; i++){\n        if (hasOwn(list, i)) {\n            var item = list[i];\n            if (predicate.call(undefined, item, i, list)) {\n                return item;\n            }\n        }\n    }\n}\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * If `Object.getOwnPropertyDescriptors` is available,\n * a new object with all properties of object but without any prototype is created and returned\n * after freezing it.\n *\n * @param {T} object\n * The object to freeze.\n * @param {Pick<ObjectConstructor, 'create' | 'freeze' | 'getOwnPropertyDescriptors'>} [oc=Object]\n * `Object` by default,\n * allows to inject custom object constructor for tests.\n * @returns {Readonly<T>}\n * @template {Object} T\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n * @prettierignore\n */ function freeze(object, oc) {\n    if (oc === undefined) {\n        oc = Object;\n    }\n    if (oc && typeof oc.getOwnPropertyDescriptors === \"function\") {\n        object = oc.create(null, oc.getOwnPropertyDescriptors(object));\n    }\n    return oc && typeof oc.freeze === \"function\" ? oc.freeze(object) : object;\n}\n/**\n * Implementation for `Object.hasOwn` but ES5 compatible.\n *\n * @param {any} object\n * @param {string | number} key\n * @returns {boolean}\n */ function hasOwn(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n/**\n * Since xmldom can not rely on `Object.assign`,\n * it uses/provides a simplified version that is sufficient for its needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n * @returns {Object}\n * The target with the merged/overridden properties.\n * @throws {TypeError}\n * If target is not an object.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */ function assign(target, source) {\n    if (target === null || typeof target !== \"object\") {\n        throw new TypeError(\"target is not an object\");\n    }\n    for(var key in source){\n        if (hasOwn(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n/**\n * A number of attributes are boolean attributes.\n * The presence of a boolean attribute on an element represents the `true` value,\n * and the absence of the attribute represents the `false` value.\n *\n * If the attribute is present, its value must either be the empty string, or a value that is\n * an ASCII case-insensitive match for the attribute's canonical name,\n * with no leading or trailing whitespace.\n *\n * Note: The values `\"true\"` and `\"false\"` are not allowed on boolean attributes.\n * To represent a `false` value, the attribute has to be omitted altogether.\n *\n * @see https://html.spec.whatwg.org/#boolean-attributes\n * @see https://html.spec.whatwg.org/#attributes-3\n */ var HTML_BOOLEAN_ATTRIBUTES = freeze({\n    allowfullscreen: true,\n    async: true,\n    autofocus: true,\n    autoplay: true,\n    checked: true,\n    controls: true,\n    default: true,\n    defer: true,\n    disabled: true,\n    formnovalidate: true,\n    hidden: true,\n    ismap: true,\n    itemscope: true,\n    loop: true,\n    multiple: true,\n    muted: true,\n    nomodule: true,\n    novalidate: true,\n    open: true,\n    playsinline: true,\n    readonly: true,\n    required: true,\n    reversed: true,\n    selected: true\n});\n/**\n * Check if `name` is matching one of the HTML boolean attribute names.\n * This method doesn't check if such attributes are allowed in the context of the current\n * document/parsing.\n *\n * @param {string} name\n * @returns {boolean}\n * @see {@link HTML_BOOLEAN_ATTRIBUTES}\n * @see https://html.spec.whatwg.org/#boolean-attributes\n * @see https://html.spec.whatwg.org/#attributes-3\n */ function isHTMLBooleanAttribute(name) {\n    return hasOwn(HTML_BOOLEAN_ATTRIBUTES, name.toLowerCase());\n}\n/**\n * Void elements only have a start tag; end tags must not be specified for void elements.\n * These elements should be written as self-closing like this: `<area />`.\n * This should not be confused with optional tags that HTML allows to omit the end tag for\n * (like `li`, `tr` and others), which can have content after them,\n * so they can not be written as self-closing.\n * xmldom does not have any logic for optional end tags cases,\n * and will report them as a warning.\n * Content that would go into the unopened element,\n * will instead be added as a sibling text node.\n *\n * @type {Readonly<{\n * \tarea: boolean;\n * \tcol: boolean;\n * \timg: boolean;\n * \twbr: boolean;\n * \tlink: boolean;\n * \thr: boolean;\n * \tsource: boolean;\n * \tbr: boolean;\n * \tinput: boolean;\n * \tparam: boolean;\n * \tmeta: boolean;\n * \tembed: boolean;\n * \ttrack: boolean;\n * \tbase: boolean;\n * }>}\n * @see https://html.spec.whatwg.org/#void-elements\n * @see https://html.spec.whatwg.org/#optional-tags\n */ var HTML_VOID_ELEMENTS = freeze({\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n});\n/**\n * Check if `tagName` is matching one of the HTML void element names.\n * This method doesn't check if such tags are allowed in the context of the current\n * document/parsing.\n *\n * @param {string} tagName\n * @returns {boolean}\n * @see {@link HTML_VOID_ELEMENTS}\n * @see https://html.spec.whatwg.org/#void-elements\n */ function isHTMLVoidElement(tagName) {\n    return hasOwn(HTML_VOID_ELEMENTS, tagName.toLowerCase());\n}\n/**\n * Tag names that are raw text elements according to HTML spec.\n * The value denotes whether they are escapable or not.\n *\n * @see {@link isHTMLEscapableRawTextElement}\n * @see {@link isHTMLRawTextElement}\n * @see https://html.spec.whatwg.org/#raw-text-elements\n * @see https://html.spec.whatwg.org/#escapable-raw-text-elements\n */ var HTML_RAW_TEXT_ELEMENTS = freeze({\n    script: false,\n    style: false,\n    textarea: true,\n    title: true\n});\n/**\n * Check if `tagName` is matching one of the HTML raw text element names.\n * This method doesn't check if such tags are allowed in the context of the current\n * document/parsing.\n *\n * @param {string} tagName\n * @returns {boolean}\n * @see {@link isHTMLEscapableRawTextElement}\n * @see {@link HTML_RAW_TEXT_ELEMENTS}\n * @see https://html.spec.whatwg.org/#raw-text-elements\n * @see https://html.spec.whatwg.org/#escapable-raw-text-elements\n */ function isHTMLRawTextElement(tagName) {\n    var key = tagName.toLowerCase();\n    return hasOwn(HTML_RAW_TEXT_ELEMENTS, key) && !HTML_RAW_TEXT_ELEMENTS[key];\n}\n/**\n * Check if `tagName` is matching one of the HTML escapable raw text element names.\n * This method doesn't check if such tags are allowed in the context of the current\n * document/parsing.\n *\n * @param {string} tagName\n * @returns {boolean}\n * @see {@link isHTMLRawTextElement}\n * @see {@link HTML_RAW_TEXT_ELEMENTS}\n * @see https://html.spec.whatwg.org/#raw-text-elements\n * @see https://html.spec.whatwg.org/#escapable-raw-text-elements\n */ function isHTMLEscapableRawTextElement(tagName) {\n    var key = tagName.toLowerCase();\n    return hasOwn(HTML_RAW_TEXT_ELEMENTS, key) && HTML_RAW_TEXT_ELEMENTS[key];\n}\n/**\n * Only returns true if `value` matches MIME_TYPE.HTML, which indicates an HTML document.\n *\n * @param {string} mimeType\n * @returns {mimeType is 'text/html'}\n * @see https://www.iana.org/assignments/media-types/text/html\n * @see https://en.wikipedia.org/wiki/HTML\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring\n */ function isHTMLMimeType(mimeType) {\n    return mimeType === MIME_TYPE.HTML;\n}\n/**\n * For both the `text/html` and the `application/xhtml+xml` namespace the spec defines that the\n * HTML namespace is provided as the default.\n *\n * @param {string} mimeType\n * @returns {boolean}\n * @see https://dom.spec.whatwg.org/#dom-document-createelement\n * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n * @see https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n */ function hasDefaultHTMLNamespace(mimeType) {\n    return isHTMLMimeType(mimeType) || mimeType === MIME_TYPE.XML_XHTML_APPLICATION;\n}\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02\n *      MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype\n *      WHATWG HTML Spec\n * @see {@link DOMParser.prototype.parseFromString}\n */ var MIME_TYPE = freeze({\n    /**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring\n\t *      WHATWG HTML Spec\n\t */ HTML: \"text/html\",\n    /**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType\n\t *      registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_APPLICATION: \"application/xml\",\n    /**\n\t * `text/xml`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_TEXT: \"text/xml\",\n    /**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType\n\t *      registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */ XML_XHTML_APPLICATION: \"application/xhtml+xml\",\n    /**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */ XML_SVG_IMAGE: \"image/svg+xml\"\n});\n/**\n * @typedef {'application/xhtml+xml' | 'application/xml' | 'image/svg+xml' | 'text/html' | 'text/xml'}\n * MimeType\n */ /**\n * @type {MimeType[]}\n * @private\n * Basically `Object.values`, which is not available in ES5.\n */ var _MIME_TYPES = Object.keys(MIME_TYPE).map(function(key) {\n    return MIME_TYPE[key];\n});\n/**\n * Only returns true if `mimeType` is one of the allowed values for\n * `DOMParser.parseFromString`.\n *\n * @param {string} mimeType\n * @returns {mimeType is 'application/xhtml+xml' | 'application/xml' | 'image/svg+xml' |  'text/html' | 'text/xml'}\n *\n */ function isValidMimeType(mimeType) {\n    return _MIME_TYPES.indexOf(mimeType) > -1;\n}\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */ var NAMESPACE = freeze({\n    /**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */ HTML: \"http://www.w3.org/1999/xhtml\",\n    /**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */ SVG: \"http://www.w3.org/2000/svg\",\n    /**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */ XML: \"http://www.w3.org/XML/1998/namespace\",\n    /**\n\t * The `xmlns:` namespace.\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */ XMLNS: \"http://www.w3.org/2000/xmlns/\"\n});\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.HTML_BOOLEAN_ATTRIBUTES = HTML_BOOLEAN_ATTRIBUTES;\nexports.HTML_RAW_TEXT_ELEMENTS = HTML_RAW_TEXT_ELEMENTS;\nexports.HTML_VOID_ELEMENTS = HTML_VOID_ELEMENTS;\nexports.hasDefaultHTMLNamespace = hasDefaultHTMLNamespace;\nexports.hasOwn = hasOwn;\nexports.isHTMLBooleanAttribute = isHTMLBooleanAttribute;\nexports.isHTMLRawTextElement = isHTMLRawTextElement;\nexports.isHTMLEscapableRawTextElement = isHTMLEscapableRawTextElement;\nexports.isHTMLMimeType = isHTMLMimeType;\nexports.isHTMLVoidElement = isHTMLVoidElement;\nexports.isValidMimeType = isValidMimeType;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/dom-parser.js":
/*!*******************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/dom-parser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar conventions = __webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar dom = __webpack_require__(/*! ./dom */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/dom.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js\");\nvar entities = __webpack_require__(/*! ./entities */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/entities.js\");\nvar sax = __webpack_require__(/*! ./sax */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/sax.js\");\nvar DOMImplementation = dom.DOMImplementation;\nvar hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;\nvar isHTMLMimeType = conventions.isHTMLMimeType;\nvar isValidMimeType = conventions.isValidMimeType;\nvar MIME_TYPE = conventions.MIME_TYPE;\nvar NAMESPACE = conventions.NAMESPACE;\nvar ParseError = errors.ParseError;\nvar XMLReader = sax.XMLReader;\n/**\n * Normalizes line ending according to <https://www.w3.org/TR/xml11/#sec-line-ends>,\n * including some Unicode \"newline\" characters:\n *\n * > XML parsed entities are often stored in computer files which,\n * > for editing convenience, are organized into lines.\n * > These lines are typically separated by some combination\n * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\n * >\n * > To simplify the tasks of applications, the XML processor must behave\n * > as if it normalized all line breaks in external parsed entities (including the document entity)\n * > on input, before parsing, by translating the following to a single #xA character:\n * >\n * > 1. the two-character sequence #xD #xA,\n * > 2. the two-character sequence #xD #x85,\n * > 3. the single character #x85,\n * > 4. the single character #x2028,\n * > 5. the single character #x2029,\n * > 6. any #xD character that is not immediately followed by #xA or #x85.\n *\n * @param {string} input\n * @returns {string}\n * @prettierignore\n */ function normalizeLineEndings(input) {\n    return input.replace(/\\r[\\n\\u0085]/g, \"\\n\").replace(/[\\r\\u0085\\u2028\\u2029]/g, \"\\n\");\n}\n/**\n * @typedef Locator\n * @property {number} [columnNumber]\n * @property {number} [lineNumber]\n */ /**\n * @typedef DOMParserOptions\n * @property {typeof assign} [assign]\n * The method to use instead of `conventions.assign`, which is used to copy values from\n * `options` before they are used for parsing.\n * @property {typeof DOMHandler} [domHandler]\n * For internal testing: The class for creating an instance for handling events from the SAX\n * parser.\n * *****Warning: By configuring a faulty implementation, the specified behavior can completely\n * be broken.*****.\n * @property {Function} [errorHandler]\n * DEPRECATED! use `onError` instead.\n * @property {function(level:ErrorLevel, message:string, context: DOMHandler):void}\n * [onError]\n * A function invoked for every error that occurs during parsing.\n *\n * If it is not provided, all errors are reported to `console.error`\n * and only `fatalError`s are thrown as a `ParseError`,\n * which prevents any further processing.\n * If the provided method throws, a `ParserError` is thrown,\n * which prevents any further processing.\n *\n * Be aware that many `warning`s are considered an error that prevents further processing in\n * most implementations.\n * @property {boolean} [locator=true]\n * Configures if the nodes created during parsing will have a `lineNumber` and a `columnNumber`\n * attribute describing their location in the XML string.\n * Default is true.\n * @property {(string) => string} [normalizeLineEndings]\n * used to replace line endings before parsing, defaults to exported `normalizeLineEndings`,\n * which normalizes line endings according to <https://www.w3.org/TR/xml11/#sec-line-ends>,\n * including some Unicode \"newline\" characters.\n * @property {Object} [xmlns]\n * The XML namespaces that should be assumed when parsing.\n * The default namespace can be provided by the key that is the empty string.\n * When the `mimeType` for HTML, XHTML or SVG are passed to `parseFromString`,\n * the default namespace that will be used,\n * will be overridden according to the specification.\n * @see {@link normalizeLineEndings}\n */ /**\n * The DOMParser interface provides the ability to parse XML or HTML source code from a string\n * into a DOM `Document`.\n *\n * ***xmldom is different from the spec in that it allows an `options` parameter,\n * to control the behavior***.\n *\n * @class\n * @param {DOMParserOptions} [options]\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\n */ function DOMParser(options) {\n    options = options || {};\n    if (options.locator === undefined) {\n        options.locator = true;\n    }\n    /**\n\t * The method to use instead of `conventions.assign`, which is used to copy values from\n\t * `options`\n\t * before they are used for parsing.\n\t *\n\t * @type {conventions.assign}\n\t * @private\n\t * @see {@link conventions.assign}\n\t * @readonly\n\t */ this.assign = options.assign || conventions.assign;\n    /**\n\t * For internal testing: The class for creating an instance for handling events from the SAX\n\t * parser.\n\t * *****Warning: By configuring a faulty implementation, the specified behavior can completely\n\t * be broken*****.\n\t *\n\t * @type {typeof DOMHandler}\n\t * @private\n\t * @readonly\n\t */ this.domHandler = options.domHandler || DOMHandler;\n    /**\n\t * A function that is invoked for every error that occurs during parsing.\n\t *\n\t * If it is not provided, all errors are reported to `console.error`\n\t * and only `fatalError`s are thrown as a `ParseError`,\n\t * which prevents any further processing.\n\t * If the provided method throws, a `ParserError` is thrown,\n\t * which prevents any further processing.\n\t *\n\t * Be aware that many `warning`s are considered an error that prevents further processing in\n\t * most implementations.\n\t *\n\t * @type {function(level:ErrorLevel, message:string, context: DOMHandler):void}\n\t * @see {@link onErrorStopParsing}\n\t * @see {@link onWarningStopParsing}\n\t */ this.onError = options.onError || options.errorHandler;\n    if (options.errorHandler && typeof options.errorHandler !== \"function\") {\n        throw new TypeError(\"errorHandler object is no longer supported, switch to onError!\");\n    } else if (options.errorHandler) {\n        options.errorHandler(\"warning\", \"The `errorHandler` option has been deprecated, use `onError` instead!\", this);\n    }\n    /**\n\t * used to replace line endings before parsing, defaults to `normalizeLineEndings`\n\t *\n\t * @type {(string) => string}\n\t * @readonly\n\t */ this.normalizeLineEndings = options.normalizeLineEndings || normalizeLineEndings;\n    /**\n\t * Configures if the nodes created during parsing will have a `lineNumber` and a\n\t * `columnNumber`\n\t * attribute describing their location in the XML string.\n\t * Default is true.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t */ this.locator = !!options.locator;\n    /**\n\t * The default namespace can be provided by the key that is the empty string.\n\t * When the `mimeType` for HTML, XHTML or SVG are passed to `parseFromString`,\n\t * the default namespace that will be used,\n\t * will be overridden according to the specification.\n\t *\n\t * @type {Readonly<Object>}\n\t * @readonly\n\t */ this.xmlns = this.assign(Object.create(null), options.xmlns);\n}\n/**\n * Parses `source` using the options in the way configured by the `DOMParserOptions` of `this`\n * `DOMParser`. If `mimeType` is `text/html` an HTML `Document` is created,\n * otherwise an XML `Document` is created.\n *\n * __It behaves different from the description in the living standard__:\n * - Uses the `options` passed to the `DOMParser` constructor to modify the behavior.\n * - Any unexpected input is reported to `onError` with either a `warning`,\n * `error` or `fatalError` level.\n * - Any `fatalError` throws a `ParseError` which prevents further processing.\n * - Any error thrown by `onError` is converted to a `ParseError` which prevents further\n * processing - If no `Document` was created during parsing it is reported as a `fatalError`.\n * *****Warning: By configuring a faulty DOMHandler implementation,\n * the specified behavior can completely be broken*****.\n *\n * @param {string} source\n * The XML mime type only allows string input!\n * @param {string} [mimeType='application/xml']\n * the mimeType or contentType of the document to be created determines the `type` of document\n * created (XML or HTML)\n * @returns {Document}\n * The `Document` node.\n * @throws {ParseError}\n * for any `fatalError` or anything that is thrown by `onError`\n * @throws {TypeError}\n * for any invalid `mimeType`\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString\n * @see https://html.spec.whatwg.org/#dom-domparser-parsefromstring-dev\n */ DOMParser.prototype.parseFromString = function(source, mimeType) {\n    if (!isValidMimeType(mimeType)) {\n        throw new TypeError('DOMParser.parseFromString: the provided mimeType \"' + mimeType + '\" is not valid.');\n    }\n    var defaultNSMap = this.assign(Object.create(null), this.xmlns);\n    var entityMap = entities.XML_ENTITIES;\n    var defaultNamespace = defaultNSMap[\"\"] || null;\n    if (hasDefaultHTMLNamespace(mimeType)) {\n        entityMap = entities.HTML_ENTITIES;\n        defaultNamespace = NAMESPACE.HTML;\n    } else if (mimeType === MIME_TYPE.XML_SVG_IMAGE) {\n        defaultNamespace = NAMESPACE.SVG;\n    }\n    defaultNSMap[\"\"] = defaultNamespace;\n    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\n    var domBuilder = new this.domHandler({\n        mimeType: mimeType,\n        defaultNamespace: defaultNamespace,\n        onError: this.onError\n    });\n    var locator = this.locator ? {} : undefined;\n    if (this.locator) {\n        domBuilder.setDocumentLocator(locator);\n    }\n    var sax = new XMLReader();\n    sax.errorHandler = domBuilder;\n    sax.domBuilder = domBuilder;\n    var isXml = !conventions.isHTMLMimeType(mimeType);\n    if (isXml && typeof source !== \"string\") {\n        sax.errorHandler.fatalError(\"source is not a string\");\n    }\n    sax.parse(this.normalizeLineEndings(String(source)), defaultNSMap, entityMap);\n    if (!domBuilder.doc.documentElement) {\n        sax.errorHandler.fatalError(\"missing root element\");\n    }\n    return domBuilder.doc;\n};\n/**\n * @typedef DOMHandlerOptions\n * @property {string} [mimeType=MIME_TYPE.XML_APPLICATION]\n * @property {string | null} [defaultNamespace=null]\n */ /**\n * The class that is used to handle events from the SAX parser to create the related DOM\n * elements.\n *\n * Some methods are only implemented as an empty function,\n * since they are (at least currently) not relevant for xmldom.\n *\n * @class\n * @param {DOMHandlerOptions} [options]\n * @see http://www.saxproject.org/apidoc/org/xml/sax/ext/DefaultHandler2.html\n */ function DOMHandler(options) {\n    var opt = options || {};\n    /**\n\t * The mime type is used to determine if the DOM handler will create an XML or HTML document.\n\t * Only if it is set to `text/html` it will create an HTML document.\n\t * It defaults to MIME_TYPE.XML_APPLICATION.\n\t *\n\t * @type {string}\n\t * @see {@link MIME_TYPE}\n\t * @readonly\n\t */ this.mimeType = opt.mimeType || MIME_TYPE.XML_APPLICATION;\n    /**\n\t * The namespace to use to create an XML document.\n\t * For the following reasons this is required:\n\t * - The SAX API for `startDocument` doesn't offer any way to pass a namespace,\n\t * since at that point there is no way for the parser to know what the default namespace from\n\t * the document will be.\n\t * - When creating using `DOMImplementation.createDocument` it is required to pass a\n\t * namespace,\n\t * to determine the correct `Document.contentType`, which should match `this.mimeType`.\n\t * - When parsing an XML document with the `application/xhtml+xml` mimeType,\n\t * the HTML namespace needs to be the default namespace.\n\t *\n\t * @type {string | null}\n\t * @private\n\t * @readonly\n\t */ this.defaultNamespace = opt.defaultNamespace || null;\n    /**\n\t * @type {boolean}\n\t * @private\n\t */ this.cdata = false;\n    /**\n\t * The last `Element` that was created by `startElement`.\n\t * `endElement` sets it to the `currentElement.parentNode`.\n\t *\n\t * Note: The sax parser currently sets it to white space text nodes between tags.\n\t *\n\t * @type {Element | Node | undefined}\n\t * @private\n\t */ this.currentElement = undefined;\n    /**\n\t * The Document that is created as part of `startDocument`,\n\t * and returned by `DOMParser.parseFromString`.\n\t *\n\t * @type {Document | undefined}\n\t * @readonly\n\t */ this.doc = undefined;\n    /**\n\t * The locator is stored as part of setDocumentLocator.\n\t * It is controlled and mutated by the SAX parser to store the current parsing position.\n\t * It is used by DOMHandler to set `columnNumber` and `lineNumber`\n\t * on the DOM nodes.\n\t *\n\t * @type {Readonly<Locator> | undefined}\n\t * @private\n\t * @readonly (the\n\t * sax parser currently sometimes set's it)\n\t */ this.locator = undefined;\n    /**\n\t * @type {function (level:ErrorLevel ,message:string, context:DOMHandler):void}\n\t * @readonly\n\t */ this.onError = opt.onError;\n}\nfunction position(locator, node) {\n    node.lineNumber = locator.lineNumber;\n    node.columnNumber = locator.columnNumber;\n}\nDOMHandler.prototype = {\n    /**\n\t * Either creates an XML or an HTML document and stores it under `this.doc`.\n\t * If it is an XML document, `this.defaultNamespace` is used to create it,\n\t * and it will not contain any `childNodes`.\n\t * If it is an HTML document, it will be created without any `childNodes`.\n\t *\n\t * @see http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\n\t */ startDocument: function() {\n        var impl = new DOMImplementation();\n        this.doc = isHTMLMimeType(this.mimeType) ? impl.createHTMLDocument(false) : impl.createDocument(this.defaultNamespace, \"\");\n    },\n    startElement: function(namespaceURI, localName, qName, attrs) {\n        var doc = this.doc;\n        var el = doc.createElementNS(namespaceURI, qName || localName);\n        var len = attrs.length;\n        appendElement(this, el);\n        this.currentElement = el;\n        this.locator && position(this.locator, el);\n        for(var i = 0; i < len; i++){\n            var namespaceURI = attrs.getURI(i);\n            var value = attrs.getValue(i);\n            var qName = attrs.getQName(i);\n            var attr = doc.createAttributeNS(namespaceURI, qName);\n            this.locator && position(attrs.getLocator(i), attr);\n            attr.value = attr.nodeValue = value;\n            el.setAttributeNode(attr);\n        }\n    },\n    endElement: function(namespaceURI, localName, qName) {\n        this.currentElement = this.currentElement.parentNode;\n    },\n    startPrefixMapping: function(prefix, uri) {},\n    endPrefixMapping: function(prefix) {},\n    processingInstruction: function(target, data) {\n        var ins = this.doc.createProcessingInstruction(target, data);\n        this.locator && position(this.locator, ins);\n        appendElement(this, ins);\n    },\n    ignorableWhitespace: function(ch, start, length) {},\n    characters: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        //console.log(chars)\n        if (chars) {\n            if (this.cdata) {\n                var charNode = this.doc.createCDATASection(chars);\n            } else {\n                var charNode = this.doc.createTextNode(chars);\n            }\n            if (this.currentElement) {\n                this.currentElement.appendChild(charNode);\n            } else if (/^\\s*$/.test(chars)) {\n                this.doc.appendChild(charNode);\n            //process xml\n            }\n            this.locator && position(this.locator, charNode);\n        }\n    },\n    skippedEntity: function(name) {},\n    endDocument: function() {\n        this.doc.normalize();\n    },\n    /**\n\t * Stores the locator to be able to set the `columnNumber` and `lineNumber`\n\t * on the created DOM nodes.\n\t *\n\t * @param {Locator} locator\n\t */ setDocumentLocator: function(locator) {\n        if (locator) {\n            locator.lineNumber = 0;\n        }\n        this.locator = locator;\n    },\n    //LexicalHandler\n    comment: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        var comm = this.doc.createComment(chars);\n        this.locator && position(this.locator, comm);\n        appendElement(this, comm);\n    },\n    startCDATA: function() {\n        //used in characters() methods\n        this.cdata = true;\n    },\n    endCDATA: function() {\n        this.cdata = false;\n    },\n    startDTD: function(name, publicId, systemId, internalSubset) {\n        var impl = this.doc.implementation;\n        if (impl && impl.createDocumentType) {\n            var dt = impl.createDocumentType(name, publicId, systemId, internalSubset);\n            this.locator && position(this.locator, dt);\n            appendElement(this, dt);\n            this.doc.doctype = dt;\n        }\n    },\n    reportError: function(level, message) {\n        if (typeof this.onError === \"function\") {\n            try {\n                this.onError(level, message, this);\n            } catch (e) {\n                throw new ParseError(\"Reporting \" + level + ' \"' + message + '\" caused ' + e, this.locator);\n            }\n        } else {\n            console.error(\"[xmldom \" + level + \"]\t\" + message, _locator(this.locator));\n        }\n    },\n    /**\n\t * @see http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\n\t */ warning: function(message) {\n        this.reportError(\"warning\", message);\n    },\n    error: function(message) {\n        this.reportError(\"error\", message);\n    },\n    /**\n\t * This function reports a fatal error and throws a ParseError.\n\t *\n\t * @param {string} message\n\t * - The message to be used for reporting and throwing the error.\n\t * @returns {never}\n\t * This function always throws an error and never returns a value.\n\t * @throws {ParseError}\n\t * Always throws a ParseError with the provided message.\n\t */ fatalError: function(message) {\n        this.reportError(\"fatalError\", message);\n        throw new ParseError(message, this.locator);\n    }\n};\nfunction _locator(l) {\n    if (l) {\n        return \"\\n@#[line:\" + l.lineNumber + \",col:\" + l.columnNumber + \"]\";\n    }\n}\nfunction _toString(chars, start, length) {\n    if (typeof chars == \"string\") {\n        return chars.substr(start, length);\n    } else {\n        //java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\n        if (chars.length >= start + length || start) {\n            return new java.lang.String(chars, start, length) + \"\";\n        }\n        return chars;\n    }\n}\n/*\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\n * used method of org.xml.sax.ext.LexicalHandler:\n *  #comment(chars, start, length)\n *  #startCDATA()\n *  #endCDATA()\n *  #startDTD(name, publicId, systemId)\n *\n *\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\n *  #endDTD()\n *  #startEntity(name)\n *  #endEntity(name)\n *\n *\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\n * IGNORED method of org.xml.sax.ext.DeclHandler\n * \t#attributeDecl(eName, aName, type, mode, value)\n *  #elementDecl(name, model)\n *  #externalEntityDecl(name, publicId, systemId)\n *  #internalEntityDecl(name, value)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\n * IGNORED method of org.xml.sax.EntityResolver2\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\n *  #resolveEntity(publicId, systemId)\n *  #getExternalSubset(name, baseURI)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\n * IGNORED method of org.xml.sax.DTDHandler\n *  #notationDecl(name, publicId, systemId) {};\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\n */ \"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function(key) {\n    DOMHandler.prototype[key] = function() {\n        return null;\n    };\n});\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function appendElement(handler, node) {\n    if (!handler.currentElement) {\n        handler.doc.appendChild(node);\n    } else {\n        handler.currentElement.appendChild(node);\n    }\n}\n/**\n * A method that prevents any further parsing when an `error`\n * with level `error` is reported during parsing.\n *\n * @see {@link DOMParserOptions.onError}\n * @see {@link onWarningStopParsing}\n */ function onErrorStopParsing(level) {\n    if (level === \"error\") throw \"onErrorStopParsing\";\n}\n/**\n * A method that prevents any further parsing when any `error` is reported during parsing.\n *\n * @see {@link DOMParserOptions.onError}\n * @see {@link onErrorStopParsing}\n */ function onWarningStopParsing() {\n    throw \"onWarningStopParsing\";\n}\nexports.__DOMHandler = DOMHandler;\nexports.DOMParser = DOMParser;\nexports.normalizeLineEndings = normalizeLineEndings;\nexports.onErrorStopParsing = onErrorStopParsing;\nexports.onWarningStopParsing = onWarningStopParsing;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/dom-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/dom.js":
/*!************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/dom.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar conventions = __webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar find = conventions.find;\nvar hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;\nvar hasOwn = conventions.hasOwn;\nvar isHTMLMimeType = conventions.isHTMLMimeType;\nvar isHTMLRawTextElement = conventions.isHTMLRawTextElement;\nvar isHTMLVoidElement = conventions.isHTMLVoidElement;\nvar MIME_TYPE = conventions.MIME_TYPE;\nvar NAMESPACE = conventions.NAMESPACE;\n/**\n * Private DOM Constructor symbol\n *\n * Internal symbol used for construction of all classes whose constructors should be private.\n * Currently used for checks in `Node`, `Document`, `Element`, `Attr`, `CharacterData`, `Text`, `Comment`,\n * `CDATASection`, `DocumentType`, `Notation`, `Entity`, `EntityReference`, `DocumentFragment`, `ProcessingInstruction`\n * so the constructor can't be used from outside the module.\n */ var PDC = Symbol();\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js\");\nvar DOMException = errors.DOMException;\nvar DOMExceptionName = errors.DOMExceptionName;\nvar g = __webpack_require__(/*! ./grammar */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/grammar.js\");\n/**\n * Checks if the given symbol equals the Private DOM Constructor symbol (PDC)\n * and throws an Illegal constructor exception when the symbols don't match.\n * This ensures that the constructor remains private and can't be used outside this module.\n */ function checkSymbol(symbol) {\n    if (symbol !== PDC) {\n        throw new TypeError(\"Illegal constructor\");\n    }\n}\n/**\n * A prerequisite for `[].filter`, to drop elements that are empty.\n *\n * @param {string} input\n * The string to be checked.\n * @returns {boolean}\n * Returns `true` if the input string is not empty, `false` otherwise.\n */ function notEmptyString(input) {\n    return input !== \"\";\n}\n/**\n * Splits a string on ASCII whitespace characters (U+0009 TAB, U+000A LF, U+000C FF, U+000D CR,\n * U+0020 SPACE).\n * It follows the definition from the infra specification from WHATWG.\n *\n * @param {string} input\n * The string to be split.\n * @returns {string[]}\n * An array of the split strings. The array can be empty if the input string is empty or only\n * contains whitespace characters.\n * @see {@link https://infra.spec.whatwg.org/#split-on-ascii-whitespace}\n * @see {@link https://infra.spec.whatwg.org/#ascii-whitespace}\n */ function splitOnASCIIWhitespace(input) {\n    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\n    return input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : [];\n}\n/**\n * Adds element as a key to current if it is not already present.\n *\n * @param {Record<string, boolean | undefined>} current\n * The current record object to which the element will be added as a key.\n * The object's keys are string types and values are either boolean or undefined.\n * @param {string} element\n * The string to be added as a key to the current record.\n * @returns {Record<string, boolean | undefined>}\n * The updated record object after the addition of the new element.\n */ function orderedSetReducer(current, element) {\n    if (!hasOwn(current, element)) {\n        current[element] = true;\n    }\n    return current;\n}\n/**\n * Converts a string into an ordered set by splitting the input on ASCII whitespace and\n * ensuring uniqueness of elements.\n * This follows the definition of an ordered set from the infra specification by WHATWG.\n *\n * @param {string} input\n * The input string to be transformed into an ordered set.\n * @returns {string[]}\n * An array of unique strings obtained from the input, preserving the original order.\n * The array can be empty if the input string is empty or only contains whitespace characters.\n * @see {@link https://infra.spec.whatwg.org/#ordered-set}\n */ function toOrderedSet(input) {\n    if (!input) return [];\n    var list = splitOnASCIIWhitespace(input);\n    return Object.keys(list.reduce(orderedSetReducer, {}));\n}\n/**\n * Uses `list.indexOf` to implement a function that behaves like `Array.prototype.includes`.\n * This function is used in environments where `Array.prototype.includes` may not be available.\n *\n * @param {any[]} list\n * The array in which to search for the element.\n * @returns {function(any): boolean}\n * A function that accepts an element and returns a boolean indicating whether the element is\n * included in the provided list.\n */ function arrayIncludes(list) {\n    return function(element) {\n        return list && list.indexOf(element) !== -1;\n    };\n}\n/**\n * Validates a qualified name based on the criteria provided in the DOM specification by\n * WHATWG.\n *\n * @param {string} qualifiedName\n * The qualified name to be validated.\n * @throws {DOMException}\n * With code {@link DOMException.INVALID_CHARACTER_ERR} if the qualified name contains an\n * invalid character.\n * @see {@link https://dom.spec.whatwg.org/#validate}\n */ function validateQualifiedName(qualifiedName) {\n    if (!g.QName_exact.test(qualifiedName)) {\n        throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'invalid character in qualified name \"' + qualifiedName + '\"');\n    }\n}\n/**\n * Validates a qualified name and the namespace associated with it,\n * based on the criteria provided in the DOM specification by WHATWG.\n *\n * @param {string | null} namespace\n * The namespace to be validated. It can be a string or null.\n * @param {string} qualifiedName\n * The qualified name to be validated.\n * @returns {[namespace: string | null, prefix: string | null, localName: string]}\n * Returns a tuple with the namespace,\n * prefix and local name of the qualified name.\n * @throws {DOMException}\n * Throws a DOMException if the qualified name or the namespace is not valid.\n * @see {@link https://dom.spec.whatwg.org/#validate-and-extract}\n */ function validateAndExtract(namespace, qualifiedName) {\n    validateQualifiedName(qualifiedName);\n    namespace = namespace || null;\n    /**\n\t * @type {string | null}\n\t */ var prefix = null;\n    var localName = qualifiedName;\n    if (qualifiedName.indexOf(\":\") >= 0) {\n        var splitResult = qualifiedName.split(\":\");\n        prefix = splitResult[0];\n        localName = splitResult[1];\n    }\n    if (prefix !== null && namespace === null) {\n        throw new DOMException(DOMException.NAMESPACE_ERR, \"prefix is non-null and namespace is null\");\n    }\n    if (prefix === \"xml\" && namespace !== conventions.NAMESPACE.XML) {\n        throw new DOMException(DOMException.NAMESPACE_ERR, 'prefix is \"xml\" and namespace is not the XML namespace');\n    }\n    if ((prefix === \"xmlns\" || qualifiedName === \"xmlns\") && namespace !== conventions.NAMESPACE.XMLNS) {\n        throw new DOMException(DOMException.NAMESPACE_ERR, 'either qualifiedName or prefix is \"xmlns\" and namespace is not the XMLNS namespace');\n    }\n    if (namespace === conventions.NAMESPACE.XMLNS && prefix !== \"xmlns\" && qualifiedName !== \"xmlns\") {\n        throw new DOMException(DOMException.NAMESPACE_ERR, 'namespace is the XMLNS namespace and neither qualifiedName nor prefix is \"xmlns\"');\n    }\n    return [\n        namespace,\n        prefix,\n        localName\n    ];\n}\n/**\n * Copies properties from one object to another.\n * It only copies the object's own (not inherited) properties.\n *\n * @param {Object} src\n * The source object from which properties are copied.\n * @param {Object} dest\n * The destination object to which properties are copied.\n */ function copy(src, dest) {\n    for(var p in src){\n        if (hasOwn(src, p)) {\n            dest[p] = src[p];\n        }\n    }\n}\n/**\n * Extends a class with the properties and methods of a super class.\n * It uses a form of prototypal inheritance, and establishes the `constructor` property\n * correctly(?).\n *\n * It is not clear to the current maintainers if this implementation is making sense,\n * since it creates an intermediate prototype function,\n * which all properties of `Super` are copied onto using `_copy`.\n *\n * @param {Object} Class\n * The class that is to be extended.\n * @param {Object} Super\n * The super class from which properties and methods are inherited.\n * @private\n */ function _extends(Class, Super) {\n    var pt = Class.prototype;\n    if (!(pt instanceof Super)) {\n        function t() {}\n        t.prototype = Super.prototype;\n        t = new t();\n        copy(pt, t);\n        Class.prototype = pt = t;\n    }\n    if (pt.constructor != Class) {\n        if (typeof Class != \"function\") {\n            console.error(\"unknown Class:\" + Class);\n        }\n        pt.constructor = Class;\n    }\n}\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\nvar DocumentPosition = conventions.freeze({\n    DOCUMENT_POSITION_DISCONNECTED: 1,\n    DOCUMENT_POSITION_PRECEDING: 2,\n    DOCUMENT_POSITION_FOLLOWING: 4,\n    DOCUMENT_POSITION_CONTAINS: 8,\n    DOCUMENT_POSITION_CONTAINED_BY: 16,\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32\n});\n//helper functions for compareDocumentPosition\n/**\n * Finds the common ancestor in two parent chains.\n *\n * @param {Node[]} a\n * The first parent chain.\n * @param {Node[]} b\n * The second parent chain.\n * @returns {Node}\n * The common ancestor node if it exists. If there is no common ancestor, the function will\n * return `null`.\n */ function commonAncestor(a, b) {\n    if (b.length < a.length) return commonAncestor(b, a);\n    var c = null;\n    for(var n in a){\n        if (a[n] !== b[n]) return c;\n        c = a[n];\n    }\n    return c;\n}\n/**\n * Assigns a unique identifier to a document to ensure consistency while comparing unrelated\n * nodes.\n *\n * @param {Document} doc\n * The document to which a unique identifier is to be assigned.\n * @returns {string}\n * The unique identifier of the document. If the document already had a unique identifier, the\n * function will return the existing one.\n */ function docGUID(doc) {\n    if (!doc.guid) doc.guid = Math.random();\n    return doc.guid;\n}\n//-- end of helper functions\n/**\n * The NodeList interface provides the abstraction of an ordered collection of nodes,\n * without defining or constraining how this collection is implemented.\n * NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n * You can also access the items of the NodeList with a `for...of` loop.\n *\n * @class NodeList\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * @constructs NodeList\n */ function NodeList() {}\nNodeList.prototype = {\n    /**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1\n\t * inclusive.\n\t *\n\t * @type {number}\n\t */ length: 0,\n    /**\n\t * Returns the item at `index`. If index is greater than or equal to the number of nodes in\n\t * the list, this returns null.\n\t *\n\t * @param index\n\t * Unsigned long Index into the collection.\n\t * @returns {Node | null}\n\t * The node at position `index` in the NodeList,\n\t * or null if that is not a valid index.\n\t */ item: function(index) {\n        return index >= 0 && index < this.length ? this[index] : null;\n    },\n    /**\n\t * Returns a string representation of the NodeList.\n\t *\n\t * @param {unknown} nodeFilter\n\t * __A filter function? Not implemented according to the spec?__.\n\t * @returns {string}\n\t * A string representation of the NodeList.\n\t */ toString: function(nodeFilter) {\n        for(var buf = [], i = 0; i < this.length; i++){\n            serializeToString(this[i], buf, nodeFilter);\n        }\n        return buf.join(\"\");\n    },\n    /**\n\t * Filters the NodeList based on a predicate.\n\t *\n\t * @param {function(Node): boolean} predicate\n\t * - A predicate function to filter the NodeList.\n\t * @returns {Node[]}\n\t * An array of nodes that satisfy the predicate.\n\t * @private\n\t */ filter: function(predicate) {\n        return Array.prototype.filter.call(this, predicate);\n    },\n    /**\n\t * Returns the first index at which a given node can be found in the NodeList, or -1 if it is\n\t * not present.\n\t *\n\t * @param {Node} item\n\t * - The Node item to locate in the NodeList.\n\t * @returns {number}\n\t * The first index of the node in the NodeList; -1 if not found.\n\t * @private\n\t */ indexOf: function(item) {\n        return Array.prototype.indexOf.call(this, item);\n    }\n};\nNodeList.prototype[Symbol.iterator] = function() {\n    var me = this;\n    var index = 0;\n    return {\n        next: function() {\n            if (index < me.length) {\n                return {\n                    value: me[index++],\n                    done: false\n                };\n            } else {\n                return {\n                    done: true\n                };\n            }\n        },\n        return: function() {\n            return {\n                done: true\n            };\n        }\n    };\n};\n/**\n * Represents a live collection of nodes that is automatically updated when its associated\n * document changes.\n *\n * @class LiveNodeList\n * @param {Node} node\n * The associated node.\n * @param {function} refresh\n * The function to refresh the live node list.\n * @augments NodeList\n * @constructs LiveNodeList\n */ function LiveNodeList(node, refresh) {\n    this._node = node;\n    this._refresh = refresh;\n    _updateLiveList(this);\n}\n/**\n * Updates the live node list.\n *\n * @param {LiveNodeList} list\n * The live node list to update.\n * @private\n */ function _updateLiveList(list) {\n    var inc = list._node._inc || list._node.ownerDocument._inc;\n    if (list._inc !== inc) {\n        var ls = list._refresh(list._node);\n        __set__(list, \"length\", ls.length);\n        if (!list.$$length || ls.length < list.$$length) {\n            for(var i = ls.length; (i in list); i++){\n                if (hasOwn(list, i)) {\n                    delete list[i];\n                }\n            }\n        }\n        copy(ls, list);\n        list._inc = inc;\n    }\n}\n/**\n * Returns the node at position `index` in the LiveNodeList, or null if that is not a valid\n * index.\n *\n * @param {number} i\n * Index into the collection.\n * @returns {Node | null}\n * The node at position `index` in the LiveNodeList, or null if that is not a valid index.\n */ LiveNodeList.prototype.item = function(i) {\n    _updateLiveList(this);\n    return this[i] || null;\n};\n_extends(LiveNodeList, NodeList);\n/**\n * Objects implementing the NamedNodeMap interface are used to represent collections of nodes\n * that can be accessed by name.\n * Note that NamedNodeMap does not inherit from NodeList;\n * NamedNodeMaps are not maintained in any particular order.\n * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal\n * index,\n * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\n * and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities\n *\n * This implementation only supports property indices, but does not support named properties,\n * as specified in the living standard.\n *\n * @class NamedNodeMap\n * @see https://dom.spec.whatwg.org/#interface-namednodemap\n * @see https://webidl.spec.whatwg.org/#dfn-supported-property-names\n * @constructs NamedNodeMap\n */ function NamedNodeMap() {}\n/**\n * Returns the index of a node within the list.\n *\n * @param {Array} list\n * The list of nodes.\n * @param {Node} node\n * The node to find.\n * @returns {number}\n * The index of the node within the list, or -1 if not found.\n * @private\n */ function _findNodeIndex(list, node) {\n    var i = 0;\n    while(i < list.length){\n        if (list[i] === node) {\n            return i;\n        }\n        i++;\n    }\n}\n/**\n * Adds a new attribute to the list and updates the owner element of the attribute.\n *\n * @param {Element} el\n * The element which will become the owner of the new attribute.\n * @param {NamedNodeMap} list\n * The list to which the new attribute will be added.\n * @param {Attr} newAttr\n * The new attribute to be added.\n * @param {Attr} oldAttr\n * The old attribute to be replaced, or null if no attribute is to be replaced.\n * @returns {void}\n * @private\n */ function _addNamedNode(el, list, newAttr, oldAttr) {\n    if (oldAttr) {\n        list[_findNodeIndex(list, oldAttr)] = newAttr;\n    } else {\n        list[list.length] = newAttr;\n        list.length++;\n    }\n    if (el) {\n        newAttr.ownerElement = el;\n        var doc = el.ownerDocument;\n        if (doc) {\n            oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n            _onAddAttribute(doc, el, newAttr);\n        }\n    }\n}\n/**\n * Removes an attribute from the list and updates the owner element of the attribute.\n *\n * @param {Element} el\n * The element which is the current owner of the attribute.\n * @param {NamedNodeMap} list\n * The list from which the attribute will be removed.\n * @param {Attr} attr\n * The attribute to be removed.\n * @returns {void}\n * @private\n */ function _removeNamedNode(el, list, attr) {\n    //console.log('remove attr:'+attr)\n    var i = _findNodeIndex(list, attr);\n    if (i >= 0) {\n        var lastIndex = list.length - 1;\n        while(i <= lastIndex){\n            list[i] = list[++i];\n        }\n        list.length = lastIndex;\n        if (el) {\n            var doc = el.ownerDocument;\n            if (doc) {\n                _onRemoveAttribute(doc, el, attr);\n            }\n            attr.ownerElement = null;\n        }\n    }\n}\nNamedNodeMap.prototype = {\n    length: 0,\n    item: NodeList.prototype.item,\n    /**\n\t * Get an attribute by name. Note: Name is in lower case in case of HTML namespace and\n\t * document.\n\t *\n\t * @param {string} localName\n\t * The local name of the attribute.\n\t * @returns {Attr | null}\n\t * The attribute with the given local name, or null if no such attribute exists.\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name\n\t */ getNamedItem: function(localName) {\n        if (this._ownerElement && this._ownerElement._isInHTMLDocumentAndNamespace()) {\n            localName = localName.toLowerCase();\n        }\n        var i = 0;\n        while(i < this.length){\n            var attr = this[i];\n            if (attr.nodeName === localName) {\n                return attr;\n            }\n            i++;\n        }\n        return null;\n    },\n    /**\n\t * Set an attribute.\n\t *\n\t * @param {Attr} attr\n\t * The attribute to set.\n\t * @returns {Attr | null}\n\t * The old attribute with the same local name and namespace URI as the new one, or null if no\n\t * such attribute exists.\n\t * @throws {DOMException}\n\t * With code:\n\t * - {@link INUSE_ATTRIBUTE_ERR} - If the attribute is already an attribute of another\n\t * element.\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-set\n\t */ setNamedItem: function(attr) {\n        var el = attr.ownerElement;\n        if (el && el !== this._ownerElement) {\n            throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\n        }\n        var oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n        if (oldAttr === attr) {\n            return attr;\n        }\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /**\n\t * Set an attribute, replacing an existing attribute with the same local name and namespace\n\t * URI if one exists.\n\t *\n\t * @param {Attr} attr\n\t * The attribute to set.\n\t * @returns {Attr | null}\n\t * The old attribute with the same local name and namespace URI as the new one, or null if no\n\t * such attribute exists.\n\t * @throws {DOMException}\n\t * Throws a DOMException with the name \"InUseAttributeError\" if the attribute is already an\n\t * attribute of another element.\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-set\n\t */ setNamedItemNS: function(attr) {\n        return this.setNamedItem(attr);\n    },\n    /**\n\t * Removes an attribute specified by the local name.\n\t *\n\t * @param {string} localName\n\t * The local name of the attribute to be removed.\n\t * @returns {Attr}\n\t * The attribute node that was removed.\n\t * @throws {DOMException}\n\t * With code:\n\t * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given name is found.\n\t * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditem\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name\n\t */ removeNamedItem: function(localName) {\n        var attr = this.getNamedItem(localName);\n        if (!attr) {\n            throw new DOMException(DOMException.NOT_FOUND_ERR, localName);\n        }\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    /**\n\t * Removes an attribute specified by the namespace and local name.\n\t *\n\t * @param {string | null} namespaceURI\n\t * The namespace URI of the attribute to be removed.\n\t * @param {string} localName\n\t * The local name of the attribute to be removed.\n\t * @returns {Attr}\n\t * The attribute node that was removed.\n\t * @throws {DOMException}\n\t * With code:\n\t * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given namespace URI and local\n\t * name is found.\n\t * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditemns\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace\n\t */ removeNamedItemNS: function(namespaceURI, localName) {\n        var attr = this.getNamedItemNS(namespaceURI, localName);\n        if (!attr) {\n            throw new DOMException(DOMException.NOT_FOUND_ERR, namespaceURI ? namespaceURI + \" : \" + localName : localName);\n        }\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    /**\n\t * Get an attribute by namespace and local name.\n\t *\n\t * @param {string | null} namespaceURI\n\t * The namespace URI of the attribute.\n\t * @param {string} localName\n\t * The local name of the attribute.\n\t * @returns {Attr | null}\n\t * The attribute with the given namespace URI and local name, or null if no such attribute\n\t * exists.\n\t * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace\n\t */ getNamedItemNS: function(namespaceURI, localName) {\n        if (!namespaceURI) {\n            namespaceURI = null;\n        }\n        var i = 0;\n        while(i < this.length){\n            var node = this[i];\n            if (node.localName === localName && node.namespaceURI === namespaceURI) {\n                return node;\n            }\n            i++;\n        }\n        return null;\n    }\n};\nNamedNodeMap.prototype[Symbol.iterator] = function() {\n    var me = this;\n    var index = 0;\n    return {\n        next: function() {\n            if (index < me.length) {\n                return {\n                    value: me[index++],\n                    done: false\n                };\n            } else {\n                return {\n                    done: true\n                };\n            }\n        },\n        return: function() {\n            return {\n                done: true\n            };\n        }\n    };\n};\n/**\n * The DOMImplementation interface provides a number of methods for performing operations that\n * are independent of any particular instance of the document object model.\n *\n * The DOMImplementation interface represents an object providing methods which are not\n * dependent on any particular document.\n * Such an object is returned by the `Document.implementation` property.\n *\n * **The individual methods describe the differences compared to the specs**.\n *\n * @class DOMImplementation\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\n * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core\n *      (Initial)\n * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\n * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\n * @constructs DOMImplementation\n */ function DOMImplementation() {}\nDOMImplementation.prototype = {\n    /**\n\t * Test if the DOM implementation implements a specific feature and version, as specified in\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures DOM Features}.\n\t *\n\t * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given\n\t * feature is supported. The different implementations fairly diverged in what kind of\n\t * features were reported. The latest version of the spec settled to force this method to\n\t * always return true, where the functionality was accurate and in use.\n\t *\n\t * @deprecated\n\t * It is deprecated and modern browsers return true in all cases.\n\t * @function DOMImplementation#hasFeature\n\t * @param {string} feature\n\t * The name of the feature to test.\n\t * @param {string} [version]\n\t * This is the version number of the feature to test.\n\t * @returns {boolean}\n\t * Always returns true.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\n\t * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5CED94D7 DOM Level 3 Core\n\t */ hasFeature: function(feature, version) {\n        return true;\n    },\n    /**\n\t * Creates a DOM Document object of the specified type with its document element. Note that\n\t * based on the {@link DocumentType}\n\t * given to create the document, the implementation may instantiate specialized\n\t * {@link Document} objects that support additional features than the \"Core\", such as \"HTML\"\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML}.\n\t * On the other hand, setting the {@link DocumentType} after the document was created makes\n\t * this very unlikely to happen. Alternatively, specialized {@link Document} creation methods,\n\t * such as createHTMLDocument\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML},\n\t * can be used to obtain specific types of {@link Document} objects.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - There is no interface/class `XMLDocument`, it returns a `Document`\n\t * instance (with it's `type` set to `'xml'`).\n\t * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t *\n\t * @function DOMImplementation.createDocument\n\t * @param {string | null} namespaceURI\n\t * The\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-namespaceURI namespace URI}\n\t * of the document element to create or null.\n\t * @param {string | null} qualifiedName\n\t * The\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified name}\n\t * of the document element to be created or null.\n\t * @param {DocumentType | null} [doctype=null]\n\t * The type of document to be created or null. When doctype is not null, its\n\t * {@link Node#ownerDocument} attribute is set to the document being created. Default is\n\t * `null`\n\t * @returns {Document}\n\t * A new {@link Document} object with its document element. If the NamespaceURI,\n\t * qualifiedName, and doctype are null, the returned {@link Document} is empty with no\n\t * document element.\n\t * @throws {DOMException}\n\t * With code:\n\t *\n\t * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name\n\t * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.\n\t * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed, if the qualifiedName has a\n\t * prefix and the namespaceURI is null, or if the qualifiedName is null and the namespaceURI\n\t * is different from null, or if the qualifiedName has a prefix that is \"xml\" and the\n\t * namespaceURI is different from \"{@link http://www.w3.org/XML/1998/namespace}\"\n\t * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#Namespaces XML Namespaces},\n\t * or if the DOM implementation does not support the \"XML\" feature but a non-null namespace\n\t * URI was provided, since namespaces were defined by XML.\n\t * - `WRONG_DOCUMENT_ERR`: Raised if doctype has already been used with a different document\n\t * or was created from a different implementation.\n\t * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature\n\t * \"XML\" and the language exposed through the Document does not support XML Namespaces (such\n\t * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).\n\t * @since DOM Level 2.\n\t * @see {@link #createHTMLDocument}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument DOM Living Standard\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocument DOM\n\t *      Level 3 Core\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM\n\t *      Level 2 Core (initial)\n\t */ createDocument: function(namespaceURI, qualifiedName, doctype) {\n        var contentType = MIME_TYPE.XML_APPLICATION;\n        if (namespaceURI === NAMESPACE.HTML) {\n            contentType = MIME_TYPE.XML_XHTML_APPLICATION;\n        } else if (namespaceURI === NAMESPACE.SVG) {\n            contentType = MIME_TYPE.XML_SVG_IMAGE;\n        }\n        var doc = new Document(PDC, {\n            contentType: contentType\n        });\n        doc.implementation = this;\n        doc.childNodes = new NodeList();\n        doc.doctype = doctype || null;\n        if (doctype) {\n            doc.appendChild(doctype);\n        }\n        if (qualifiedName) {\n            var root = doc.createElementNS(namespaceURI, qualifiedName);\n            doc.appendChild(root);\n        }\n        return doc;\n    },\n    /**\n\t * Creates an empty DocumentType node. Entity declarations and notations are not made\n\t * available. Entity reference expansions and default attribute additions do not occur.\n\t *\n\t * **This behavior is slightly different from the one in the specs**:\n\t * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t * - `publicId` and `systemId` contain the raw data including any possible quotes,\n\t *   so they can always be serialized back to the original value\n\t * - `internalSubset` contains the raw string between `[` and `]` if present,\n\t *   but is not parsed or validated in any form.\n\t *\n\t * @function DOMImplementation#createDocumentType\n\t * @param {string} qualifiedName\n\t * The {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified\n\t * name} of the document type to be created.\n\t * @param {string} [publicId]\n\t * The external subset public identifier.\n\t * @param {string} [systemId]\n\t * The external subset system identifier.\n\t * @param {string} [internalSubset]\n\t * the internal subset or an empty string if it is not present\n\t * @returns {DocumentType}\n\t * A new {@link DocumentType} node with {@link Node#ownerDocument} set to null.\n\t * @throws {DOMException}\n\t * With code:\n\t *\n\t * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name\n\t * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.\n\t * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed.\n\t * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature\n\t * \"XML\" and the language exposed through the Document does not support XML Namespaces (such\n\t * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).\n\t * @since DOM Level 2.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType\n\t *      MDN\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living\n\t *      Standard\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-3-Core-DOM-createDocType DOM\n\t *      Level 3 Core\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM\n\t *      Level 2 Core\n\t * @see https://github.com/xmldom/xmldom/blob/master/CHANGELOG.md#050\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/#core-ID-Core-DocType-internalSubset\n\t * @prettierignore\n\t */ createDocumentType: function(qualifiedName, publicId, systemId, internalSubset) {\n        validateQualifiedName(qualifiedName);\n        var node = new DocumentType(PDC);\n        node.name = qualifiedName;\n        node.nodeName = qualifiedName;\n        node.publicId = publicId || \"\";\n        node.systemId = systemId || \"\";\n        node.internalSubset = internalSubset || \"\";\n        node.childNodes = new NodeList();\n        return node;\n    },\n    /**\n\t * Returns an HTML document, that might already have a basic DOM structure.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - If the first argument is `false` no initial nodes are added (steps 3-7 in the specs are\n\t * omitted)\n\t * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t *\n\t * @param {string | false} [title]\n\t * A string containing the title to give the new HTML document.\n\t * @returns {Document}\n\t * The HTML document.\n\t * @since WHATWG Living Standard.\n\t * @see {@link #createDocument}\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n\t * @see https://dom.spec.whatwg.org/#html-document\n\t */ createHTMLDocument: function(title) {\n        var doc = new Document(PDC, {\n            contentType: MIME_TYPE.HTML\n        });\n        doc.implementation = this;\n        doc.childNodes = new NodeList();\n        if (title !== false) {\n            doc.doctype = this.createDocumentType(\"html\");\n            doc.doctype.ownerDocument = doc;\n            doc.appendChild(doc.doctype);\n            var htmlNode = doc.createElement(\"html\");\n            doc.appendChild(htmlNode);\n            var headNode = doc.createElement(\"head\");\n            htmlNode.appendChild(headNode);\n            if (typeof title === \"string\") {\n                var titleNode = doc.createElement(\"title\");\n                titleNode.appendChild(doc.createTextNode(title));\n                headNode.appendChild(titleNode);\n            }\n            htmlNode.appendChild(doc.createElement(\"body\"));\n        }\n        return doc;\n    }\n};\n/**\n * The DOM Node interface is an abstract base class upon which many other DOM API objects are\n * based, thus letting those object types to be used similarly and often interchangeably. As an\n * abstract class, there is no such thing as a plain Node object. All objects that implement\n * Node functionality are based on one of its subclasses. Most notable are Document, Element,\n * and DocumentFragment.\n *\n * In addition, every kind of DOM node is represented by an interface based on Node. These\n * include Attr, CharacterData (which Text, Comment, CDATASection and ProcessingInstruction are\n * all based on), and DocumentType.\n *\n * In some cases, a particular feature of the base Node interface may not apply to one of its\n * child interfaces; in that case, the inheriting node may return null or throw an exception,\n * depending on circumstances. For example, attempting to add children to a node type that\n * cannot have children will throw an exception.\n *\n * **This behavior is slightly different from the in the specs**:\n * - unimplemented interfaces: `EventTarget`\n *\n * @class\n * @abstract\n * @param {Symbol} symbol\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n * @see https://dom.spec.whatwg.org/#node\n * @prettierignore\n */ function Node(symbol) {\n    checkSymbol(symbol);\n}\nNode.prototype = {\n    /**\n\t * The first child of this node.\n\t *\n\t * @type {Node | null}\n\t */ firstChild: null,\n    /**\n\t * The last child of this node.\n\t *\n\t * @type {Node | null}\n\t */ lastChild: null,\n    /**\n\t * The previous sibling of this node.\n\t *\n\t * @type {Node | null}\n\t */ previousSibling: null,\n    /**\n\t * The next sibling of this node.\n\t *\n\t * @type {Node | null}\n\t */ nextSibling: null,\n    /**\n\t * The parent node of this node.\n\t *\n\t * @type {Node | null}\n\t */ parentNode: null,\n    /**\n\t * The parent element of this node.\n\t *\n\t * @type {Element | null}\n\t */ get parentElement () {\n        return this.parentNode && this.parentNode.nodeType === this.ELEMENT_NODE ? this.parentNode : null;\n    },\n    /**\n\t * The child nodes of this node.\n\t *\n\t * @type {NodeList}\n\t */ childNodes: null,\n    /**\n\t * The document object associated with this node.\n\t *\n\t * @type {Document | null}\n\t */ ownerDocument: null,\n    /**\n\t * The value of this node.\n\t *\n\t * @type {string | null}\n\t */ nodeValue: null,\n    /**\n\t * The namespace URI of this node.\n\t *\n\t * @type {string | null}\n\t */ namespaceURI: null,\n    /**\n\t * The prefix of the namespace for this node.\n\t *\n\t * @type {string | null}\n\t */ prefix: null,\n    /**\n\t * The local part of the qualified name of this node.\n\t *\n\t * @type {string | null}\n\t */ localName: null,\n    /**\n\t * The baseURI is currently always `about:blank`,\n\t * since that's what happens when you create a document from scratch.\n\t *\n\t * @type {'about:blank'}\n\t */ baseURI: \"about:blank\",\n    /**\n\t * Is true if this node is part of a document.\n\t *\n\t * @type {boolean}\n\t */ get isConnected () {\n        var rootNode = this.getRootNode();\n        return rootNode && rootNode.nodeType === rootNode.DOCUMENT_NODE;\n    },\n    /**\n\t * Checks whether `other` is an inclusive descendant of this node.\n\t *\n\t * @param {Node | null | undefined} other\n\t * The node to check.\n\t * @returns {boolean}\n\t * True if `other` is an inclusive descendant of this node; false otherwise.\n\t * @see https://dom.spec.whatwg.org/#dom-node-contains\n\t */ contains: function(other) {\n        if (!other) return false;\n        var parent = other;\n        do {\n            if (this === parent) return true;\n            parent = other.parentNode;\n        }while (parent);\n        return false;\n    },\n    /**\n\t * @typedef GetRootNodeOptions\n\t * @property {boolean} [composed=false]\n\t */ /**\n\t * Searches for the root node of this node.\n\t *\n\t * **This behavior is slightly different from the in the specs**:\n\t * - ignores `options.composed`, since `ShadowRoot`s are unsupported, always returns root.\n\t *\n\t * @param {GetRootNodeOptions} [options]\n\t * @returns {Node}\n\t * Root node.\n\t * @see https://dom.spec.whatwg.org/#dom-node-getrootnode\n\t * @see https://dom.spec.whatwg.org/#concept-shadow-including-root\n\t */ getRootNode: function(options) {\n        var parent = this;\n        do {\n            if (!parent.parentNode) {\n                return parent;\n            }\n            parent = parent.parentNode;\n        }while (parent);\n    },\n    /**\n\t * Checks whether the given node is equal to this node.\n\t *\n\t * @param {Node} [otherNode]\n\t * @see https://dom.spec.whatwg.org/#concept-node-equals\n\t */ isEqualNode: function(otherNode) {\n        if (!otherNode) return false;\n        if (this.nodeType !== otherNode.nodeType) return false;\n        switch(this.nodeType){\n            case this.DOCUMENT_TYPE_NODE:\n                if (this.name !== otherNode.name) return false;\n                if (this.publicId !== otherNode.publicId) return false;\n                if (this.systemId !== otherNode.systemId) return false;\n                break;\n            case this.ELEMENT_NODE:\n                if (this.namespaceURI !== otherNode.namespaceURI) return false;\n                if (this.prefix !== otherNode.prefix) return false;\n                if (this.localName !== otherNode.localName) return false;\n                if (this.attributes.length !== otherNode.attributes.length) return false;\n                for(var i = 0; i < this.attributes.length; i++){\n                    var attr = this.attributes.item(i);\n                    if (!attr.isEqualNode(otherNode.getAttributeNodeNS(attr.namespaceURI, attr.localName))) {\n                        return false;\n                    }\n                }\n                break;\n            case this.ATTRIBUTE_NODE:\n                if (this.namespaceURI !== otherNode.namespaceURI) return false;\n                if (this.localName !== otherNode.localName) return false;\n                if (this.value !== otherNode.value) return false;\n                break;\n            case this.PROCESSING_INSTRUCTION_NODE:\n                if (this.target !== otherNode.target || this.data !== otherNode.data) {\n                    return false;\n                }\n                break;\n            case this.TEXT_NODE:\n            case this.COMMENT_NODE:\n                if (this.data !== otherNode.data) return false;\n                break;\n        }\n        if (this.childNodes.length !== otherNode.childNodes.length) {\n            return false;\n        }\n        for(var i = 0; i < this.childNodes.length; i++){\n            if (!this.childNodes[i].isEqualNode(otherNode.childNodes[i])) {\n                return false;\n            }\n        }\n        return true;\n    },\n    /**\n\t * Checks whether or not the given node is this node.\n\t *\n\t * @param {Node} [otherNode]\n\t */ isSameNode: function(otherNode) {\n        return this === otherNode;\n    },\n    /**\n\t * Inserts a node before a reference node as a child of this node.\n\t *\n\t * @param {Node} newChild\n\t * The new child node to be inserted.\n\t * @param {Node | null} refChild\n\t * The reference node before which newChild will be inserted.\n\t * @returns {Node}\n\t * The new child node successfully inserted.\n\t * @throws {DOMException}\n\t * Throws a DOMException if inserting the node would result in a DOM tree that is not\n\t * well-formed, or if `child` is provided but is not a child of `parent`.\n\t * See {@link _insertBefore} for more details.\n\t * @since Modified in DOM L2\n\t */ insertBefore: function(newChild, refChild) {\n        return _insertBefore(this, newChild, refChild);\n    },\n    /**\n\t * Replaces an old child node with a new child node within this node.\n\t *\n\t * @param {Node} newChild\n\t * The new node that is to replace the old node.\n\t * If it already exists in the DOM, it is removed from its original position.\n\t * @param {Node} oldChild\n\t * The existing child node to be replaced.\n\t * @returns {Node}\n\t * Returns the replaced child node.\n\t * @throws {DOMException}\n\t * Throws a DOMException if replacing the node would result in a DOM tree that is not\n\t * well-formed, or if `oldChild` is not a child of `this`.\n\t * This can also occur if the pre-replacement validity assertion fails.\n\t * See {@link _insertBefore}, {@link Node.removeChild}, and\n\t * {@link assertPreReplacementValidityInDocument} for more details.\n\t * @see https://dom.spec.whatwg.org/#concept-node-replace\n\t */ replaceChild: function(newChild, oldChild) {\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n    },\n    /**\n\t * Removes an existing child node from this node.\n\t *\n\t * @param {Node} oldChild\n\t * The child node to be removed.\n\t * @returns {Node}\n\t * Returns the removed child node.\n\t * @throws {DOMException}\n\t * Throws a DOMException if `oldChild` is not a child of `this`.\n\t * See {@link _removeChild} for more details.\n\t */ removeChild: function(oldChild) {\n        return _removeChild(this, oldChild);\n    },\n    /**\n\t * Appends a child node to this node.\n\t *\n\t * @param {Node} newChild\n\t * The child node to be appended to this node.\n\t * If it already exists in the DOM, it is removed from its original position.\n\t * @returns {Node}\n\t * Returns the appended child node.\n\t * @throws {DOMException}\n\t * Throws a DOMException if appending the node would result in a DOM tree that is not\n\t * well-formed, or if `newChild` is not a valid Node.\n\t * See {@link insertBefore} for more details.\n\t */ appendChild: function(newChild) {\n        return this.insertBefore(newChild, null);\n    },\n    /**\n\t * Determines whether this node has any child nodes.\n\t *\n\t * @returns {boolean}\n\t * Returns true if this node has any child nodes, and false otherwise.\n\t */ hasChildNodes: function() {\n        return this.firstChild != null;\n    },\n    /**\n\t * Creates a copy of the calling node.\n\t *\n\t * @param {boolean} deep\n\t * If true, the contents of the node are recursively copied.\n\t * If false, only the node itself (and its attributes, if it is an element) are copied.\n\t * @returns {Node}\n\t * Returns the newly created copy of the node.\n\t * @throws {DOMException}\n\t * May throw a DOMException if operations within {@link Element#setAttributeNode} or\n\t * {@link Node#appendChild} (which are potentially invoked in this method) do not meet their\n\t * specific constraints.\n\t * @see {@link cloneNode}\n\t */ cloneNode: function(deep) {\n        return cloneNode(this.ownerDocument || this, this, deep);\n    },\n    /**\n\t * Puts the specified node and all of its subtree into a \"normalized\" form. In a normalized\n\t * subtree, no text nodes in the subtree are empty and there are no adjacent text nodes.\n\t *\n\t * Specifically, this method merges any adjacent text nodes (i.e., nodes for which `nodeType`\n\t * is `TEXT_NODE`) into a single node with the combined data. It also removes any empty text\n\t * nodes.\n\t *\n\t * This method operates recursively, so it also normalizes any and all descendent nodes within\n\t * the subtree.\n\t *\n\t * @throws {DOMException}\n\t * May throw a DOMException if operations within removeChild or appendData (which are\n\t * potentially invoked in this method) do not meet their specific constraints.\n\t * @since Modified in DOM Level 2\n\t * @see {@link Node.removeChild}\n\t * @see {@link CharacterData.appendData}\n\t */ normalize: function() {\n        var child = this.firstChild;\n        while(child){\n            var next = child.nextSibling;\n            if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n                this.removeChild(next);\n                child.appendData(next.data);\n            } else {\n                child.normalize();\n                child = next;\n            }\n        }\n    },\n    /**\n\t * Checks whether the DOM implementation implements a specific feature and its version.\n\t *\n\t * @deprecated\n\t * Since `DOMImplementation.hasFeature` is deprecated and always returns true.\n\t * @param {string} feature\n\t * The package name of the feature to test. This is the same name that can be passed to the\n\t * method `hasFeature` on `DOMImplementation`.\n\t * @param {string} version\n\t * This is the version number of the package name to test.\n\t * @returns {boolean}\n\t * Returns true in all cases in the current implementation.\n\t * @since Introduced in DOM Level 2\n\t * @see {@link DOMImplementation.hasFeature}\n\t */ isSupported: function(feature, version) {\n        return this.ownerDocument.implementation.hasFeature(feature, version);\n    },\n    /**\n\t * Look up the prefix associated to the given namespace URI, starting from this node.\n\t * **The default namespace declarations are ignored by this method.**\n\t * See Namespace Prefix Lookup for details on the algorithm used by this method.\n\t *\n\t * **This behavior is different from the in the specs**:\n\t * - no node type specific handling\n\t * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes\n\t *\n\t * @param {string | null} namespaceURI\n\t * The namespace URI for which to find the associated prefix.\n\t * @returns {string | null}\n\t * The associated prefix, if found; otherwise, null.\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\n\t * @see https://github.com/xmldom/xmldom/issues/322\n\t * @prettierignore\n\t */ lookupPrefix: function(namespaceURI) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                for(var n in map){\n                    if (hasOwn(map, n) && map[n] === namespaceURI) {\n                        return n;\n                    }\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    /**\n\t * This function is used to look up the namespace URI associated with the given prefix,\n\t * starting from this node.\n\t *\n\t * **This behavior is different from the in the specs**:\n\t * - no node type specific handling\n\t * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes\n\t *\n\t * @param {string | null} prefix\n\t * The prefix for which to find the associated namespace URI.\n\t * @returns {string | null}\n\t * The associated namespace URI, if found; otherwise, null.\n\t * @since DOM Level 3\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI\n\t * @prettierignore\n\t */ lookupNamespaceURI: function(prefix) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                if (hasOwn(map, prefix)) {\n                    return map[prefix];\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    /**\n\t * Determines whether the given namespace URI is the default namespace.\n\t *\n\t * The function works by looking up the prefix associated with the given namespace URI. If no\n\t * prefix is found (i.e., the namespace URI is not registered in the namespace map of this\n\t * node or any of its ancestors), it returns `true`, implying the namespace URI is considered\n\t * the default.\n\t *\n\t * **This behavior is different from the in the specs**:\n\t * - no node type specific handling\n\t * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes\n\t *\n\t * @param {string | null} namespaceURI\n\t * The namespace URI to be checked.\n\t * @returns {boolean}\n\t * Returns true if the given namespace URI is the default namespace, false otherwise.\n\t * @since DOM Level 3\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace\n\t * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace\n\t * @prettierignore\n\t */ isDefaultNamespace: function(namespaceURI) {\n        var prefix = this.lookupPrefix(namespaceURI);\n        return prefix == null;\n    },\n    /**\n\t * Compares the reference node with a node with regard to their position in the document and\n\t * according to the document order.\n\t *\n\t * @param {Node} other\n\t * The node to compare the reference node to.\n\t * @returns {number}\n\t * Returns how the node is positioned relatively to the reference node according to the\n\t * bitmask. 0 if reference node and given node are the same.\n\t * @since DOM Level 3\n\t * @see https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-compare\n\t * @see https://dom.spec.whatwg.org/#dom-node-comparedocumentposition\n\t */ compareDocumentPosition: function(other) {\n        if (this === other) return 0;\n        var node1 = other;\n        var node2 = this;\n        var attr1 = null;\n        var attr2 = null;\n        if (node1 instanceof Attr) {\n            attr1 = node1;\n            node1 = attr1.ownerElement;\n        }\n        if (node2 instanceof Attr) {\n            attr2 = node2;\n            node2 = attr2.ownerElement;\n            if (attr1 && node1 && node2 === node1) {\n                for(var i = 0, attr; attr = node2.attributes[i]; i++){\n                    if (attr === attr1) return DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + DocumentPosition.DOCUMENT_POSITION_PRECEDING;\n                    if (attr === attr2) return DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + DocumentPosition.DOCUMENT_POSITION_FOLLOWING;\n                }\n            }\n        }\n        if (!node1 || !node2 || node2.ownerDocument !== node1.ownerDocument) {\n            return DocumentPosition.DOCUMENT_POSITION_DISCONNECTED + DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + (docGUID(node2.ownerDocument) > docGUID(node1.ownerDocument) ? DocumentPosition.DOCUMENT_POSITION_FOLLOWING : DocumentPosition.DOCUMENT_POSITION_PRECEDING);\n        }\n        if (attr2 && node1 === node2) {\n            return DocumentPosition.DOCUMENT_POSITION_CONTAINS + DocumentPosition.DOCUMENT_POSITION_PRECEDING;\n        }\n        if (attr1 && node1 === node2) {\n            return DocumentPosition.DOCUMENT_POSITION_CONTAINED_BY + DocumentPosition.DOCUMENT_POSITION_FOLLOWING;\n        }\n        var chain1 = [];\n        var ancestor1 = node1.parentNode;\n        while(ancestor1){\n            if (!attr2 && ancestor1 === node2) {\n                return DocumentPosition.DOCUMENT_POSITION_CONTAINED_BY + DocumentPosition.DOCUMENT_POSITION_FOLLOWING;\n            }\n            chain1.push(ancestor1);\n            ancestor1 = ancestor1.parentNode;\n        }\n        chain1.reverse();\n        var chain2 = [];\n        var ancestor2 = node2.parentNode;\n        while(ancestor2){\n            if (!attr1 && ancestor2 === node1) {\n                return DocumentPosition.DOCUMENT_POSITION_CONTAINS + DocumentPosition.DOCUMENT_POSITION_PRECEDING;\n            }\n            chain2.push(ancestor2);\n            ancestor2 = ancestor2.parentNode;\n        }\n        chain2.reverse();\n        var ca = commonAncestor(chain1, chain2);\n        for(var n in ca.childNodes){\n            var child = ca.childNodes[n];\n            if (child === node2) return DocumentPosition.DOCUMENT_POSITION_FOLLOWING;\n            if (child === node1) return DocumentPosition.DOCUMENT_POSITION_PRECEDING;\n            if (chain2.indexOf(child) >= 0) return DocumentPosition.DOCUMENT_POSITION_FOLLOWING;\n            if (chain1.indexOf(child) >= 0) return DocumentPosition.DOCUMENT_POSITION_PRECEDING;\n        }\n        return 0;\n    }\n};\n/**\n * Encodes special XML characters to their corresponding entities.\n *\n * @param {string} c\n * The character to be encoded.\n * @returns {string}\n * The encoded character.\n * @private\n */ function _xmlEncoder(c) {\n    return c == \"<\" && \"&lt;\" || c == \">\" && \"&gt;\" || c == \"&\" && \"&amp;\" || c == '\"' && \"&quot;\" || \"&#\" + c.charCodeAt() + \";\";\n}\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\ncopy(DocumentPosition, Node);\ncopy(DocumentPosition, Node.prototype);\n/**\n * @param callback\n * Return true for continue,false for break.\n * @returns\n * boolean true: break visit;\n */ function _visitNode(node, callback) {\n    if (callback(node)) {\n        return true;\n    }\n    if (node = node.firstChild) {\n        do {\n            if (_visitNode(node, callback)) {\n                return true;\n            }\n        }while (node = node.nextSibling);\n    }\n}\n/**\n * @typedef DocumentOptions\n * @property {string} [contentType=MIME_TYPE.XML_APPLICATION]\n */ /**\n * The Document interface describes the common properties and methods for any kind of document.\n *\n * It should usually be created using `new DOMImplementation().createDocument(...)`\n * or `new DOMImplementation().createHTMLDocument(...)`.\n *\n * The constructor is considered a private API and offers to initially set the `contentType`\n * property via it's options parameter.\n *\n * @class\n * @param {Symbol} symbol\n * @param {DocumentOptions} [options]\n * @augments Node\n * @private\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document\n * @see https://dom.spec.whatwg.org/#interface-document\n */ function Document(symbol, options) {\n    checkSymbol(symbol);\n    var opt = options || {};\n    this.ownerDocument = this;\n    /**\n\t * The mime type of the document is determined at creation time and can not be modified.\n\t *\n\t * @type {string}\n\t * @see https://dom.spec.whatwg.org/#concept-document-content-type\n\t * @see {@link DOMImplementation}\n\t * @see {@link MIME_TYPE}\n\t * @readonly\n\t */ this.contentType = opt.contentType || MIME_TYPE.XML_APPLICATION;\n    /**\n\t * @type {'html' | 'xml'}\n\t * @see https://dom.spec.whatwg.org/#concept-document-type\n\t * @see {@link DOMImplementation}\n\t * @readonly\n\t */ this.type = isHTMLMimeType(this.contentType) ? \"html\" : \"xml\";\n}\n/**\n * Updates the namespace mapping of an element when a new attribute is added.\n *\n * @param {Document} doc\n * The document that the element belongs to.\n * @param {Element} el\n * The element to which the attribute is being added.\n * @param {Attr} newAttr\n * The new attribute being added.\n * @private\n */ function _onAddAttribute(doc, el, newAttr) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        el._nsMap[newAttr.prefix ? newAttr.localName : \"\"] = newAttr.value;\n    }\n}\n/**\n * Updates the namespace mapping of an element when an attribute is removed.\n *\n * @param {Document} doc\n * The document that the element belongs to.\n * @param {Element} el\n * The element from which the attribute is being removed.\n * @param {Attr} newAttr\n * The attribute being removed.\n * @param {boolean} remove\n * Indicates whether the attribute is to be removed.\n * @private\n */ function _onRemoveAttribute(doc, el, newAttr, remove) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        delete el._nsMap[newAttr.prefix ? newAttr.localName : \"\"];\n    }\n}\n/**\n * Updates `parent.childNodes`, adjusting the indexed items and its `length`.\n * If `newChild` is provided and has no nextSibling, it will be appended.\n * Otherwise, it's assumed that an item has been removed or inserted,\n * and `parent.firstNode` and its `.nextSibling` to re-indexing all child nodes of `parent`.\n *\n * @param {Document} doc\n * The parent document of `el`.\n * @param {Node} parent\n * The parent node whose childNodes list needs to be updated.\n * @param {Node} [newChild]\n * The new child node to be appended. If not provided, the function assumes a node has been\n * removed.\n * @private\n */ function _onUpdateChild(doc, parent, newChild) {\n    if (doc && doc._inc) {\n        doc._inc++;\n        var childNodes = parent.childNodes;\n        // assumes nextSibling and previousSibling were already configured upfront\n        if (newChild && !newChild.nextSibling) {\n            // if an item has been appended, we only need to update the last index and the length\n            childNodes[childNodes.length++] = newChild;\n        } else {\n            // otherwise we need to reindex all items,\n            // which can take a while when processing nodes with a lot of children\n            var child = parent.firstChild;\n            var i = 0;\n            while(child){\n                childNodes[i++] = child;\n                child = child.nextSibling;\n            }\n            childNodes.length = i;\n            delete childNodes[childNodes.length];\n        }\n    }\n}\n/**\n * Removes the connections between `parentNode` and `child`\n * and any existing `child.previousSibling` or `child.nextSibling`.\n *\n * @param {Node} parentNode\n * The parent node from which the child node is to be removed.\n * @param {Node} child\n * The child node to be removed from the parentNode.\n * @returns {Node}\n * Returns the child node that was removed.\n * @throws {DOMException}\n * With code:\n * - {@link DOMException.NOT_FOUND_ERR} If the parentNode is not the parent of the child node.\n * @private\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n */ function _removeChild(parentNode, child) {\n    if (parentNode !== child.parentNode) {\n        throw new DOMException(DOMException.NOT_FOUND_ERR, \"child's parent is not parent\");\n    }\n    var oldPreviousSibling = child.previousSibling;\n    var oldNextSibling = child.nextSibling;\n    if (oldPreviousSibling) {\n        oldPreviousSibling.nextSibling = oldNextSibling;\n    } else {\n        parentNode.firstChild = oldNextSibling;\n    }\n    if (oldNextSibling) {\n        oldNextSibling.previousSibling = oldPreviousSibling;\n    } else {\n        parentNode.lastChild = oldPreviousSibling;\n    }\n    _onUpdateChild(parentNode.ownerDocument, parentNode);\n    child.parentNode = null;\n    child.previousSibling = null;\n    child.nextSibling = null;\n    return child;\n}\n/**\n * Returns `true` if `node` can be a parent for insertion.\n *\n * @param {Node} node\n * @returns {boolean}\n */ function hasValidParentNodeType(node) {\n    return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);\n}\n/**\n * Returns `true` if `node` can be inserted according to it's `nodeType`.\n *\n * @param {Node} node\n * @returns {boolean}\n */ function hasInsertableNodeType(node) {\n    return node && (node.nodeType === Node.CDATA_SECTION_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.DOCUMENT_TYPE_NODE || node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE || node.nodeType === Node.TEXT_NODE);\n}\n/**\n * Returns true if `node` is a DOCTYPE node.\n *\n * @param {Node} node\n * @returns {boolean}\n */ function isDocTypeNode(node) {\n    return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\n}\n/**\n * Returns true if the node is an element.\n *\n * @param {Node} node\n * @returns {boolean}\n */ function isElementNode(node) {\n    return node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Returns true if `node` is a text node.\n *\n * @param {Node} node\n * @returns {boolean}\n */ function isTextNode(node) {\n    return node && node.nodeType === Node.TEXT_NODE;\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Document} doc\n * The document node.\n * @param {Node} child\n * The node that would become the nextSibling if the element would be inserted.\n * @returns {boolean}\n * `true` if an element can be inserted before child.\n * @private\n */ function isElementInsertionPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Node} doc\n * The document node.\n * @param {Node} child\n * The node that would become the nextSibling if the element would be inserted.\n * @returns {boolean}\n * `true` if an element can be inserted before child.\n * @private\n */ function isElementReplacementPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    function hasElementChildThatIsNotChild(node) {\n        return isElementNode(node) && node !== child;\n    }\n    if (find(parentChildNodes, hasElementChildThatIsNotChild)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * Asserts pre-insertion validity of a node into a parent before a child.\n * Throws errors for invalid node combinations that would result in an ill-formed DOM.\n *\n * @param {Node} parent\n * The parent node to insert `node` into.\n * @param {Node} node\n * The node to insert.\n * @param {Node | null} child\n * The node that should become the `nextSibling` of `node`. If null, no sibling is considered.\n * @throws {DOMException}\n * With code:\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `parent` is not a Document,\n * DocumentFragment, or Element node.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is a host-including inclusive\n * ancestor of `parent`. (Currently not implemented)\n * - {@link DOMException.NOT_FOUND_ERR} If `child` is non-null and its `parent` is not\n * `parent`.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is not a DocumentFragment,\n * DocumentType, Element, or CharacterData node.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If either `node` is a Text node and `parent` is\n * a document, or if `node` is a doctype and `parent` is not a document.\n * @private\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidity1to5(parent, node, child) {\n    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\n    if (!hasValidParentNodeType(parent)) {\n        throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Unexpected parent node type \" + parent.nodeType);\n    }\n    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\n    // not implemented!\n    // 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\n    if (child && child.parentNode !== parent) {\n        throw new DOMException(DOMException.NOT_FOUND_ERR, \"child not in parent\");\n    }\n    if (// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\n    !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,\n    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\n    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\n    // or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\n    isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE) {\n        throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Unexpected node type \" + node.nodeType + \" for parent node type \" + parent.nodeType);\n    }\n}\n/**\n * Asserts pre-insertion validity of a node into a document before a child.\n * Throws errors for invalid node combinations that would result in an ill-formed DOM.\n *\n * @param {Document} parent\n * The parent node to insert `node` into.\n * @param {Node} node\n * The node to insert.\n * @param {Node | undefined} child\n * The node that should become the `nextSibling` of `node`. If undefined, no sibling is\n * considered.\n * @returns {Node}\n * @throws {DOMException}\n * With code:\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is a DocumentFragment with more than\n * one element child or has a Text node child.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is a DocumentFragment with one\n * element child and either `parent` has an element child, `child` is a doctype, or `child` is\n * non-null and a doctype is following `child`.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is an Element and `parent` has an\n * element child, `child` is a doctype, or `child` is non-null and a doctype is following\n * `child`.\n * - {@link DOMException.HIERARCHY_REQUEST_ERR} If `node` is a DocumentType and `parent` has a\n * doctype child, `child` is non-null and an element is preceding `child`, or `child` is null\n * and `parent` has an element child.\n * @private\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If node has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child,\n        // `child` is a doctype, or `child` is non-null and a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child, `child` is a doctype,\n        // or `child` is non-null and a doctype is following `child`.\n        if (!isElementInsertionPossible(parent, child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        // `parent` has a doctype child,\n        if (find(parentChildNodes, isDocTypeNode)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // `child` is non-null and an element is preceding `child`,\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n        // or `child` is null and `parent` has an element child.\n        if (!child && parentElementChild) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Doctype can not be appended since element is present\");\n        }\n    }\n}\n/**\n * @param {Document} parent\n * The parent node to insert `node` into.\n * @param {Node} node\n * The node to insert.\n * @param {Node | undefined} child\n * the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws {DOMException}\n * For several node combinations that would create a DOM that is not well-formed.\n * @throws {DOMException}\n * If `child` is provided but is not a child of `parent`.\n * @private\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreReplacementValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If `node` has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (!isElementReplacementPossible(parent, child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        function hasDoctypeChildThatIsNotChild(node) {\n            return isDocTypeNode(node) && node !== child;\n        }\n        // `parent` has a doctype child that is not `child`,\n        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // or an element is preceding `child`.\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n    }\n}\n/**\n * Inserts a node into a parent node before a child node.\n *\n * @param {Node} parent\n * The parent node to insert the node into.\n * @param {Node} node\n * The node to insert into the parent.\n * @param {Node | null} child\n * The node that should become the next sibling of the node.\n * If null, the function inserts the node at the end of the children of the parent node.\n * @param {Function} [_inDocumentAssertion]\n * An optional function to check pre-insertion validity if parent is a document node.\n * Defaults to {@link assertPreInsertionValidityInDocument}\n * @returns {Node}\n * Returns the inserted node.\n * @throws {DOMException}\n * Throws a DOMException if inserting the node would result in a DOM tree that is not\n * well-formed. See {@link assertPreInsertionValidity1to5},\n * {@link assertPreInsertionValidityInDocument}.\n * @throws {DOMException}\n * Throws a DOMException if child is provided but is not a child of the parent. See\n * {@link Node.removeChild}\n * @private\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function _insertBefore(parent, node, child, _inDocumentAssertion) {\n    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:\n    assertPreInsertionValidity1to5(parent, node, child);\n    // If parent is a document, and any of the statements below, switched on the interface node implements,\n    // are true, then throw a \"HierarchyRequestError\" DOMException.\n    if (parent.nodeType === Node.DOCUMENT_NODE) {\n        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\n    }\n    var cp = node.parentNode;\n    if (cp) {\n        cp.removeChild(node); //remove and update\n    }\n    if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n        var newFirst = node.firstChild;\n        if (newFirst == null) {\n            return node;\n        }\n        var newLast = node.lastChild;\n    } else {\n        newFirst = newLast = node;\n    }\n    var pre = child ? child.previousSibling : parent.lastChild;\n    newFirst.previousSibling = pre;\n    newLast.nextSibling = child;\n    if (pre) {\n        pre.nextSibling = newFirst;\n    } else {\n        parent.firstChild = newFirst;\n    }\n    if (child == null) {\n        parent.lastChild = newLast;\n    } else {\n        child.previousSibling = newLast;\n    }\n    do {\n        newFirst.parentNode = parent;\n    }while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n    _onUpdateChild(parent.ownerDocument || parent, parent, node);\n    if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\n        node.firstChild = node.lastChild = null;\n    }\n    return node;\n}\nDocument.prototype = {\n    /**\n\t * The implementation that created this document.\n\t *\n\t * @type DOMImplementation\n\t * @readonly\n\t */ implementation: null,\n    nodeName: \"#document\",\n    nodeType: DOCUMENT_NODE,\n    /**\n\t * The DocumentType node of the document.\n\t *\n\t * @type DocumentType\n\t * @readonly\n\t */ doctype: null,\n    documentElement: null,\n    _inc: 1,\n    insertBefore: function(newChild, refChild) {\n        //raises\n        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            var child = newChild.firstChild;\n            while(child){\n                var next = child.nextSibling;\n                this.insertBefore(child, refChild);\n                child = next;\n            }\n            return newChild;\n        }\n        _insertBefore(this, newChild, refChild);\n        newChild.ownerDocument = this;\n        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\n            this.documentElement = newChild;\n        }\n        return newChild;\n    },\n    removeChild: function(oldChild) {\n        var removed = _removeChild(this, oldChild);\n        if (removed === this.documentElement) {\n            this.documentElement = null;\n        }\n        return removed;\n    },\n    replaceChild: function(newChild, oldChild) {\n        //raises\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        newChild.ownerDocument = this;\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n        if (isElementNode(newChild)) {\n            this.documentElement = newChild;\n        }\n    },\n    // Introduced in DOM Level 2:\n    importNode: function(importedNode, deep) {\n        return importNode(this, importedNode, deep);\n    },\n    // Introduced in DOM Level 2:\n    getElementById: function(id) {\n        var rtv = null;\n        _visitNode(this.documentElement, function(node) {\n            if (node.nodeType == ELEMENT_NODE) {\n                if (node.getAttribute(\"id\") == id) {\n                    rtv = node;\n                    return true;\n                }\n            }\n        });\n        return rtv;\n    },\n    /**\n\t * Creates a new `Element` that is owned by this `Document`.\n\t * In HTML Documents `localName` is the lower cased `tagName`,\n\t * otherwise no transformation is being applied.\n\t * When `contentType` implies the HTML namespace, it will be set as `namespaceURI`.\n\t *\n\t * __This implementation differs from the specification:__ - The provided name is not checked\n\t * against the `Name` production,\n\t * so no related error will be thrown.\n\t * - There is no interface `HTMLElement`, it is always an `Element`.\n\t * - There is no support for a second argument to indicate using custom elements.\n\t *\n\t * @param {string} tagName\n\t * @returns {Element}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\n\t * @see https://dom.spec.whatwg.org/#dom-document-createelement\n\t * @see https://dom.spec.whatwg.org/#concept-create-element\n\t */ createElement: function(tagName) {\n        var node = new Element(PDC);\n        node.ownerDocument = this;\n        if (this.type === \"html\") {\n            tagName = tagName.toLowerCase();\n        }\n        if (hasDefaultHTMLNamespace(this.contentType)) {\n            node.namespaceURI = NAMESPACE.HTML;\n        }\n        node.nodeName = tagName;\n        node.tagName = tagName;\n        node.localName = tagName;\n        node.childNodes = new NodeList();\n        var attrs = node.attributes = new NamedNodeMap();\n        attrs._ownerElement = node;\n        return node;\n    },\n    /**\n\t * @returns {DocumentFragment}\n\t */ createDocumentFragment: function() {\n        var node = new DocumentFragment(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        return node;\n    },\n    /**\n\t * @param {string} data\n\t * @returns {Text}\n\t */ createTextNode: function(data) {\n        var node = new Text(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.appendData(data);\n        return node;\n    },\n    /**\n\t * @param {string} data\n\t * @returns {Comment}\n\t */ createComment: function(data) {\n        var node = new Comment(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.appendData(data);\n        return node;\n    },\n    /**\n\t * @param {string} data\n\t * @returns {CDATASection}\n\t */ createCDATASection: function(data) {\n        var node = new CDATASection(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.appendData(data);\n        return node;\n    },\n    /**\n\t * @param {string} target\n\t * @param {string} data\n\t * @returns {ProcessingInstruction}\n\t */ createProcessingInstruction: function(target, data) {\n        var node = new ProcessingInstruction(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.nodeName = node.target = target;\n        node.nodeValue = node.data = data;\n        return node;\n    },\n    /**\n\t * Creates an `Attr` node that is owned by this document.\n\t * In HTML Documents `localName` is the lower cased `name`,\n\t * otherwise no transformation is being applied.\n\t *\n\t * __This implementation differs from the specification:__ - The provided name is not checked\n\t * against the `Name` production,\n\t * so no related error will be thrown.\n\t *\n\t * @param {string} name\n\t * @returns {Attr}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute\n\t * @see https://dom.spec.whatwg.org/#dom-document-createattribute\n\t */ createAttribute: function(name) {\n        if (!g.QName_exact.test(name)) {\n            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'invalid character in name \"' + name + '\"');\n        }\n        if (this.type === \"html\") {\n            name = name.toLowerCase();\n        }\n        return this._createAttribute(name);\n    },\n    _createAttribute: function(name) {\n        var node = new Attr(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.name = name;\n        node.nodeName = name;\n        node.localName = name;\n        node.specified = true;\n        return node;\n    },\n    /**\n\t * Creates an EntityReference object.\n\t * The current implementation does not fill the `childNodes` with those of the corresponding\n\t * `Entity`\n\t *\n\t * @deprecated\n\t * In DOM Level 4.\n\t * @param {string} name\n\t * The name of the entity to reference. No namespace well-formedness checks are performed.\n\t * @returns {EntityReference}\n\t * @throws {DOMException}\n\t * With code `INVALID_CHARACTER_ERR` when `name` is not valid.\n\t * @throws {DOMException}\n\t * with code `NOT_SUPPORTED_ERR` when the document is of type `html`\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-392B75AE\n\t */ createEntityReference: function(name) {\n        if (!g.Name.test(name)) {\n            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'not a valid xml name \"' + name + '\"');\n        }\n        if (this.type === \"html\") {\n            throw new DOMException(\"document is an html document\", DOMExceptionName.NotSupportedError);\n        }\n        var node = new EntityReference(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.nodeName = name;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    /**\n\t * @param {string} namespaceURI\n\t * @param {string} qualifiedName\n\t * @returns {Element}\n\t */ createElementNS: function(namespaceURI, qualifiedName) {\n        var validated = validateAndExtract(namespaceURI, qualifiedName);\n        var node = new Element(PDC);\n        var attrs = node.attributes = new NamedNodeMap();\n        node.childNodes = new NodeList();\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.tagName = qualifiedName;\n        node.namespaceURI = validated[0];\n        node.prefix = validated[1];\n        node.localName = validated[2];\n        attrs._ownerElement = node;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    /**\n\t * @param {string} namespaceURI\n\t * @param {string} qualifiedName\n\t * @returns {Attr}\n\t */ createAttributeNS: function(namespaceURI, qualifiedName) {\n        var validated = validateAndExtract(namespaceURI, qualifiedName);\n        var node = new Attr(PDC);\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        node.nodeName = qualifiedName;\n        node.name = qualifiedName;\n        node.specified = true;\n        node.namespaceURI = validated[0];\n        node.prefix = validated[1];\n        node.localName = validated[2];\n        return node;\n    }\n};\n_extends(Document, Node);\nfunction Element(symbol) {\n    checkSymbol(symbol);\n    this._nsMap = Object.create(null);\n}\nElement.prototype = {\n    nodeType: ELEMENT_NODE,\n    /**\n\t * The attributes of this element.\n\t *\n\t * @type {NamedNodeMap | null}\n\t */ attributes: null,\n    getQualifiedName: function() {\n        return this.prefix ? this.prefix + \":\" + this.localName : this.localName;\n    },\n    _isInHTMLDocumentAndNamespace: function() {\n        return this.ownerDocument.type === \"html\" && this.namespaceURI === NAMESPACE.HTML;\n    },\n    /**\n\t * Implementaton of Level2 Core function hasAttributes.\n\t *\n\t * @returns {boolean}\n\t * True if attribute list is not empty.\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/#core-ID-NodeHasAttrs\n\t */ hasAttributes: function() {\n        return !!(this.attributes && this.attributes.length);\n    },\n    hasAttribute: function(name) {\n        return !!this.getAttributeNode(name);\n    },\n    /**\n\t * Returns element’s first attribute whose qualified name is `name`, and `null`\n\t * if there is no such attribute.\n\t *\n\t * @param {string} name\n\t * @returns {string | null}\n\t */ getAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        return attr ? attr.value : null;\n    },\n    getAttributeNode: function(name) {\n        if (this._isInHTMLDocumentAndNamespace()) {\n            name = name.toLowerCase();\n        }\n        return this.attributes.getNamedItem(name);\n    },\n    /**\n\t * Sets the value of element’s first attribute whose qualified name is qualifiedName to value.\n\t *\n\t * @param {string} name\n\t * @param {string} value\n\t */ setAttribute: function(name, value) {\n        if (this._isInHTMLDocumentAndNamespace()) {\n            name = name.toLowerCase();\n        }\n        var attr = this.getAttributeNode(name);\n        if (attr) {\n            attr.value = attr.nodeValue = \"\" + value;\n        } else {\n            attr = this.ownerDocument._createAttribute(name);\n            attr.value = attr.nodeValue = \"\" + value;\n            this.setAttributeNode(attr);\n        }\n    },\n    removeAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        attr && this.removeAttributeNode(attr);\n    },\n    setAttributeNode: function(newAttr) {\n        return this.attributes.setNamedItem(newAttr);\n    },\n    setAttributeNodeNS: function(newAttr) {\n        return this.attributes.setNamedItemNS(newAttr);\n    },\n    removeAttributeNode: function(oldAttr) {\n        //console.log(this == oldAttr.ownerElement)\n        return this.attributes.removeNamedItem(oldAttr.nodeName);\n    },\n    //get real attribute name,and remove it by removeAttributeNode\n    removeAttributeNS: function(namespaceURI, localName) {\n        var old = this.getAttributeNodeNS(namespaceURI, localName);\n        old && this.removeAttributeNode(old);\n    },\n    hasAttributeNS: function(namespaceURI, localName) {\n        return this.getAttributeNodeNS(namespaceURI, localName) != null;\n    },\n    /**\n\t * Returns element’s attribute whose namespace is `namespaceURI` and local name is\n\t * `localName`,\n\t * or `null` if there is no such attribute.\n\t *\n\t * @param {string} namespaceURI\n\t * @param {string} localName\n\t * @returns {string | null}\n\t */ getAttributeNS: function(namespaceURI, localName) {\n        var attr = this.getAttributeNodeNS(namespaceURI, localName);\n        return attr ? attr.value : null;\n    },\n    /**\n\t * Sets the value of element’s attribute whose namespace is `namespaceURI` and local name is\n\t * `localName` to value.\n\t *\n\t * @param {string} namespaceURI\n\t * @param {string} qualifiedName\n\t * @param {string} value\n\t * @see https://dom.spec.whatwg.org/#dom-element-setattributens\n\t */ setAttributeNS: function(namespaceURI, qualifiedName, value) {\n        var validated = validateAndExtract(namespaceURI, qualifiedName);\n        var localName = validated[2];\n        var attr = this.getAttributeNodeNS(namespaceURI, localName);\n        if (attr) {\n            attr.value = attr.nodeValue = \"\" + value;\n        } else {\n            attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n            attr.value = attr.nodeValue = \"\" + value;\n            this.setAttributeNode(attr);\n        }\n    },\n    getAttributeNodeNS: function(namespaceURI, localName) {\n        return this.attributes.getNamedItemNS(namespaceURI, localName);\n    },\n    /**\n\t * Returns a LiveNodeList of all child elements which have **all** of the given class name(s).\n\t *\n\t * Returns an empty list if `classNames` is an empty string or only contains HTML white space\n\t * characters.\n\t *\n\t * Warning: This returns a live LiveNodeList.\n\t * Changes in the DOM will reflect in the array as the changes occur.\n\t * If an element selected by this array no longer qualifies for the selector,\n\t * it will automatically be removed. Be aware of this for iteration purposes.\n\t *\n\t * @param {string} classNames\n\t * Is a string representing the class name(s) to match; multiple class names are separated by\n\t * (ASCII-)whitespace.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\n\t */ getElementsByClassName: function(classNames) {\n        var classNamesSet = toOrderedSet(classNames);\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            if (classNamesSet.length > 0) {\n                _visitNode(base, function(node) {\n                    if (node !== base && node.nodeType === ELEMENT_NODE) {\n                        var nodeClassNames = node.getAttribute(\"class\");\n                        // can be null if the attribute does not exist\n                        if (nodeClassNames) {\n                            // before splitting and iterating just compare them for the most common case\n                            var matches = classNames === nodeClassNames;\n                            if (!matches) {\n                                var nodeClassNamesSet = toOrderedSet(nodeClassNames);\n                                matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));\n                            }\n                            if (matches) {\n                                ls.push(node);\n                            }\n                        }\n                    }\n                });\n            }\n            return ls;\n        });\n    },\n    /**\n\t * Returns a LiveNodeList of elements with the given qualifiedName.\n\t * Searching for all descendants can be done by passing `*` as `qualifiedName`.\n\t *\n\t * All descendants of the specified element are searched, but not the element itself.\n\t * The returned list is live, which means it updates itself with the DOM tree automatically.\n\t * Therefore, there is no need to call `Element.getElementsByTagName()`\n\t * with the same element and arguments repeatedly if the DOM changes in between calls.\n\t *\n\t * When called on an HTML element in an HTML document,\n\t * `getElementsByTagName` lower-cases the argument before searching for it.\n\t * This is undesirable when trying to match camel-cased SVG elements (such as\n\t * `<linearGradient>`) in an HTML document.\n\t * Instead, use `Element.getElementsByTagNameNS()`,\n\t * which preserves the capitalization of the tag name.\n\t *\n\t * `Element.getElementsByTagName` is similar to `Document.getElementsByTagName()`,\n\t * except that it only searches for elements that are descendants of the specified element.\n\t *\n\t * @param {string} qualifiedName\n\t * @returns {LiveNodeList}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbytagname\n\t */ getElementsByTagName: function(qualifiedName) {\n        var isHTMLDocument = (this.nodeType === DOCUMENT_NODE ? this : this.ownerDocument).type === \"html\";\n        var lowerQualifiedName = qualifiedName.toLowerCase();\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node === base || node.nodeType !== ELEMENT_NODE) {\n                    return;\n                }\n                if (qualifiedName === \"*\") {\n                    ls.push(node);\n                } else {\n                    var nodeQualifiedName = node.getQualifiedName();\n                    var matchingQName = isHTMLDocument && node.namespaceURI === NAMESPACE.HTML ? lowerQualifiedName : qualifiedName;\n                    if (nodeQualifiedName === matchingQName) {\n                        ls.push(node);\n                    }\n                }\n            });\n            return ls;\n        });\n    },\n    getElementsByTagNameNS: function(namespaceURI, localName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === \"*\" || node.namespaceURI === namespaceURI) && (localName === \"*\" || node.localName == localName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    }\n};\nDocument.prototype.getElementsByClassName = Element.prototype.getElementsByClassName;\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n_extends(Element, Node);\nfunction Attr(symbol) {\n    checkSymbol(symbol);\n    this.namespaceURI = null;\n    this.prefix = null;\n    this.ownerElement = null;\n}\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\nfunction CharacterData(symbol) {\n    checkSymbol(symbol);\n}\nCharacterData.prototype = {\n    data: \"\",\n    substringData: function(offset, count) {\n        return this.data.substring(offset, offset + count);\n    },\n    appendData: function(text) {\n        text = this.data + text;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    },\n    insertData: function(offset, text) {\n        this.replaceData(offset, 0, text);\n    },\n    deleteData: function(offset, count) {\n        this.replaceData(offset, count, \"\");\n    },\n    replaceData: function(offset, count, text) {\n        var start = this.data.substring(0, offset);\n        var end = this.data.substring(offset + count);\n        text = start + text + end;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    }\n};\n_extends(CharacterData, Node);\nfunction Text(symbol) {\n    checkSymbol(symbol);\n}\nText.prototype = {\n    nodeName: \"#text\",\n    nodeType: TEXT_NODE,\n    splitText: function(offset) {\n        var text = this.data;\n        var newText = text.substring(offset);\n        text = text.substring(0, offset);\n        this.data = this.nodeValue = text;\n        this.length = text.length;\n        var newNode = this.ownerDocument.createTextNode(newText);\n        if (this.parentNode) {\n            this.parentNode.insertBefore(newNode, this.nextSibling);\n        }\n        return newNode;\n    }\n};\n_extends(Text, CharacterData);\nfunction Comment(symbol) {\n    checkSymbol(symbol);\n}\nComment.prototype = {\n    nodeName: \"#comment\",\n    nodeType: COMMENT_NODE\n};\n_extends(Comment, CharacterData);\nfunction CDATASection(symbol) {\n    checkSymbol(symbol);\n}\nCDATASection.prototype = {\n    nodeName: \"#cdata-section\",\n    nodeType: CDATA_SECTION_NODE\n};\n_extends(CDATASection, Text);\nfunction DocumentType(symbol) {\n    checkSymbol(symbol);\n}\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\nfunction Notation(symbol) {\n    checkSymbol(symbol);\n}\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\nfunction Entity(symbol) {\n    checkSymbol(symbol);\n}\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\nfunction EntityReference(symbol) {\n    checkSymbol(symbol);\n}\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\nfunction DocumentFragment(symbol) {\n    checkSymbol(symbol);\n}\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\nfunction ProcessingInstruction(symbol) {\n    checkSymbol(symbol);\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, CharacterData);\nfunction XMLSerializer() {}\nXMLSerializer.prototype.serializeToString = function(node, nodeFilter) {\n    return nodeSerializeToString.call(node, nodeFilter);\n};\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(nodeFilter) {\n    var buf = [];\n    var refNode = this.nodeType === DOCUMENT_NODE && this.documentElement || this;\n    var prefix = refNode.prefix;\n    var uri = refNode.namespaceURI;\n    if (uri && prefix == null) {\n        var prefix = refNode.lookupPrefix(uri);\n        if (prefix == null) {\n            var visibleNamespaces = [\n                {\n                    namespace: uri,\n                    prefix: null\n                }\n            ];\n        }\n    }\n    serializeToString(this, buf, nodeFilter, visibleNamespaces);\n    return buf.join(\"\");\n}\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n    var prefix = node.prefix || \"\";\n    var uri = node.namespaceURI;\n    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\n    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\n    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\n    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\n    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\n    // > [...] Furthermore, the attribute value [...] must not be an empty string.\n    // so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\n    if (!uri) {\n        return false;\n    }\n    if (prefix === \"xml\" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {\n        return false;\n    }\n    var i = visibleNamespaces.length;\n    while(i--){\n        var ns = visibleNamespaces[i];\n        // get namespace prefix\n        if (ns.prefix === prefix) {\n            return ns.namespace !== uri;\n        }\n    }\n    return true;\n}\n/**\n * Literal whitespace other than space that appear in attribute values are serialized as\n * their entity references, so they will be preserved.\n * (In contrast to whitespace literals in the input which are normalized to spaces).\n *\n * Well-formed constraint: No < in Attribute Values:\n * > The replacement text of any entity referred to directly or indirectly\n * > in an attribute value must not contain a <.\n *\n * @see https://www.w3.org/TR/xml11/#CleanAttrVals\n * @see https://www.w3.org/TR/xml11/#NT-AttValue\n * @see https://www.w3.org/TR/xml11/#AVNormalize\n * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\n * @prettierignore\n */ function addSerializedAttribute(buf, qualifiedName, value) {\n    buf.push(\" \", qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"');\n}\nfunction serializeToString(node, buf, nodeFilter, visibleNamespaces) {\n    if (!visibleNamespaces) {\n        visibleNamespaces = [];\n    }\n    var doc = node.nodeType === DOCUMENT_NODE ? node : node.ownerDocument;\n    var isHTML = doc.type === \"html\";\n    if (nodeFilter) {\n        node = nodeFilter(node);\n        if (node) {\n            if (typeof node == \"string\") {\n                buf.push(node);\n                return;\n            }\n        } else {\n            return;\n        }\n    //buf.sort.apply(attrs, attributeSorter);\n    }\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var len = attrs.length;\n            var child = node.firstChild;\n            var nodeName = node.tagName;\n            var prefixedNodeName = nodeName;\n            if (!isHTML && !node.prefix && node.namespaceURI) {\n                var defaultNS;\n                // lookup current default ns from `xmlns` attribute\n                for(var ai = 0; ai < attrs.length; ai++){\n                    if (attrs.item(ai).name === \"xmlns\") {\n                        defaultNS = attrs.item(ai).value;\n                        break;\n                    }\n                }\n                if (!defaultNS) {\n                    // lookup current default ns in visibleNamespaces\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.prefix === \"\" && namespace.namespace === node.namespaceURI) {\n                            defaultNS = namespace.namespace;\n                            break;\n                        }\n                    }\n                }\n                if (defaultNS !== node.namespaceURI) {\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.namespace === node.namespaceURI) {\n                            if (namespace.prefix) {\n                                prefixedNodeName = namespace.prefix + \":\" + nodeName;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            buf.push(\"<\", prefixedNodeName);\n            for(var i = 0; i < len; i++){\n                // add namespaces for attributes\n                var attr = attrs.item(i);\n                if (attr.prefix == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: attr.localName,\n                        namespace: attr.value\n                    });\n                } else if (attr.nodeName == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: \"\",\n                        namespace: attr.value\n                    });\n                }\n            }\n            for(var i = 0; i < len; i++){\n                var attr = attrs.item(i);\n                if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\n                    var prefix = attr.prefix || \"\";\n                    var uri = attr.namespaceURI;\n                    addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                    visibleNamespaces.push({\n                        prefix: prefix,\n                        namespace: uri\n                    });\n                }\n                serializeToString(attr, buf, nodeFilter, visibleNamespaces);\n            }\n            // add namespace for current node\n            if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n                var prefix = node.prefix || \"\";\n                var uri = node.namespaceURI;\n                addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                visibleNamespaces.push({\n                    prefix: prefix,\n                    namespace: uri\n                });\n            }\n            // in XML elements can be closed when they have no children\n            var canCloseTag = !child;\n            if (canCloseTag && (isHTML || node.namespaceURI === NAMESPACE.HTML)) {\n                // in HTML (doc or ns) only void elements can be closed right away\n                canCloseTag = isHTMLVoidElement(nodeName);\n            }\n            if (canCloseTag) {\n                buf.push(\"/>\");\n            } else {\n                buf.push(\">\");\n                //if is cdata child node\n                if (isHTML && isHTMLRawTextElement(nodeName)) {\n                    while(child){\n                        if (child.data) {\n                            buf.push(child.data);\n                        } else {\n                            serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());\n                        }\n                        child = child.nextSibling;\n                    }\n                } else {\n                    while(child){\n                        serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());\n                        child = child.nextSibling;\n                    }\n                }\n                buf.push(\"</\", prefixedNodeName, \">\");\n            }\n            // remove added visible namespaces\n            //visibleNamespaces.length = startVisibleNamespaces;\n            return;\n        case DOCUMENT_NODE:\n        case DOCUMENT_FRAGMENT_NODE:\n            var child = node.firstChild;\n            while(child){\n                serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());\n                child = child.nextSibling;\n            }\n            return;\n        case ATTRIBUTE_NODE:\n            return addSerializedAttribute(buf, node.name, node.value);\n        case TEXT_NODE:\n            /*\n\t\t\t * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\n\t\t\t * except when used as markup delimiters, or within a comment, a processing instruction,\n\t\t\t * or a CDATA section.\n\t\t\t * If they are needed elsewhere, they must be escaped using either numeric character\n\t\t\t * references or the strings `&amp;` and `&lt;` respectively.\n\t\t\t * The right angle bracket (>) may be represented using the string \" &gt; \",\n\t\t\t * and must, for compatibility, be escaped using either `&gt;`,\n\t\t\t * or a character reference when it appears in the string `]]>` in content,\n\t\t\t * when that string is not marking the end of a CDATA section.\n\t\t\t *\n\t\t\t * In the content of elements, character data is any string of characters which does not\n\t\t\t * contain the start-delimiter of any markup and does not include the CDATA-section-close\n\t\t\t * delimiter, `]]>`.\n\t\t\t *\n\t\t\t * @see https://www.w3.org/TR/xml/#NT-CharData\n\t\t\t * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\n\t\t\t */ return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));\n        case CDATA_SECTION_NODE:\n            return buf.push(g.CDATA_START, node.data, g.CDATA_END);\n        case COMMENT_NODE:\n            return buf.push(g.COMMENT_START, node.data, g.COMMENT_END);\n        case DOCUMENT_TYPE_NODE:\n            var pubid = node.publicId;\n            var sysid = node.systemId;\n            buf.push(g.DOCTYPE_DECL_START, \" \", node.name);\n            if (pubid) {\n                buf.push(\" \", g.PUBLIC, \" \", pubid);\n                if (sysid && sysid !== \".\") {\n                    buf.push(\" \", sysid);\n                }\n            } else if (sysid && sysid !== \".\") {\n                buf.push(\" \", g.SYSTEM, \" \", sysid);\n            }\n            if (node.internalSubset) {\n                buf.push(\" [\", node.internalSubset, \"]\");\n            }\n            buf.push(\">\");\n            return;\n        case PROCESSING_INSTRUCTION_NODE:\n            return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n        case ENTITY_REFERENCE_NODE:\n            return buf.push(\"&\", node.nodeName, \";\");\n        //case ENTITY_NODE:\n        //case NOTATION_NODE:\n        default:\n            buf.push(\"??\", node.nodeName);\n    }\n}\nfunction importNode(doc, node, deep) {\n    var node2;\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            node2 = node.cloneNode(false);\n            node2.ownerDocument = doc;\n        //var attrs = node2.attributes;\n        //var len = attrs.length;\n        //for(var i=0;i<len;i++){\n        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n        //}\n        case DOCUMENT_FRAGMENT_NODE:\n            break;\n        case ATTRIBUTE_NODE:\n            deep = true;\n            break;\n    }\n    if (!node2) {\n        node2 = node.cloneNode(false); //false\n    }\n    node2.ownerDocument = doc;\n    node2.parentNode = null;\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(importNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\n/**\n * Creates a copy of a node from an existing one.\n *\n * @param {Document} doc\n * The Document object representing the document that the new node will belong to.\n * @param {Node} node\n * The node to clone.\n * @param {boolean} deep\n * If true, the contents of the node are recursively copied.\n * If false, only the node itself (and its attributes, if it is an element) are copied.\n * @returns {Node}\n * Returns the newly created copy of the node.\n * @throws {DOMException}\n * May throw a DOMException if operations within setAttributeNode or appendChild (which are\n * potentially invoked in this function) do not meet their specific constraints.\n */ function cloneNode(doc, node, deep) {\n    var node2 = new node.constructor(PDC);\n    for(var n in node){\n        if (hasOwn(node, n)) {\n            var v = node[n];\n            if (typeof v != \"object\") {\n                if (v != node2[n]) {\n                    node2[n] = v;\n                }\n            }\n        }\n    }\n    if (node.childNodes) {\n        node2.childNodes = new NodeList();\n    }\n    node2.ownerDocument = doc;\n    switch(node2.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var attrs2 = node2.attributes = new NamedNodeMap();\n            var len = attrs.length;\n            attrs2._ownerElement = node2;\n            for(var i = 0; i < len; i++){\n                node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));\n            }\n            break;\n        case ATTRIBUTE_NODE:\n            deep = true;\n    }\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(cloneNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\nfunction __set__(object, key, value) {\n    object[key] = value;\n}\n//do dynamic\ntry {\n    if (Object.defineProperty) {\n        Object.defineProperty(LiveNodeList.prototype, \"length\", {\n            get: function() {\n                _updateLiveList(this);\n                return this.$$length;\n            }\n        });\n        Object.defineProperty(Node.prototype, \"textContent\", {\n            get: function() {\n                return getTextContent(this);\n            },\n            set: function(data) {\n                switch(this.nodeType){\n                    case ELEMENT_NODE:\n                    case DOCUMENT_FRAGMENT_NODE:\n                        while(this.firstChild){\n                            this.removeChild(this.firstChild);\n                        }\n                        if (data || String(data)) {\n                            this.appendChild(this.ownerDocument.createTextNode(data));\n                        }\n                        break;\n                    default:\n                        this.data = data;\n                        this.value = data;\n                        this.nodeValue = data;\n                }\n            }\n        });\n        function getTextContent(node) {\n            switch(node.nodeType){\n                case ELEMENT_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                    var buf = [];\n                    node = node.firstChild;\n                    while(node){\n                        if (node.nodeType !== 7 && node.nodeType !== 8) {\n                            buf.push(getTextContent(node));\n                        }\n                        node = node.nextSibling;\n                    }\n                    return buf.join(\"\");\n                default:\n                    return node.nodeValue;\n            }\n        }\n        __set__ = function(object, key, value) {\n            //console.log(value)\n            object[\"$$\" + key] = value;\n        };\n    }\n} catch (e) {\n//ie8\n}\nexports._updateLiveList = _updateLiveList;\nexports.Attr = Attr;\nexports.CDATASection = CDATASection;\nexports.CharacterData = CharacterData;\nexports.Comment = Comment;\nexports.Document = Document;\nexports.DocumentFragment = DocumentFragment;\nexports.DocumentType = DocumentType;\nexports.DOMImplementation = DOMImplementation;\nexports.Element = Element;\nexports.Entity = Entity;\nexports.EntityReference = EntityReference;\nexports.LiveNodeList = LiveNodeList;\nexports.NamedNodeMap = NamedNodeMap;\nexports.Node = Node;\nexports.NodeList = NodeList;\nexports.Notation = Notation;\nexports.Text = Text;\nexports.ProcessingInstruction = ProcessingInstruction;\nexports.XMLSerializer = XMLSerializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/dom.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/entities.js":
/*!*****************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/entities.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar freeze = (__webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\").freeze);\n/**\n * The entities that are predefined in every XML document.\n *\n * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\n * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML\n *      Wikipedia\n */ exports.XML_ENTITIES = freeze({\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"'\n});\n/**\n * A map of all entities that are detected in an HTML document.\n * They contain all entries from `XML_ENTITIES`.\n *\n * @see {@link XML_ENTITIES}\n * @see {@link DOMParser.parseFromString}\n * @see {@link DOMImplementation.prototype.createHTMLDocument}\n * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5)\n *      Spec\n * @see https://html.spec.whatwg.org/entities.json JSON\n * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\n * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML\n *      Wikipedia (HTML)\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML\n *      Wikpedia (XHTML)\n */ exports.HTML_ENTITIES = freeze({\n    Aacute: \"\\xc1\",\n    aacute: \"\\xe1\",\n    Abreve: \"Ă\",\n    abreve: \"ă\",\n    ac: \"∾\",\n    acd: \"∿\",\n    acE: \"∾̳\",\n    Acirc: \"\\xc2\",\n    acirc: \"\\xe2\",\n    acute: \"\\xb4\",\n    Acy: \"А\",\n    acy: \"а\",\n    AElig: \"\\xc6\",\n    aelig: \"\\xe6\",\n    af: \"⁡\",\n    Afr: \"\\uD835\\uDD04\",\n    afr: \"\\uD835\\uDD1E\",\n    Agrave: \"\\xc0\",\n    agrave: \"\\xe0\",\n    alefsym: \"ℵ\",\n    aleph: \"ℵ\",\n    Alpha: \"Α\",\n    alpha: \"α\",\n    Amacr: \"Ā\",\n    amacr: \"ā\",\n    amalg: \"⨿\",\n    AMP: \"&\",\n    amp: \"&\",\n    And: \"⩓\",\n    and: \"∧\",\n    andand: \"⩕\",\n    andd: \"⩜\",\n    andslope: \"⩘\",\n    andv: \"⩚\",\n    ang: \"∠\",\n    ange: \"⦤\",\n    angle: \"∠\",\n    angmsd: \"∡\",\n    angmsdaa: \"⦨\",\n    angmsdab: \"⦩\",\n    angmsdac: \"⦪\",\n    angmsdad: \"⦫\",\n    angmsdae: \"⦬\",\n    angmsdaf: \"⦭\",\n    angmsdag: \"⦮\",\n    angmsdah: \"⦯\",\n    angrt: \"∟\",\n    angrtvb: \"⊾\",\n    angrtvbd: \"⦝\",\n    angsph: \"∢\",\n    angst: \"\\xc5\",\n    angzarr: \"⍼\",\n    Aogon: \"Ą\",\n    aogon: \"ą\",\n    Aopf: \"\\uD835\\uDD38\",\n    aopf: \"\\uD835\\uDD52\",\n    ap: \"≈\",\n    apacir: \"⩯\",\n    apE: \"⩰\",\n    ape: \"≊\",\n    apid: \"≋\",\n    apos: \"'\",\n    ApplyFunction: \"⁡\",\n    approx: \"≈\",\n    approxeq: \"≊\",\n    Aring: \"\\xc5\",\n    aring: \"\\xe5\",\n    Ascr: \"\\uD835\\uDC9C\",\n    ascr: \"\\uD835\\uDCB6\",\n    Assign: \"≔\",\n    ast: \"*\",\n    asymp: \"≈\",\n    asympeq: \"≍\",\n    Atilde: \"\\xc3\",\n    atilde: \"\\xe3\",\n    Auml: \"\\xc4\",\n    auml: \"\\xe4\",\n    awconint: \"∳\",\n    awint: \"⨑\",\n    backcong: \"≌\",\n    backepsilon: \"϶\",\n    backprime: \"‵\",\n    backsim: \"∽\",\n    backsimeq: \"⋍\",\n    Backslash: \"∖\",\n    Barv: \"⫧\",\n    barvee: \"⊽\",\n    Barwed: \"⌆\",\n    barwed: \"⌅\",\n    barwedge: \"⌅\",\n    bbrk: \"⎵\",\n    bbrktbrk: \"⎶\",\n    bcong: \"≌\",\n    Bcy: \"Б\",\n    bcy: \"б\",\n    bdquo: \"„\",\n    becaus: \"∵\",\n    Because: \"∵\",\n    because: \"∵\",\n    bemptyv: \"⦰\",\n    bepsi: \"϶\",\n    bernou: \"ℬ\",\n    Bernoullis: \"ℬ\",\n    Beta: \"Β\",\n    beta: \"β\",\n    beth: \"ℶ\",\n    between: \"≬\",\n    Bfr: \"\\uD835\\uDD05\",\n    bfr: \"\\uD835\\uDD1F\",\n    bigcap: \"⋂\",\n    bigcirc: \"◯\",\n    bigcup: \"⋃\",\n    bigodot: \"⨀\",\n    bigoplus: \"⨁\",\n    bigotimes: \"⨂\",\n    bigsqcup: \"⨆\",\n    bigstar: \"★\",\n    bigtriangledown: \"▽\",\n    bigtriangleup: \"△\",\n    biguplus: \"⨄\",\n    bigvee: \"⋁\",\n    bigwedge: \"⋀\",\n    bkarow: \"⤍\",\n    blacklozenge: \"⧫\",\n    blacksquare: \"▪\",\n    blacktriangle: \"▴\",\n    blacktriangledown: \"▾\",\n    blacktriangleleft: \"◂\",\n    blacktriangleright: \"▸\",\n    blank: \"␣\",\n    blk12: \"▒\",\n    blk14: \"░\",\n    blk34: \"▓\",\n    block: \"█\",\n    bne: \"=⃥\",\n    bnequiv: \"≡⃥\",\n    bNot: \"⫭\",\n    bnot: \"⌐\",\n    Bopf: \"\\uD835\\uDD39\",\n    bopf: \"\\uD835\\uDD53\",\n    bot: \"⊥\",\n    bottom: \"⊥\",\n    bowtie: \"⋈\",\n    boxbox: \"⧉\",\n    boxDL: \"╗\",\n    boxDl: \"╖\",\n    boxdL: \"╕\",\n    boxdl: \"┐\",\n    boxDR: \"╔\",\n    boxDr: \"╓\",\n    boxdR: \"╒\",\n    boxdr: \"┌\",\n    boxH: \"═\",\n    boxh: \"─\",\n    boxHD: \"╦\",\n    boxHd: \"╤\",\n    boxhD: \"╥\",\n    boxhd: \"┬\",\n    boxHU: \"╩\",\n    boxHu: \"╧\",\n    boxhU: \"╨\",\n    boxhu: \"┴\",\n    boxminus: \"⊟\",\n    boxplus: \"⊞\",\n    boxtimes: \"⊠\",\n    boxUL: \"╝\",\n    boxUl: \"╜\",\n    boxuL: \"╛\",\n    boxul: \"┘\",\n    boxUR: \"╚\",\n    boxUr: \"╙\",\n    boxuR: \"╘\",\n    boxur: \"└\",\n    boxV: \"║\",\n    boxv: \"│\",\n    boxVH: \"╬\",\n    boxVh: \"╫\",\n    boxvH: \"╪\",\n    boxvh: \"┼\",\n    boxVL: \"╣\",\n    boxVl: \"╢\",\n    boxvL: \"╡\",\n    boxvl: \"┤\",\n    boxVR: \"╠\",\n    boxVr: \"╟\",\n    boxvR: \"╞\",\n    boxvr: \"├\",\n    bprime: \"‵\",\n    Breve: \"˘\",\n    breve: \"˘\",\n    brvbar: \"\\xa6\",\n    Bscr: \"ℬ\",\n    bscr: \"\\uD835\\uDCB7\",\n    bsemi: \"⁏\",\n    bsim: \"∽\",\n    bsime: \"⋍\",\n    bsol: \"\\\\\",\n    bsolb: \"⧅\",\n    bsolhsub: \"⟈\",\n    bull: \"•\",\n    bullet: \"•\",\n    bump: \"≎\",\n    bumpE: \"⪮\",\n    bumpe: \"≏\",\n    Bumpeq: \"≎\",\n    bumpeq: \"≏\",\n    Cacute: \"Ć\",\n    cacute: \"ć\",\n    Cap: \"⋒\",\n    cap: \"∩\",\n    capand: \"⩄\",\n    capbrcup: \"⩉\",\n    capcap: \"⩋\",\n    capcup: \"⩇\",\n    capdot: \"⩀\",\n    CapitalDifferentialD: \"ⅅ\",\n    caps: \"∩︀\",\n    caret: \"⁁\",\n    caron: \"ˇ\",\n    Cayleys: \"ℭ\",\n    ccaps: \"⩍\",\n    Ccaron: \"Č\",\n    ccaron: \"č\",\n    Ccedil: \"\\xc7\",\n    ccedil: \"\\xe7\",\n    Ccirc: \"Ĉ\",\n    ccirc: \"ĉ\",\n    Cconint: \"∰\",\n    ccups: \"⩌\",\n    ccupssm: \"⩐\",\n    Cdot: \"Ċ\",\n    cdot: \"ċ\",\n    cedil: \"\\xb8\",\n    Cedilla: \"\\xb8\",\n    cemptyv: \"⦲\",\n    cent: \"\\xa2\",\n    CenterDot: \"\\xb7\",\n    centerdot: \"\\xb7\",\n    Cfr: \"ℭ\",\n    cfr: \"\\uD835\\uDD20\",\n    CHcy: \"Ч\",\n    chcy: \"ч\",\n    check: \"✓\",\n    checkmark: \"✓\",\n    Chi: \"Χ\",\n    chi: \"χ\",\n    cir: \"○\",\n    circ: \"ˆ\",\n    circeq: \"≗\",\n    circlearrowleft: \"↺\",\n    circlearrowright: \"↻\",\n    circledast: \"⊛\",\n    circledcirc: \"⊚\",\n    circleddash: \"⊝\",\n    CircleDot: \"⊙\",\n    circledR: \"\\xae\",\n    circledS: \"Ⓢ\",\n    CircleMinus: \"⊖\",\n    CirclePlus: \"⊕\",\n    CircleTimes: \"⊗\",\n    cirE: \"⧃\",\n    cire: \"≗\",\n    cirfnint: \"⨐\",\n    cirmid: \"⫯\",\n    cirscir: \"⧂\",\n    ClockwiseContourIntegral: \"∲\",\n    CloseCurlyDoubleQuote: \"”\",\n    CloseCurlyQuote: \"’\",\n    clubs: \"♣\",\n    clubsuit: \"♣\",\n    Colon: \"∷\",\n    colon: \":\",\n    Colone: \"⩴\",\n    colone: \"≔\",\n    coloneq: \"≔\",\n    comma: \",\",\n    commat: \"@\",\n    comp: \"∁\",\n    compfn: \"∘\",\n    complement: \"∁\",\n    complexes: \"ℂ\",\n    cong: \"≅\",\n    congdot: \"⩭\",\n    Congruent: \"≡\",\n    Conint: \"∯\",\n    conint: \"∮\",\n    ContourIntegral: \"∮\",\n    Copf: \"ℂ\",\n    copf: \"\\uD835\\uDD54\",\n    coprod: \"∐\",\n    Coproduct: \"∐\",\n    COPY: \"\\xa9\",\n    copy: \"\\xa9\",\n    copysr: \"℗\",\n    CounterClockwiseContourIntegral: \"∳\",\n    crarr: \"↵\",\n    Cross: \"⨯\",\n    cross: \"✗\",\n    Cscr: \"\\uD835\\uDC9E\",\n    cscr: \"\\uD835\\uDCB8\",\n    csub: \"⫏\",\n    csube: \"⫑\",\n    csup: \"⫐\",\n    csupe: \"⫒\",\n    ctdot: \"⋯\",\n    cudarrl: \"⤸\",\n    cudarrr: \"⤵\",\n    cuepr: \"⋞\",\n    cuesc: \"⋟\",\n    cularr: \"↶\",\n    cularrp: \"⤽\",\n    Cup: \"⋓\",\n    cup: \"∪\",\n    cupbrcap: \"⩈\",\n    CupCap: \"≍\",\n    cupcap: \"⩆\",\n    cupcup: \"⩊\",\n    cupdot: \"⊍\",\n    cupor: \"⩅\",\n    cups: \"∪︀\",\n    curarr: \"↷\",\n    curarrm: \"⤼\",\n    curlyeqprec: \"⋞\",\n    curlyeqsucc: \"⋟\",\n    curlyvee: \"⋎\",\n    curlywedge: \"⋏\",\n    curren: \"\\xa4\",\n    curvearrowleft: \"↶\",\n    curvearrowright: \"↷\",\n    cuvee: \"⋎\",\n    cuwed: \"⋏\",\n    cwconint: \"∲\",\n    cwint: \"∱\",\n    cylcty: \"⌭\",\n    Dagger: \"‡\",\n    dagger: \"†\",\n    daleth: \"ℸ\",\n    Darr: \"↡\",\n    dArr: \"⇓\",\n    darr: \"↓\",\n    dash: \"‐\",\n    Dashv: \"⫤\",\n    dashv: \"⊣\",\n    dbkarow: \"⤏\",\n    dblac: \"˝\",\n    Dcaron: \"Ď\",\n    dcaron: \"ď\",\n    Dcy: \"Д\",\n    dcy: \"д\",\n    DD: \"ⅅ\",\n    dd: \"ⅆ\",\n    ddagger: \"‡\",\n    ddarr: \"⇊\",\n    DDotrahd: \"⤑\",\n    ddotseq: \"⩷\",\n    deg: \"\\xb0\",\n    Del: \"∇\",\n    Delta: \"Δ\",\n    delta: \"δ\",\n    demptyv: \"⦱\",\n    dfisht: \"⥿\",\n    Dfr: \"\\uD835\\uDD07\",\n    dfr: \"\\uD835\\uDD21\",\n    dHar: \"⥥\",\n    dharl: \"⇃\",\n    dharr: \"⇂\",\n    DiacriticalAcute: \"\\xb4\",\n    DiacriticalDot: \"˙\",\n    DiacriticalDoubleAcute: \"˝\",\n    DiacriticalGrave: \"`\",\n    DiacriticalTilde: \"˜\",\n    diam: \"⋄\",\n    Diamond: \"⋄\",\n    diamond: \"⋄\",\n    diamondsuit: \"♦\",\n    diams: \"♦\",\n    die: \"\\xa8\",\n    DifferentialD: \"ⅆ\",\n    digamma: \"ϝ\",\n    disin: \"⋲\",\n    div: \"\\xf7\",\n    divide: \"\\xf7\",\n    divideontimes: \"⋇\",\n    divonx: \"⋇\",\n    DJcy: \"Ђ\",\n    djcy: \"ђ\",\n    dlcorn: \"⌞\",\n    dlcrop: \"⌍\",\n    dollar: \"$\",\n    Dopf: \"\\uD835\\uDD3B\",\n    dopf: \"\\uD835\\uDD55\",\n    Dot: \"\\xa8\",\n    dot: \"˙\",\n    DotDot: \"⃜\",\n    doteq: \"≐\",\n    doteqdot: \"≑\",\n    DotEqual: \"≐\",\n    dotminus: \"∸\",\n    dotplus: \"∔\",\n    dotsquare: \"⊡\",\n    doublebarwedge: \"⌆\",\n    DoubleContourIntegral: \"∯\",\n    DoubleDot: \"\\xa8\",\n    DoubleDownArrow: \"⇓\",\n    DoubleLeftArrow: \"⇐\",\n    DoubleLeftRightArrow: \"⇔\",\n    DoubleLeftTee: \"⫤\",\n    DoubleLongLeftArrow: \"⟸\",\n    DoubleLongLeftRightArrow: \"⟺\",\n    DoubleLongRightArrow: \"⟹\",\n    DoubleRightArrow: \"⇒\",\n    DoubleRightTee: \"⊨\",\n    DoubleUpArrow: \"⇑\",\n    DoubleUpDownArrow: \"⇕\",\n    DoubleVerticalBar: \"∥\",\n    DownArrow: \"↓\",\n    Downarrow: \"⇓\",\n    downarrow: \"↓\",\n    DownArrowBar: \"⤓\",\n    DownArrowUpArrow: \"⇵\",\n    DownBreve: \"̑\",\n    downdownarrows: \"⇊\",\n    downharpoonleft: \"⇃\",\n    downharpoonright: \"⇂\",\n    DownLeftRightVector: \"⥐\",\n    DownLeftTeeVector: \"⥞\",\n    DownLeftVector: \"↽\",\n    DownLeftVectorBar: \"⥖\",\n    DownRightTeeVector: \"⥟\",\n    DownRightVector: \"⇁\",\n    DownRightVectorBar: \"⥗\",\n    DownTee: \"⊤\",\n    DownTeeArrow: \"↧\",\n    drbkarow: \"⤐\",\n    drcorn: \"⌟\",\n    drcrop: \"⌌\",\n    Dscr: \"\\uD835\\uDC9F\",\n    dscr: \"\\uD835\\uDCB9\",\n    DScy: \"Ѕ\",\n    dscy: \"ѕ\",\n    dsol: \"⧶\",\n    Dstrok: \"Đ\",\n    dstrok: \"đ\",\n    dtdot: \"⋱\",\n    dtri: \"▿\",\n    dtrif: \"▾\",\n    duarr: \"⇵\",\n    duhar: \"⥯\",\n    dwangle: \"⦦\",\n    DZcy: \"Џ\",\n    dzcy: \"џ\",\n    dzigrarr: \"⟿\",\n    Eacute: \"\\xc9\",\n    eacute: \"\\xe9\",\n    easter: \"⩮\",\n    Ecaron: \"Ě\",\n    ecaron: \"ě\",\n    ecir: \"≖\",\n    Ecirc: \"\\xca\",\n    ecirc: \"\\xea\",\n    ecolon: \"≕\",\n    Ecy: \"Э\",\n    ecy: \"э\",\n    eDDot: \"⩷\",\n    Edot: \"Ė\",\n    eDot: \"≑\",\n    edot: \"ė\",\n    ee: \"ⅇ\",\n    efDot: \"≒\",\n    Efr: \"\\uD835\\uDD08\",\n    efr: \"\\uD835\\uDD22\",\n    eg: \"⪚\",\n    Egrave: \"\\xc8\",\n    egrave: \"\\xe8\",\n    egs: \"⪖\",\n    egsdot: \"⪘\",\n    el: \"⪙\",\n    Element: \"∈\",\n    elinters: \"⏧\",\n    ell: \"ℓ\",\n    els: \"⪕\",\n    elsdot: \"⪗\",\n    Emacr: \"Ē\",\n    emacr: \"ē\",\n    empty: \"∅\",\n    emptyset: \"∅\",\n    EmptySmallSquare: \"◻\",\n    emptyv: \"∅\",\n    EmptyVerySmallSquare: \"▫\",\n    emsp: \" \",\n    emsp13: \" \",\n    emsp14: \" \",\n    ENG: \"Ŋ\",\n    eng: \"ŋ\",\n    ensp: \" \",\n    Eogon: \"Ę\",\n    eogon: \"ę\",\n    Eopf: \"\\uD835\\uDD3C\",\n    eopf: \"\\uD835\\uDD56\",\n    epar: \"⋕\",\n    eparsl: \"⧣\",\n    eplus: \"⩱\",\n    epsi: \"ε\",\n    Epsilon: \"Ε\",\n    epsilon: \"ε\",\n    epsiv: \"ϵ\",\n    eqcirc: \"≖\",\n    eqcolon: \"≕\",\n    eqsim: \"≂\",\n    eqslantgtr: \"⪖\",\n    eqslantless: \"⪕\",\n    Equal: \"⩵\",\n    equals: \"=\",\n    EqualTilde: \"≂\",\n    equest: \"≟\",\n    Equilibrium: \"⇌\",\n    equiv: \"≡\",\n    equivDD: \"⩸\",\n    eqvparsl: \"⧥\",\n    erarr: \"⥱\",\n    erDot: \"≓\",\n    Escr: \"ℰ\",\n    escr: \"ℯ\",\n    esdot: \"≐\",\n    Esim: \"⩳\",\n    esim: \"≂\",\n    Eta: \"Η\",\n    eta: \"η\",\n    ETH: \"\\xd0\",\n    eth: \"\\xf0\",\n    Euml: \"\\xcb\",\n    euml: \"\\xeb\",\n    euro: \"€\",\n    excl: \"!\",\n    exist: \"∃\",\n    Exists: \"∃\",\n    expectation: \"ℰ\",\n    ExponentialE: \"ⅇ\",\n    exponentiale: \"ⅇ\",\n    fallingdotseq: \"≒\",\n    Fcy: \"Ф\",\n    fcy: \"ф\",\n    female: \"♀\",\n    ffilig: \"ﬃ\",\n    fflig: \"ﬀ\",\n    ffllig: \"ﬄ\",\n    Ffr: \"\\uD835\\uDD09\",\n    ffr: \"\\uD835\\uDD23\",\n    filig: \"ﬁ\",\n    FilledSmallSquare: \"◼\",\n    FilledVerySmallSquare: \"▪\",\n    fjlig: \"fj\",\n    flat: \"♭\",\n    fllig: \"ﬂ\",\n    fltns: \"▱\",\n    fnof: \"ƒ\",\n    Fopf: \"\\uD835\\uDD3D\",\n    fopf: \"\\uD835\\uDD57\",\n    ForAll: \"∀\",\n    forall: \"∀\",\n    fork: \"⋔\",\n    forkv: \"⫙\",\n    Fouriertrf: \"ℱ\",\n    fpartint: \"⨍\",\n    frac12: \"\\xbd\",\n    frac13: \"⅓\",\n    frac14: \"\\xbc\",\n    frac15: \"⅕\",\n    frac16: \"⅙\",\n    frac18: \"⅛\",\n    frac23: \"⅔\",\n    frac25: \"⅖\",\n    frac34: \"\\xbe\",\n    frac35: \"⅗\",\n    frac38: \"⅜\",\n    frac45: \"⅘\",\n    frac56: \"⅚\",\n    frac58: \"⅝\",\n    frac78: \"⅞\",\n    frasl: \"⁄\",\n    frown: \"⌢\",\n    Fscr: \"ℱ\",\n    fscr: \"\\uD835\\uDCBB\",\n    gacute: \"ǵ\",\n    Gamma: \"Γ\",\n    gamma: \"γ\",\n    Gammad: \"Ϝ\",\n    gammad: \"ϝ\",\n    gap: \"⪆\",\n    Gbreve: \"Ğ\",\n    gbreve: \"ğ\",\n    Gcedil: \"Ģ\",\n    Gcirc: \"Ĝ\",\n    gcirc: \"ĝ\",\n    Gcy: \"Г\",\n    gcy: \"г\",\n    Gdot: \"Ġ\",\n    gdot: \"ġ\",\n    gE: \"≧\",\n    ge: \"≥\",\n    gEl: \"⪌\",\n    gel: \"⋛\",\n    geq: \"≥\",\n    geqq: \"≧\",\n    geqslant: \"⩾\",\n    ges: \"⩾\",\n    gescc: \"⪩\",\n    gesdot: \"⪀\",\n    gesdoto: \"⪂\",\n    gesdotol: \"⪄\",\n    gesl: \"⋛︀\",\n    gesles: \"⪔\",\n    Gfr: \"\\uD835\\uDD0A\",\n    gfr: \"\\uD835\\uDD24\",\n    Gg: \"⋙\",\n    gg: \"≫\",\n    ggg: \"⋙\",\n    gimel: \"ℷ\",\n    GJcy: \"Ѓ\",\n    gjcy: \"ѓ\",\n    gl: \"≷\",\n    gla: \"⪥\",\n    glE: \"⪒\",\n    glj: \"⪤\",\n    gnap: \"⪊\",\n    gnapprox: \"⪊\",\n    gnE: \"≩\",\n    gne: \"⪈\",\n    gneq: \"⪈\",\n    gneqq: \"≩\",\n    gnsim: \"⋧\",\n    Gopf: \"\\uD835\\uDD3E\",\n    gopf: \"\\uD835\\uDD58\",\n    grave: \"`\",\n    GreaterEqual: \"≥\",\n    GreaterEqualLess: \"⋛\",\n    GreaterFullEqual: \"≧\",\n    GreaterGreater: \"⪢\",\n    GreaterLess: \"≷\",\n    GreaterSlantEqual: \"⩾\",\n    GreaterTilde: \"≳\",\n    Gscr: \"\\uD835\\uDCA2\",\n    gscr: \"ℊ\",\n    gsim: \"≳\",\n    gsime: \"⪎\",\n    gsiml: \"⪐\",\n    Gt: \"≫\",\n    GT: \">\",\n    gt: \">\",\n    gtcc: \"⪧\",\n    gtcir: \"⩺\",\n    gtdot: \"⋗\",\n    gtlPar: \"⦕\",\n    gtquest: \"⩼\",\n    gtrapprox: \"⪆\",\n    gtrarr: \"⥸\",\n    gtrdot: \"⋗\",\n    gtreqless: \"⋛\",\n    gtreqqless: \"⪌\",\n    gtrless: \"≷\",\n    gtrsim: \"≳\",\n    gvertneqq: \"≩︀\",\n    gvnE: \"≩︀\",\n    Hacek: \"ˇ\",\n    hairsp: \" \",\n    half: \"\\xbd\",\n    hamilt: \"ℋ\",\n    HARDcy: \"Ъ\",\n    hardcy: \"ъ\",\n    hArr: \"⇔\",\n    harr: \"↔\",\n    harrcir: \"⥈\",\n    harrw: \"↭\",\n    Hat: \"^\",\n    hbar: \"ℏ\",\n    Hcirc: \"Ĥ\",\n    hcirc: \"ĥ\",\n    hearts: \"♥\",\n    heartsuit: \"♥\",\n    hellip: \"…\",\n    hercon: \"⊹\",\n    Hfr: \"ℌ\",\n    hfr: \"\\uD835\\uDD25\",\n    HilbertSpace: \"ℋ\",\n    hksearow: \"⤥\",\n    hkswarow: \"⤦\",\n    hoarr: \"⇿\",\n    homtht: \"∻\",\n    hookleftarrow: \"↩\",\n    hookrightarrow: \"↪\",\n    Hopf: \"ℍ\",\n    hopf: \"\\uD835\\uDD59\",\n    horbar: \"―\",\n    HorizontalLine: \"─\",\n    Hscr: \"ℋ\",\n    hscr: \"\\uD835\\uDCBD\",\n    hslash: \"ℏ\",\n    Hstrok: \"Ħ\",\n    hstrok: \"ħ\",\n    HumpDownHump: \"≎\",\n    HumpEqual: \"≏\",\n    hybull: \"⁃\",\n    hyphen: \"‐\",\n    Iacute: \"\\xcd\",\n    iacute: \"\\xed\",\n    ic: \"⁣\",\n    Icirc: \"\\xce\",\n    icirc: \"\\xee\",\n    Icy: \"И\",\n    icy: \"и\",\n    Idot: \"İ\",\n    IEcy: \"Е\",\n    iecy: \"е\",\n    iexcl: \"\\xa1\",\n    iff: \"⇔\",\n    Ifr: \"ℑ\",\n    ifr: \"\\uD835\\uDD26\",\n    Igrave: \"\\xcc\",\n    igrave: \"\\xec\",\n    ii: \"ⅈ\",\n    iiiint: \"⨌\",\n    iiint: \"∭\",\n    iinfin: \"⧜\",\n    iiota: \"℩\",\n    IJlig: \"Ĳ\",\n    ijlig: \"ĳ\",\n    Im: \"ℑ\",\n    Imacr: \"Ī\",\n    imacr: \"ī\",\n    image: \"ℑ\",\n    ImaginaryI: \"ⅈ\",\n    imagline: \"ℐ\",\n    imagpart: \"ℑ\",\n    imath: \"ı\",\n    imof: \"⊷\",\n    imped: \"Ƶ\",\n    Implies: \"⇒\",\n    in: \"∈\",\n    incare: \"℅\",\n    infin: \"∞\",\n    infintie: \"⧝\",\n    inodot: \"ı\",\n    Int: \"∬\",\n    int: \"∫\",\n    intcal: \"⊺\",\n    integers: \"ℤ\",\n    Integral: \"∫\",\n    intercal: \"⊺\",\n    Intersection: \"⋂\",\n    intlarhk: \"⨗\",\n    intprod: \"⨼\",\n    InvisibleComma: \"⁣\",\n    InvisibleTimes: \"⁢\",\n    IOcy: \"Ё\",\n    iocy: \"ё\",\n    Iogon: \"Į\",\n    iogon: \"į\",\n    Iopf: \"\\uD835\\uDD40\",\n    iopf: \"\\uD835\\uDD5A\",\n    Iota: \"Ι\",\n    iota: \"ι\",\n    iprod: \"⨼\",\n    iquest: \"\\xbf\",\n    Iscr: \"ℐ\",\n    iscr: \"\\uD835\\uDCBE\",\n    isin: \"∈\",\n    isindot: \"⋵\",\n    isinE: \"⋹\",\n    isins: \"⋴\",\n    isinsv: \"⋳\",\n    isinv: \"∈\",\n    it: \"⁢\",\n    Itilde: \"Ĩ\",\n    itilde: \"ĩ\",\n    Iukcy: \"І\",\n    iukcy: \"і\",\n    Iuml: \"\\xcf\",\n    iuml: \"\\xef\",\n    Jcirc: \"Ĵ\",\n    jcirc: \"ĵ\",\n    Jcy: \"Й\",\n    jcy: \"й\",\n    Jfr: \"\\uD835\\uDD0D\",\n    jfr: \"\\uD835\\uDD27\",\n    jmath: \"ȷ\",\n    Jopf: \"\\uD835\\uDD41\",\n    jopf: \"\\uD835\\uDD5B\",\n    Jscr: \"\\uD835\\uDCA5\",\n    jscr: \"\\uD835\\uDCBF\",\n    Jsercy: \"Ј\",\n    jsercy: \"ј\",\n    Jukcy: \"Є\",\n    jukcy: \"є\",\n    Kappa: \"Κ\",\n    kappa: \"κ\",\n    kappav: \"ϰ\",\n    Kcedil: \"Ķ\",\n    kcedil: \"ķ\",\n    Kcy: \"К\",\n    kcy: \"к\",\n    Kfr: \"\\uD835\\uDD0E\",\n    kfr: \"\\uD835\\uDD28\",\n    kgreen: \"ĸ\",\n    KHcy: \"Х\",\n    khcy: \"х\",\n    KJcy: \"Ќ\",\n    kjcy: \"ќ\",\n    Kopf: \"\\uD835\\uDD42\",\n    kopf: \"\\uD835\\uDD5C\",\n    Kscr: \"\\uD835\\uDCA6\",\n    kscr: \"\\uD835\\uDCC0\",\n    lAarr: \"⇚\",\n    Lacute: \"Ĺ\",\n    lacute: \"ĺ\",\n    laemptyv: \"⦴\",\n    lagran: \"ℒ\",\n    Lambda: \"Λ\",\n    lambda: \"λ\",\n    Lang: \"⟪\",\n    lang: \"⟨\",\n    langd: \"⦑\",\n    langle: \"⟨\",\n    lap: \"⪅\",\n    Laplacetrf: \"ℒ\",\n    laquo: \"\\xab\",\n    Larr: \"↞\",\n    lArr: \"⇐\",\n    larr: \"←\",\n    larrb: \"⇤\",\n    larrbfs: \"⤟\",\n    larrfs: \"⤝\",\n    larrhk: \"↩\",\n    larrlp: \"↫\",\n    larrpl: \"⤹\",\n    larrsim: \"⥳\",\n    larrtl: \"↢\",\n    lat: \"⪫\",\n    lAtail: \"⤛\",\n    latail: \"⤙\",\n    late: \"⪭\",\n    lates: \"⪭︀\",\n    lBarr: \"⤎\",\n    lbarr: \"⤌\",\n    lbbrk: \"❲\",\n    lbrace: \"{\",\n    lbrack: \"[\",\n    lbrke: \"⦋\",\n    lbrksld: \"⦏\",\n    lbrkslu: \"⦍\",\n    Lcaron: \"Ľ\",\n    lcaron: \"ľ\",\n    Lcedil: \"Ļ\",\n    lcedil: \"ļ\",\n    lceil: \"⌈\",\n    lcub: \"{\",\n    Lcy: \"Л\",\n    lcy: \"л\",\n    ldca: \"⤶\",\n    ldquo: \"“\",\n    ldquor: \"„\",\n    ldrdhar: \"⥧\",\n    ldrushar: \"⥋\",\n    ldsh: \"↲\",\n    lE: \"≦\",\n    le: \"≤\",\n    LeftAngleBracket: \"⟨\",\n    LeftArrow: \"←\",\n    Leftarrow: \"⇐\",\n    leftarrow: \"←\",\n    LeftArrowBar: \"⇤\",\n    LeftArrowRightArrow: \"⇆\",\n    leftarrowtail: \"↢\",\n    LeftCeiling: \"⌈\",\n    LeftDoubleBracket: \"⟦\",\n    LeftDownTeeVector: \"⥡\",\n    LeftDownVector: \"⇃\",\n    LeftDownVectorBar: \"⥙\",\n    LeftFloor: \"⌊\",\n    leftharpoondown: \"↽\",\n    leftharpoonup: \"↼\",\n    leftleftarrows: \"⇇\",\n    LeftRightArrow: \"↔\",\n    Leftrightarrow: \"⇔\",\n    leftrightarrow: \"↔\",\n    leftrightarrows: \"⇆\",\n    leftrightharpoons: \"⇋\",\n    leftrightsquigarrow: \"↭\",\n    LeftRightVector: \"⥎\",\n    LeftTee: \"⊣\",\n    LeftTeeArrow: \"↤\",\n    LeftTeeVector: \"⥚\",\n    leftthreetimes: \"⋋\",\n    LeftTriangle: \"⊲\",\n    LeftTriangleBar: \"⧏\",\n    LeftTriangleEqual: \"⊴\",\n    LeftUpDownVector: \"⥑\",\n    LeftUpTeeVector: \"⥠\",\n    LeftUpVector: \"↿\",\n    LeftUpVectorBar: \"⥘\",\n    LeftVector: \"↼\",\n    LeftVectorBar: \"⥒\",\n    lEg: \"⪋\",\n    leg: \"⋚\",\n    leq: \"≤\",\n    leqq: \"≦\",\n    leqslant: \"⩽\",\n    les: \"⩽\",\n    lescc: \"⪨\",\n    lesdot: \"⩿\",\n    lesdoto: \"⪁\",\n    lesdotor: \"⪃\",\n    lesg: \"⋚︀\",\n    lesges: \"⪓\",\n    lessapprox: \"⪅\",\n    lessdot: \"⋖\",\n    lesseqgtr: \"⋚\",\n    lesseqqgtr: \"⪋\",\n    LessEqualGreater: \"⋚\",\n    LessFullEqual: \"≦\",\n    LessGreater: \"≶\",\n    lessgtr: \"≶\",\n    LessLess: \"⪡\",\n    lesssim: \"≲\",\n    LessSlantEqual: \"⩽\",\n    LessTilde: \"≲\",\n    lfisht: \"⥼\",\n    lfloor: \"⌊\",\n    Lfr: \"\\uD835\\uDD0F\",\n    lfr: \"\\uD835\\uDD29\",\n    lg: \"≶\",\n    lgE: \"⪑\",\n    lHar: \"⥢\",\n    lhard: \"↽\",\n    lharu: \"↼\",\n    lharul: \"⥪\",\n    lhblk: \"▄\",\n    LJcy: \"Љ\",\n    ljcy: \"љ\",\n    Ll: \"⋘\",\n    ll: \"≪\",\n    llarr: \"⇇\",\n    llcorner: \"⌞\",\n    Lleftarrow: \"⇚\",\n    llhard: \"⥫\",\n    lltri: \"◺\",\n    Lmidot: \"Ŀ\",\n    lmidot: \"ŀ\",\n    lmoust: \"⎰\",\n    lmoustache: \"⎰\",\n    lnap: \"⪉\",\n    lnapprox: \"⪉\",\n    lnE: \"≨\",\n    lne: \"⪇\",\n    lneq: \"⪇\",\n    lneqq: \"≨\",\n    lnsim: \"⋦\",\n    loang: \"⟬\",\n    loarr: \"⇽\",\n    lobrk: \"⟦\",\n    LongLeftArrow: \"⟵\",\n    Longleftarrow: \"⟸\",\n    longleftarrow: \"⟵\",\n    LongLeftRightArrow: \"⟷\",\n    Longleftrightarrow: \"⟺\",\n    longleftrightarrow: \"⟷\",\n    longmapsto: \"⟼\",\n    LongRightArrow: \"⟶\",\n    Longrightarrow: \"⟹\",\n    longrightarrow: \"⟶\",\n    looparrowleft: \"↫\",\n    looparrowright: \"↬\",\n    lopar: \"⦅\",\n    Lopf: \"\\uD835\\uDD43\",\n    lopf: \"\\uD835\\uDD5D\",\n    loplus: \"⨭\",\n    lotimes: \"⨴\",\n    lowast: \"∗\",\n    lowbar: \"_\",\n    LowerLeftArrow: \"↙\",\n    LowerRightArrow: \"↘\",\n    loz: \"◊\",\n    lozenge: \"◊\",\n    lozf: \"⧫\",\n    lpar: \"(\",\n    lparlt: \"⦓\",\n    lrarr: \"⇆\",\n    lrcorner: \"⌟\",\n    lrhar: \"⇋\",\n    lrhard: \"⥭\",\n    lrm: \"‎\",\n    lrtri: \"⊿\",\n    lsaquo: \"‹\",\n    Lscr: \"ℒ\",\n    lscr: \"\\uD835\\uDCC1\",\n    Lsh: \"↰\",\n    lsh: \"↰\",\n    lsim: \"≲\",\n    lsime: \"⪍\",\n    lsimg: \"⪏\",\n    lsqb: \"[\",\n    lsquo: \"‘\",\n    lsquor: \"‚\",\n    Lstrok: \"Ł\",\n    lstrok: \"ł\",\n    Lt: \"≪\",\n    LT: \"<\",\n    lt: \"<\",\n    ltcc: \"⪦\",\n    ltcir: \"⩹\",\n    ltdot: \"⋖\",\n    lthree: \"⋋\",\n    ltimes: \"⋉\",\n    ltlarr: \"⥶\",\n    ltquest: \"⩻\",\n    ltri: \"◃\",\n    ltrie: \"⊴\",\n    ltrif: \"◂\",\n    ltrPar: \"⦖\",\n    lurdshar: \"⥊\",\n    luruhar: \"⥦\",\n    lvertneqq: \"≨︀\",\n    lvnE: \"≨︀\",\n    macr: \"\\xaf\",\n    male: \"♂\",\n    malt: \"✠\",\n    maltese: \"✠\",\n    Map: \"⤅\",\n    map: \"↦\",\n    mapsto: \"↦\",\n    mapstodown: \"↧\",\n    mapstoleft: \"↤\",\n    mapstoup: \"↥\",\n    marker: \"▮\",\n    mcomma: \"⨩\",\n    Mcy: \"М\",\n    mcy: \"м\",\n    mdash: \"—\",\n    mDDot: \"∺\",\n    measuredangle: \"∡\",\n    MediumSpace: \" \",\n    Mellintrf: \"ℳ\",\n    Mfr: \"\\uD835\\uDD10\",\n    mfr: \"\\uD835\\uDD2A\",\n    mho: \"℧\",\n    micro: \"\\xb5\",\n    mid: \"∣\",\n    midast: \"*\",\n    midcir: \"⫰\",\n    middot: \"\\xb7\",\n    minus: \"−\",\n    minusb: \"⊟\",\n    minusd: \"∸\",\n    minusdu: \"⨪\",\n    MinusPlus: \"∓\",\n    mlcp: \"⫛\",\n    mldr: \"…\",\n    mnplus: \"∓\",\n    models: \"⊧\",\n    Mopf: \"\\uD835\\uDD44\",\n    mopf: \"\\uD835\\uDD5E\",\n    mp: \"∓\",\n    Mscr: \"ℳ\",\n    mscr: \"\\uD835\\uDCC2\",\n    mstpos: \"∾\",\n    Mu: \"Μ\",\n    mu: \"μ\",\n    multimap: \"⊸\",\n    mumap: \"⊸\",\n    nabla: \"∇\",\n    Nacute: \"Ń\",\n    nacute: \"ń\",\n    nang: \"∠⃒\",\n    nap: \"≉\",\n    napE: \"⩰̸\",\n    napid: \"≋̸\",\n    napos: \"ŉ\",\n    napprox: \"≉\",\n    natur: \"♮\",\n    natural: \"♮\",\n    naturals: \"ℕ\",\n    nbsp: \"\\xa0\",\n    nbump: \"≎̸\",\n    nbumpe: \"≏̸\",\n    ncap: \"⩃\",\n    Ncaron: \"Ň\",\n    ncaron: \"ň\",\n    Ncedil: \"Ņ\",\n    ncedil: \"ņ\",\n    ncong: \"≇\",\n    ncongdot: \"⩭̸\",\n    ncup: \"⩂\",\n    Ncy: \"Н\",\n    ncy: \"н\",\n    ndash: \"–\",\n    ne: \"≠\",\n    nearhk: \"⤤\",\n    neArr: \"⇗\",\n    nearr: \"↗\",\n    nearrow: \"↗\",\n    nedot: \"≐̸\",\n    NegativeMediumSpace: \"​\",\n    NegativeThickSpace: \"​\",\n    NegativeThinSpace: \"​\",\n    NegativeVeryThinSpace: \"​\",\n    nequiv: \"≢\",\n    nesear: \"⤨\",\n    nesim: \"≂̸\",\n    NestedGreaterGreater: \"≫\",\n    NestedLessLess: \"≪\",\n    NewLine: \"\\n\",\n    nexist: \"∄\",\n    nexists: \"∄\",\n    Nfr: \"\\uD835\\uDD11\",\n    nfr: \"\\uD835\\uDD2B\",\n    ngE: \"≧̸\",\n    nge: \"≱\",\n    ngeq: \"≱\",\n    ngeqq: \"≧̸\",\n    ngeqslant: \"⩾̸\",\n    nges: \"⩾̸\",\n    nGg: \"⋙̸\",\n    ngsim: \"≵\",\n    nGt: \"≫⃒\",\n    ngt: \"≯\",\n    ngtr: \"≯\",\n    nGtv: \"≫̸\",\n    nhArr: \"⇎\",\n    nharr: \"↮\",\n    nhpar: \"⫲\",\n    ni: \"∋\",\n    nis: \"⋼\",\n    nisd: \"⋺\",\n    niv: \"∋\",\n    NJcy: \"Њ\",\n    njcy: \"њ\",\n    nlArr: \"⇍\",\n    nlarr: \"↚\",\n    nldr: \"‥\",\n    nlE: \"≦̸\",\n    nle: \"≰\",\n    nLeftarrow: \"⇍\",\n    nleftarrow: \"↚\",\n    nLeftrightarrow: \"⇎\",\n    nleftrightarrow: \"↮\",\n    nleq: \"≰\",\n    nleqq: \"≦̸\",\n    nleqslant: \"⩽̸\",\n    nles: \"⩽̸\",\n    nless: \"≮\",\n    nLl: \"⋘̸\",\n    nlsim: \"≴\",\n    nLt: \"≪⃒\",\n    nlt: \"≮\",\n    nltri: \"⋪\",\n    nltrie: \"⋬\",\n    nLtv: \"≪̸\",\n    nmid: \"∤\",\n    NoBreak: \"⁠\",\n    NonBreakingSpace: \"\\xa0\",\n    Nopf: \"ℕ\",\n    nopf: \"\\uD835\\uDD5F\",\n    Not: \"⫬\",\n    not: \"\\xac\",\n    NotCongruent: \"≢\",\n    NotCupCap: \"≭\",\n    NotDoubleVerticalBar: \"∦\",\n    NotElement: \"∉\",\n    NotEqual: \"≠\",\n    NotEqualTilde: \"≂̸\",\n    NotExists: \"∄\",\n    NotGreater: \"≯\",\n    NotGreaterEqual: \"≱\",\n    NotGreaterFullEqual: \"≧̸\",\n    NotGreaterGreater: \"≫̸\",\n    NotGreaterLess: \"≹\",\n    NotGreaterSlantEqual: \"⩾̸\",\n    NotGreaterTilde: \"≵\",\n    NotHumpDownHump: \"≎̸\",\n    NotHumpEqual: \"≏̸\",\n    notin: \"∉\",\n    notindot: \"⋵̸\",\n    notinE: \"⋹̸\",\n    notinva: \"∉\",\n    notinvb: \"⋷\",\n    notinvc: \"⋶\",\n    NotLeftTriangle: \"⋪\",\n    NotLeftTriangleBar: \"⧏̸\",\n    NotLeftTriangleEqual: \"⋬\",\n    NotLess: \"≮\",\n    NotLessEqual: \"≰\",\n    NotLessGreater: \"≸\",\n    NotLessLess: \"≪̸\",\n    NotLessSlantEqual: \"⩽̸\",\n    NotLessTilde: \"≴\",\n    NotNestedGreaterGreater: \"⪢̸\",\n    NotNestedLessLess: \"⪡̸\",\n    notni: \"∌\",\n    notniva: \"∌\",\n    notnivb: \"⋾\",\n    notnivc: \"⋽\",\n    NotPrecedes: \"⊀\",\n    NotPrecedesEqual: \"⪯̸\",\n    NotPrecedesSlantEqual: \"⋠\",\n    NotReverseElement: \"∌\",\n    NotRightTriangle: \"⋫\",\n    NotRightTriangleBar: \"⧐̸\",\n    NotRightTriangleEqual: \"⋭\",\n    NotSquareSubset: \"⊏̸\",\n    NotSquareSubsetEqual: \"⋢\",\n    NotSquareSuperset: \"⊐̸\",\n    NotSquareSupersetEqual: \"⋣\",\n    NotSubset: \"⊂⃒\",\n    NotSubsetEqual: \"⊈\",\n    NotSucceeds: \"⊁\",\n    NotSucceedsEqual: \"⪰̸\",\n    NotSucceedsSlantEqual: \"⋡\",\n    NotSucceedsTilde: \"≿̸\",\n    NotSuperset: \"⊃⃒\",\n    NotSupersetEqual: \"⊉\",\n    NotTilde: \"≁\",\n    NotTildeEqual: \"≄\",\n    NotTildeFullEqual: \"≇\",\n    NotTildeTilde: \"≉\",\n    NotVerticalBar: \"∤\",\n    npar: \"∦\",\n    nparallel: \"∦\",\n    nparsl: \"⫽⃥\",\n    npart: \"∂̸\",\n    npolint: \"⨔\",\n    npr: \"⊀\",\n    nprcue: \"⋠\",\n    npre: \"⪯̸\",\n    nprec: \"⊀\",\n    npreceq: \"⪯̸\",\n    nrArr: \"⇏\",\n    nrarr: \"↛\",\n    nrarrc: \"⤳̸\",\n    nrarrw: \"↝̸\",\n    nRightarrow: \"⇏\",\n    nrightarrow: \"↛\",\n    nrtri: \"⋫\",\n    nrtrie: \"⋭\",\n    nsc: \"⊁\",\n    nsccue: \"⋡\",\n    nsce: \"⪰̸\",\n    Nscr: \"\\uD835\\uDCA9\",\n    nscr: \"\\uD835\\uDCC3\",\n    nshortmid: \"∤\",\n    nshortparallel: \"∦\",\n    nsim: \"≁\",\n    nsime: \"≄\",\n    nsimeq: \"≄\",\n    nsmid: \"∤\",\n    nspar: \"∦\",\n    nsqsube: \"⋢\",\n    nsqsupe: \"⋣\",\n    nsub: \"⊄\",\n    nsubE: \"⫅̸\",\n    nsube: \"⊈\",\n    nsubset: \"⊂⃒\",\n    nsubseteq: \"⊈\",\n    nsubseteqq: \"⫅̸\",\n    nsucc: \"⊁\",\n    nsucceq: \"⪰̸\",\n    nsup: \"⊅\",\n    nsupE: \"⫆̸\",\n    nsupe: \"⊉\",\n    nsupset: \"⊃⃒\",\n    nsupseteq: \"⊉\",\n    nsupseteqq: \"⫆̸\",\n    ntgl: \"≹\",\n    Ntilde: \"\\xd1\",\n    ntilde: \"\\xf1\",\n    ntlg: \"≸\",\n    ntriangleleft: \"⋪\",\n    ntrianglelefteq: \"⋬\",\n    ntriangleright: \"⋫\",\n    ntrianglerighteq: \"⋭\",\n    Nu: \"Ν\",\n    nu: \"ν\",\n    num: \"#\",\n    numero: \"№\",\n    numsp: \" \",\n    nvap: \"≍⃒\",\n    nVDash: \"⊯\",\n    nVdash: \"⊮\",\n    nvDash: \"⊭\",\n    nvdash: \"⊬\",\n    nvge: \"≥⃒\",\n    nvgt: \">⃒\",\n    nvHarr: \"⤄\",\n    nvinfin: \"⧞\",\n    nvlArr: \"⤂\",\n    nvle: \"≤⃒\",\n    nvlt: \"<⃒\",\n    nvltrie: \"⊴⃒\",\n    nvrArr: \"⤃\",\n    nvrtrie: \"⊵⃒\",\n    nvsim: \"∼⃒\",\n    nwarhk: \"⤣\",\n    nwArr: \"⇖\",\n    nwarr: \"↖\",\n    nwarrow: \"↖\",\n    nwnear: \"⤧\",\n    Oacute: \"\\xd3\",\n    oacute: \"\\xf3\",\n    oast: \"⊛\",\n    ocir: \"⊚\",\n    Ocirc: \"\\xd4\",\n    ocirc: \"\\xf4\",\n    Ocy: \"О\",\n    ocy: \"о\",\n    odash: \"⊝\",\n    Odblac: \"Ő\",\n    odblac: \"ő\",\n    odiv: \"⨸\",\n    odot: \"⊙\",\n    odsold: \"⦼\",\n    OElig: \"Œ\",\n    oelig: \"œ\",\n    ofcir: \"⦿\",\n    Ofr: \"\\uD835\\uDD12\",\n    ofr: \"\\uD835\\uDD2C\",\n    ogon: \"˛\",\n    Ograve: \"\\xd2\",\n    ograve: \"\\xf2\",\n    ogt: \"⧁\",\n    ohbar: \"⦵\",\n    ohm: \"Ω\",\n    oint: \"∮\",\n    olarr: \"↺\",\n    olcir: \"⦾\",\n    olcross: \"⦻\",\n    oline: \"‾\",\n    olt: \"⧀\",\n    Omacr: \"Ō\",\n    omacr: \"ō\",\n    Omega: \"Ω\",\n    omega: \"ω\",\n    Omicron: \"Ο\",\n    omicron: \"ο\",\n    omid: \"⦶\",\n    ominus: \"⊖\",\n    Oopf: \"\\uD835\\uDD46\",\n    oopf: \"\\uD835\\uDD60\",\n    opar: \"⦷\",\n    OpenCurlyDoubleQuote: \"“\",\n    OpenCurlyQuote: \"‘\",\n    operp: \"⦹\",\n    oplus: \"⊕\",\n    Or: \"⩔\",\n    or: \"∨\",\n    orarr: \"↻\",\n    ord: \"⩝\",\n    order: \"ℴ\",\n    orderof: \"ℴ\",\n    ordf: \"\\xaa\",\n    ordm: \"\\xba\",\n    origof: \"⊶\",\n    oror: \"⩖\",\n    orslope: \"⩗\",\n    orv: \"⩛\",\n    oS: \"Ⓢ\",\n    Oscr: \"\\uD835\\uDCAA\",\n    oscr: \"ℴ\",\n    Oslash: \"\\xd8\",\n    oslash: \"\\xf8\",\n    osol: \"⊘\",\n    Otilde: \"\\xd5\",\n    otilde: \"\\xf5\",\n    Otimes: \"⨷\",\n    otimes: \"⊗\",\n    otimesas: \"⨶\",\n    Ouml: \"\\xd6\",\n    ouml: \"\\xf6\",\n    ovbar: \"⌽\",\n    OverBar: \"‾\",\n    OverBrace: \"⏞\",\n    OverBracket: \"⎴\",\n    OverParenthesis: \"⏜\",\n    par: \"∥\",\n    para: \"\\xb6\",\n    parallel: \"∥\",\n    parsim: \"⫳\",\n    parsl: \"⫽\",\n    part: \"∂\",\n    PartialD: \"∂\",\n    Pcy: \"П\",\n    pcy: \"п\",\n    percnt: \"%\",\n    period: \".\",\n    permil: \"‰\",\n    perp: \"⊥\",\n    pertenk: \"‱\",\n    Pfr: \"\\uD835\\uDD13\",\n    pfr: \"\\uD835\\uDD2D\",\n    Phi: \"Φ\",\n    phi: \"φ\",\n    phiv: \"ϕ\",\n    phmmat: \"ℳ\",\n    phone: \"☎\",\n    Pi: \"Π\",\n    pi: \"π\",\n    pitchfork: \"⋔\",\n    piv: \"ϖ\",\n    planck: \"ℏ\",\n    planckh: \"ℎ\",\n    plankv: \"ℏ\",\n    plus: \"+\",\n    plusacir: \"⨣\",\n    plusb: \"⊞\",\n    pluscir: \"⨢\",\n    plusdo: \"∔\",\n    plusdu: \"⨥\",\n    pluse: \"⩲\",\n    PlusMinus: \"\\xb1\",\n    plusmn: \"\\xb1\",\n    plussim: \"⨦\",\n    plustwo: \"⨧\",\n    pm: \"\\xb1\",\n    Poincareplane: \"ℌ\",\n    pointint: \"⨕\",\n    Popf: \"ℙ\",\n    popf: \"\\uD835\\uDD61\",\n    pound: \"\\xa3\",\n    Pr: \"⪻\",\n    pr: \"≺\",\n    prap: \"⪷\",\n    prcue: \"≼\",\n    prE: \"⪳\",\n    pre: \"⪯\",\n    prec: \"≺\",\n    precapprox: \"⪷\",\n    preccurlyeq: \"≼\",\n    Precedes: \"≺\",\n    PrecedesEqual: \"⪯\",\n    PrecedesSlantEqual: \"≼\",\n    PrecedesTilde: \"≾\",\n    preceq: \"⪯\",\n    precnapprox: \"⪹\",\n    precneqq: \"⪵\",\n    precnsim: \"⋨\",\n    precsim: \"≾\",\n    Prime: \"″\",\n    prime: \"′\",\n    primes: \"ℙ\",\n    prnap: \"⪹\",\n    prnE: \"⪵\",\n    prnsim: \"⋨\",\n    prod: \"∏\",\n    Product: \"∏\",\n    profalar: \"⌮\",\n    profline: \"⌒\",\n    profsurf: \"⌓\",\n    prop: \"∝\",\n    Proportion: \"∷\",\n    Proportional: \"∝\",\n    propto: \"∝\",\n    prsim: \"≾\",\n    prurel: \"⊰\",\n    Pscr: \"\\uD835\\uDCAB\",\n    pscr: \"\\uD835\\uDCC5\",\n    Psi: \"Ψ\",\n    psi: \"ψ\",\n    puncsp: \" \",\n    Qfr: \"\\uD835\\uDD14\",\n    qfr: \"\\uD835\\uDD2E\",\n    qint: \"⨌\",\n    Qopf: \"ℚ\",\n    qopf: \"\\uD835\\uDD62\",\n    qprime: \"⁗\",\n    Qscr: \"\\uD835\\uDCAC\",\n    qscr: \"\\uD835\\uDCC6\",\n    quaternions: \"ℍ\",\n    quatint: \"⨖\",\n    quest: \"?\",\n    questeq: \"≟\",\n    QUOT: '\"',\n    quot: '\"',\n    rAarr: \"⇛\",\n    race: \"∽̱\",\n    Racute: \"Ŕ\",\n    racute: \"ŕ\",\n    radic: \"√\",\n    raemptyv: \"⦳\",\n    Rang: \"⟫\",\n    rang: \"⟩\",\n    rangd: \"⦒\",\n    range: \"⦥\",\n    rangle: \"⟩\",\n    raquo: \"\\xbb\",\n    Rarr: \"↠\",\n    rArr: \"⇒\",\n    rarr: \"→\",\n    rarrap: \"⥵\",\n    rarrb: \"⇥\",\n    rarrbfs: \"⤠\",\n    rarrc: \"⤳\",\n    rarrfs: \"⤞\",\n    rarrhk: \"↪\",\n    rarrlp: \"↬\",\n    rarrpl: \"⥅\",\n    rarrsim: \"⥴\",\n    Rarrtl: \"⤖\",\n    rarrtl: \"↣\",\n    rarrw: \"↝\",\n    rAtail: \"⤜\",\n    ratail: \"⤚\",\n    ratio: \"∶\",\n    rationals: \"ℚ\",\n    RBarr: \"⤐\",\n    rBarr: \"⤏\",\n    rbarr: \"⤍\",\n    rbbrk: \"❳\",\n    rbrace: \"}\",\n    rbrack: \"]\",\n    rbrke: \"⦌\",\n    rbrksld: \"⦎\",\n    rbrkslu: \"⦐\",\n    Rcaron: \"Ř\",\n    rcaron: \"ř\",\n    Rcedil: \"Ŗ\",\n    rcedil: \"ŗ\",\n    rceil: \"⌉\",\n    rcub: \"}\",\n    Rcy: \"Р\",\n    rcy: \"р\",\n    rdca: \"⤷\",\n    rdldhar: \"⥩\",\n    rdquo: \"”\",\n    rdquor: \"”\",\n    rdsh: \"↳\",\n    Re: \"ℜ\",\n    real: \"ℜ\",\n    realine: \"ℛ\",\n    realpart: \"ℜ\",\n    reals: \"ℝ\",\n    rect: \"▭\",\n    REG: \"\\xae\",\n    reg: \"\\xae\",\n    ReverseElement: \"∋\",\n    ReverseEquilibrium: \"⇋\",\n    ReverseUpEquilibrium: \"⥯\",\n    rfisht: \"⥽\",\n    rfloor: \"⌋\",\n    Rfr: \"ℜ\",\n    rfr: \"\\uD835\\uDD2F\",\n    rHar: \"⥤\",\n    rhard: \"⇁\",\n    rharu: \"⇀\",\n    rharul: \"⥬\",\n    Rho: \"Ρ\",\n    rho: \"ρ\",\n    rhov: \"ϱ\",\n    RightAngleBracket: \"⟩\",\n    RightArrow: \"→\",\n    Rightarrow: \"⇒\",\n    rightarrow: \"→\",\n    RightArrowBar: \"⇥\",\n    RightArrowLeftArrow: \"⇄\",\n    rightarrowtail: \"↣\",\n    RightCeiling: \"⌉\",\n    RightDoubleBracket: \"⟧\",\n    RightDownTeeVector: \"⥝\",\n    RightDownVector: \"⇂\",\n    RightDownVectorBar: \"⥕\",\n    RightFloor: \"⌋\",\n    rightharpoondown: \"⇁\",\n    rightharpoonup: \"⇀\",\n    rightleftarrows: \"⇄\",\n    rightleftharpoons: \"⇌\",\n    rightrightarrows: \"⇉\",\n    rightsquigarrow: \"↝\",\n    RightTee: \"⊢\",\n    RightTeeArrow: \"↦\",\n    RightTeeVector: \"⥛\",\n    rightthreetimes: \"⋌\",\n    RightTriangle: \"⊳\",\n    RightTriangleBar: \"⧐\",\n    RightTriangleEqual: \"⊵\",\n    RightUpDownVector: \"⥏\",\n    RightUpTeeVector: \"⥜\",\n    RightUpVector: \"↾\",\n    RightUpVectorBar: \"⥔\",\n    RightVector: \"⇀\",\n    RightVectorBar: \"⥓\",\n    ring: \"˚\",\n    risingdotseq: \"≓\",\n    rlarr: \"⇄\",\n    rlhar: \"⇌\",\n    rlm: \"‏\",\n    rmoust: \"⎱\",\n    rmoustache: \"⎱\",\n    rnmid: \"⫮\",\n    roang: \"⟭\",\n    roarr: \"⇾\",\n    robrk: \"⟧\",\n    ropar: \"⦆\",\n    Ropf: \"ℝ\",\n    ropf: \"\\uD835\\uDD63\",\n    roplus: \"⨮\",\n    rotimes: \"⨵\",\n    RoundImplies: \"⥰\",\n    rpar: \")\",\n    rpargt: \"⦔\",\n    rppolint: \"⨒\",\n    rrarr: \"⇉\",\n    Rrightarrow: \"⇛\",\n    rsaquo: \"›\",\n    Rscr: \"ℛ\",\n    rscr: \"\\uD835\\uDCC7\",\n    Rsh: \"↱\",\n    rsh: \"↱\",\n    rsqb: \"]\",\n    rsquo: \"’\",\n    rsquor: \"’\",\n    rthree: \"⋌\",\n    rtimes: \"⋊\",\n    rtri: \"▹\",\n    rtrie: \"⊵\",\n    rtrif: \"▸\",\n    rtriltri: \"⧎\",\n    RuleDelayed: \"⧴\",\n    ruluhar: \"⥨\",\n    rx: \"℞\",\n    Sacute: \"Ś\",\n    sacute: \"ś\",\n    sbquo: \"‚\",\n    Sc: \"⪼\",\n    sc: \"≻\",\n    scap: \"⪸\",\n    Scaron: \"Š\",\n    scaron: \"š\",\n    sccue: \"≽\",\n    scE: \"⪴\",\n    sce: \"⪰\",\n    Scedil: \"Ş\",\n    scedil: \"ş\",\n    Scirc: \"Ŝ\",\n    scirc: \"ŝ\",\n    scnap: \"⪺\",\n    scnE: \"⪶\",\n    scnsim: \"⋩\",\n    scpolint: \"⨓\",\n    scsim: \"≿\",\n    Scy: \"С\",\n    scy: \"с\",\n    sdot: \"⋅\",\n    sdotb: \"⊡\",\n    sdote: \"⩦\",\n    searhk: \"⤥\",\n    seArr: \"⇘\",\n    searr: \"↘\",\n    searrow: \"↘\",\n    sect: \"\\xa7\",\n    semi: \";\",\n    seswar: \"⤩\",\n    setminus: \"∖\",\n    setmn: \"∖\",\n    sext: \"✶\",\n    Sfr: \"\\uD835\\uDD16\",\n    sfr: \"\\uD835\\uDD30\",\n    sfrown: \"⌢\",\n    sharp: \"♯\",\n    SHCHcy: \"Щ\",\n    shchcy: \"щ\",\n    SHcy: \"Ш\",\n    shcy: \"ш\",\n    ShortDownArrow: \"↓\",\n    ShortLeftArrow: \"←\",\n    shortmid: \"∣\",\n    shortparallel: \"∥\",\n    ShortRightArrow: \"→\",\n    ShortUpArrow: \"↑\",\n    shy: \"\\xad\",\n    Sigma: \"Σ\",\n    sigma: \"σ\",\n    sigmaf: \"ς\",\n    sigmav: \"ς\",\n    sim: \"∼\",\n    simdot: \"⩪\",\n    sime: \"≃\",\n    simeq: \"≃\",\n    simg: \"⪞\",\n    simgE: \"⪠\",\n    siml: \"⪝\",\n    simlE: \"⪟\",\n    simne: \"≆\",\n    simplus: \"⨤\",\n    simrarr: \"⥲\",\n    slarr: \"←\",\n    SmallCircle: \"∘\",\n    smallsetminus: \"∖\",\n    smashp: \"⨳\",\n    smeparsl: \"⧤\",\n    smid: \"∣\",\n    smile: \"⌣\",\n    smt: \"⪪\",\n    smte: \"⪬\",\n    smtes: \"⪬︀\",\n    SOFTcy: \"Ь\",\n    softcy: \"ь\",\n    sol: \"/\",\n    solb: \"⧄\",\n    solbar: \"⌿\",\n    Sopf: \"\\uD835\\uDD4A\",\n    sopf: \"\\uD835\\uDD64\",\n    spades: \"♠\",\n    spadesuit: \"♠\",\n    spar: \"∥\",\n    sqcap: \"⊓\",\n    sqcaps: \"⊓︀\",\n    sqcup: \"⊔\",\n    sqcups: \"⊔︀\",\n    Sqrt: \"√\",\n    sqsub: \"⊏\",\n    sqsube: \"⊑\",\n    sqsubset: \"⊏\",\n    sqsubseteq: \"⊑\",\n    sqsup: \"⊐\",\n    sqsupe: \"⊒\",\n    sqsupset: \"⊐\",\n    sqsupseteq: \"⊒\",\n    squ: \"□\",\n    Square: \"□\",\n    square: \"□\",\n    SquareIntersection: \"⊓\",\n    SquareSubset: \"⊏\",\n    SquareSubsetEqual: \"⊑\",\n    SquareSuperset: \"⊐\",\n    SquareSupersetEqual: \"⊒\",\n    SquareUnion: \"⊔\",\n    squarf: \"▪\",\n    squf: \"▪\",\n    srarr: \"→\",\n    Sscr: \"\\uD835\\uDCAE\",\n    sscr: \"\\uD835\\uDCC8\",\n    ssetmn: \"∖\",\n    ssmile: \"⌣\",\n    sstarf: \"⋆\",\n    Star: \"⋆\",\n    star: \"☆\",\n    starf: \"★\",\n    straightepsilon: \"ϵ\",\n    straightphi: \"ϕ\",\n    strns: \"\\xaf\",\n    Sub: \"⋐\",\n    sub: \"⊂\",\n    subdot: \"⪽\",\n    subE: \"⫅\",\n    sube: \"⊆\",\n    subedot: \"⫃\",\n    submult: \"⫁\",\n    subnE: \"⫋\",\n    subne: \"⊊\",\n    subplus: \"⪿\",\n    subrarr: \"⥹\",\n    Subset: \"⋐\",\n    subset: \"⊂\",\n    subseteq: \"⊆\",\n    subseteqq: \"⫅\",\n    SubsetEqual: \"⊆\",\n    subsetneq: \"⊊\",\n    subsetneqq: \"⫋\",\n    subsim: \"⫇\",\n    subsub: \"⫕\",\n    subsup: \"⫓\",\n    succ: \"≻\",\n    succapprox: \"⪸\",\n    succcurlyeq: \"≽\",\n    Succeeds: \"≻\",\n    SucceedsEqual: \"⪰\",\n    SucceedsSlantEqual: \"≽\",\n    SucceedsTilde: \"≿\",\n    succeq: \"⪰\",\n    succnapprox: \"⪺\",\n    succneqq: \"⪶\",\n    succnsim: \"⋩\",\n    succsim: \"≿\",\n    SuchThat: \"∋\",\n    Sum: \"∑\",\n    sum: \"∑\",\n    sung: \"♪\",\n    Sup: \"⋑\",\n    sup: \"⊃\",\n    sup1: \"\\xb9\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    supdot: \"⪾\",\n    supdsub: \"⫘\",\n    supE: \"⫆\",\n    supe: \"⊇\",\n    supedot: \"⫄\",\n    Superset: \"⊃\",\n    SupersetEqual: \"⊇\",\n    suphsol: \"⟉\",\n    suphsub: \"⫗\",\n    suplarr: \"⥻\",\n    supmult: \"⫂\",\n    supnE: \"⫌\",\n    supne: \"⊋\",\n    supplus: \"⫀\",\n    Supset: \"⋑\",\n    supset: \"⊃\",\n    supseteq: \"⊇\",\n    supseteqq: \"⫆\",\n    supsetneq: \"⊋\",\n    supsetneqq: \"⫌\",\n    supsim: \"⫈\",\n    supsub: \"⫔\",\n    supsup: \"⫖\",\n    swarhk: \"⤦\",\n    swArr: \"⇙\",\n    swarr: \"↙\",\n    swarrow: \"↙\",\n    swnwar: \"⤪\",\n    szlig: \"\\xdf\",\n    Tab: \"\t\",\n    target: \"⌖\",\n    Tau: \"Τ\",\n    tau: \"τ\",\n    tbrk: \"⎴\",\n    Tcaron: \"Ť\",\n    tcaron: \"ť\",\n    Tcedil: \"Ţ\",\n    tcedil: \"ţ\",\n    Tcy: \"Т\",\n    tcy: \"т\",\n    tdot: \"⃛\",\n    telrec: \"⌕\",\n    Tfr: \"\\uD835\\uDD17\",\n    tfr: \"\\uD835\\uDD31\",\n    there4: \"∴\",\n    Therefore: \"∴\",\n    therefore: \"∴\",\n    Theta: \"Θ\",\n    theta: \"θ\",\n    thetasym: \"ϑ\",\n    thetav: \"ϑ\",\n    thickapprox: \"≈\",\n    thicksim: \"∼\",\n    ThickSpace: \"  \",\n    thinsp: \" \",\n    ThinSpace: \" \",\n    thkap: \"≈\",\n    thksim: \"∼\",\n    THORN: \"\\xde\",\n    thorn: \"\\xfe\",\n    Tilde: \"∼\",\n    tilde: \"˜\",\n    TildeEqual: \"≃\",\n    TildeFullEqual: \"≅\",\n    TildeTilde: \"≈\",\n    times: \"\\xd7\",\n    timesb: \"⊠\",\n    timesbar: \"⨱\",\n    timesd: \"⨰\",\n    tint: \"∭\",\n    toea: \"⤨\",\n    top: \"⊤\",\n    topbot: \"⌶\",\n    topcir: \"⫱\",\n    Topf: \"\\uD835\\uDD4B\",\n    topf: \"\\uD835\\uDD65\",\n    topfork: \"⫚\",\n    tosa: \"⤩\",\n    tprime: \"‴\",\n    TRADE: \"™\",\n    trade: \"™\",\n    triangle: \"▵\",\n    triangledown: \"▿\",\n    triangleleft: \"◃\",\n    trianglelefteq: \"⊴\",\n    triangleq: \"≜\",\n    triangleright: \"▹\",\n    trianglerighteq: \"⊵\",\n    tridot: \"◬\",\n    trie: \"≜\",\n    triminus: \"⨺\",\n    TripleDot: \"⃛\",\n    triplus: \"⨹\",\n    trisb: \"⧍\",\n    tritime: \"⨻\",\n    trpezium: \"⏢\",\n    Tscr: \"\\uD835\\uDCAF\",\n    tscr: \"\\uD835\\uDCC9\",\n    TScy: \"Ц\",\n    tscy: \"ц\",\n    TSHcy: \"Ћ\",\n    tshcy: \"ћ\",\n    Tstrok: \"Ŧ\",\n    tstrok: \"ŧ\",\n    twixt: \"≬\",\n    twoheadleftarrow: \"↞\",\n    twoheadrightarrow: \"↠\",\n    Uacute: \"\\xda\",\n    uacute: \"\\xfa\",\n    Uarr: \"↟\",\n    uArr: \"⇑\",\n    uarr: \"↑\",\n    Uarrocir: \"⥉\",\n    Ubrcy: \"Ў\",\n    ubrcy: \"ў\",\n    Ubreve: \"Ŭ\",\n    ubreve: \"ŭ\",\n    Ucirc: \"\\xdb\",\n    ucirc: \"\\xfb\",\n    Ucy: \"У\",\n    ucy: \"у\",\n    udarr: \"⇅\",\n    Udblac: \"Ű\",\n    udblac: \"ű\",\n    udhar: \"⥮\",\n    ufisht: \"⥾\",\n    Ufr: \"\\uD835\\uDD18\",\n    ufr: \"\\uD835\\uDD32\",\n    Ugrave: \"\\xd9\",\n    ugrave: \"\\xf9\",\n    uHar: \"⥣\",\n    uharl: \"↿\",\n    uharr: \"↾\",\n    uhblk: \"▀\",\n    ulcorn: \"⌜\",\n    ulcorner: \"⌜\",\n    ulcrop: \"⌏\",\n    ultri: \"◸\",\n    Umacr: \"Ū\",\n    umacr: \"ū\",\n    uml: \"\\xa8\",\n    UnderBar: \"_\",\n    UnderBrace: \"⏟\",\n    UnderBracket: \"⎵\",\n    UnderParenthesis: \"⏝\",\n    Union: \"⋃\",\n    UnionPlus: \"⊎\",\n    Uogon: \"Ų\",\n    uogon: \"ų\",\n    Uopf: \"\\uD835\\uDD4C\",\n    uopf: \"\\uD835\\uDD66\",\n    UpArrow: \"↑\",\n    Uparrow: \"⇑\",\n    uparrow: \"↑\",\n    UpArrowBar: \"⤒\",\n    UpArrowDownArrow: \"⇅\",\n    UpDownArrow: \"↕\",\n    Updownarrow: \"⇕\",\n    updownarrow: \"↕\",\n    UpEquilibrium: \"⥮\",\n    upharpoonleft: \"↿\",\n    upharpoonright: \"↾\",\n    uplus: \"⊎\",\n    UpperLeftArrow: \"↖\",\n    UpperRightArrow: \"↗\",\n    Upsi: \"ϒ\",\n    upsi: \"υ\",\n    upsih: \"ϒ\",\n    Upsilon: \"Υ\",\n    upsilon: \"υ\",\n    UpTee: \"⊥\",\n    UpTeeArrow: \"↥\",\n    upuparrows: \"⇈\",\n    urcorn: \"⌝\",\n    urcorner: \"⌝\",\n    urcrop: \"⌎\",\n    Uring: \"Ů\",\n    uring: \"ů\",\n    urtri: \"◹\",\n    Uscr: \"\\uD835\\uDCB0\",\n    uscr: \"\\uD835\\uDCCA\",\n    utdot: \"⋰\",\n    Utilde: \"Ũ\",\n    utilde: \"ũ\",\n    utri: \"▵\",\n    utrif: \"▴\",\n    uuarr: \"⇈\",\n    Uuml: \"\\xdc\",\n    uuml: \"\\xfc\",\n    uwangle: \"⦧\",\n    vangrt: \"⦜\",\n    varepsilon: \"ϵ\",\n    varkappa: \"ϰ\",\n    varnothing: \"∅\",\n    varphi: \"ϕ\",\n    varpi: \"ϖ\",\n    varpropto: \"∝\",\n    vArr: \"⇕\",\n    varr: \"↕\",\n    varrho: \"ϱ\",\n    varsigma: \"ς\",\n    varsubsetneq: \"⊊︀\",\n    varsubsetneqq: \"⫋︀\",\n    varsupsetneq: \"⊋︀\",\n    varsupsetneqq: \"⫌︀\",\n    vartheta: \"ϑ\",\n    vartriangleleft: \"⊲\",\n    vartriangleright: \"⊳\",\n    Vbar: \"⫫\",\n    vBar: \"⫨\",\n    vBarv: \"⫩\",\n    Vcy: \"В\",\n    vcy: \"в\",\n    VDash: \"⊫\",\n    Vdash: \"⊩\",\n    vDash: \"⊨\",\n    vdash: \"⊢\",\n    Vdashl: \"⫦\",\n    Vee: \"⋁\",\n    vee: \"∨\",\n    veebar: \"⊻\",\n    veeeq: \"≚\",\n    vellip: \"⋮\",\n    Verbar: \"‖\",\n    verbar: \"|\",\n    Vert: \"‖\",\n    vert: \"|\",\n    VerticalBar: \"∣\",\n    VerticalLine: \"|\",\n    VerticalSeparator: \"❘\",\n    VerticalTilde: \"≀\",\n    VeryThinSpace: \" \",\n    Vfr: \"\\uD835\\uDD19\",\n    vfr: \"\\uD835\\uDD33\",\n    vltri: \"⊲\",\n    vnsub: \"⊂⃒\",\n    vnsup: \"⊃⃒\",\n    Vopf: \"\\uD835\\uDD4D\",\n    vopf: \"\\uD835\\uDD67\",\n    vprop: \"∝\",\n    vrtri: \"⊳\",\n    Vscr: \"\\uD835\\uDCB1\",\n    vscr: \"\\uD835\\uDCCB\",\n    vsubnE: \"⫋︀\",\n    vsubne: \"⊊︀\",\n    vsupnE: \"⫌︀\",\n    vsupne: \"⊋︀\",\n    Vvdash: \"⊪\",\n    vzigzag: \"⦚\",\n    Wcirc: \"Ŵ\",\n    wcirc: \"ŵ\",\n    wedbar: \"⩟\",\n    Wedge: \"⋀\",\n    wedge: \"∧\",\n    wedgeq: \"≙\",\n    weierp: \"℘\",\n    Wfr: \"\\uD835\\uDD1A\",\n    wfr: \"\\uD835\\uDD34\",\n    Wopf: \"\\uD835\\uDD4E\",\n    wopf: \"\\uD835\\uDD68\",\n    wp: \"℘\",\n    wr: \"≀\",\n    wreath: \"≀\",\n    Wscr: \"\\uD835\\uDCB2\",\n    wscr: \"\\uD835\\uDCCC\",\n    xcap: \"⋂\",\n    xcirc: \"◯\",\n    xcup: \"⋃\",\n    xdtri: \"▽\",\n    Xfr: \"\\uD835\\uDD1B\",\n    xfr: \"\\uD835\\uDD35\",\n    xhArr: \"⟺\",\n    xharr: \"⟷\",\n    Xi: \"Ξ\",\n    xi: \"ξ\",\n    xlArr: \"⟸\",\n    xlarr: \"⟵\",\n    xmap: \"⟼\",\n    xnis: \"⋻\",\n    xodot: \"⨀\",\n    Xopf: \"\\uD835\\uDD4F\",\n    xopf: \"\\uD835\\uDD69\",\n    xoplus: \"⨁\",\n    xotime: \"⨂\",\n    xrArr: \"⟹\",\n    xrarr: \"⟶\",\n    Xscr: \"\\uD835\\uDCB3\",\n    xscr: \"\\uD835\\uDCCD\",\n    xsqcup: \"⨆\",\n    xuplus: \"⨄\",\n    xutri: \"△\",\n    xvee: \"⋁\",\n    xwedge: \"⋀\",\n    Yacute: \"\\xdd\",\n    yacute: \"\\xfd\",\n    YAcy: \"Я\",\n    yacy: \"я\",\n    Ycirc: \"Ŷ\",\n    ycirc: \"ŷ\",\n    Ycy: \"Ы\",\n    ycy: \"ы\",\n    yen: \"\\xa5\",\n    Yfr: \"\\uD835\\uDD1C\",\n    yfr: \"\\uD835\\uDD36\",\n    YIcy: \"Ї\",\n    yicy: \"ї\",\n    Yopf: \"\\uD835\\uDD50\",\n    yopf: \"\\uD835\\uDD6A\",\n    Yscr: \"\\uD835\\uDCB4\",\n    yscr: \"\\uD835\\uDCCE\",\n    YUcy: \"Ю\",\n    yucy: \"ю\",\n    Yuml: \"Ÿ\",\n    yuml: \"\\xff\",\n    Zacute: \"Ź\",\n    zacute: \"ź\",\n    Zcaron: \"Ž\",\n    zcaron: \"ž\",\n    Zcy: \"З\",\n    zcy: \"з\",\n    Zdot: \"Ż\",\n    zdot: \"ż\",\n    zeetrf: \"ℨ\",\n    ZeroWidthSpace: \"​\",\n    Zeta: \"Ζ\",\n    zeta: \"ζ\",\n    Zfr: \"ℨ\",\n    zfr: \"\\uD835\\uDD37\",\n    ZHcy: \"Ж\",\n    zhcy: \"ж\",\n    zigrarr: \"⇝\",\n    Zopf: \"ℤ\",\n    zopf: \"\\uD835\\uDD6B\",\n    Zscr: \"\\uD835\\uDCB5\",\n    zscr: \"\\uD835\\uDCCF\",\n    zwj: \"‍\",\n    zwnj: \"‌\"\n});\n/**\n * @deprecated\n * Use `HTML_ENTITIES` instead.\n * @see {@link HTML_ENTITIES}\n */ exports.entityMap = exports.HTML_ENTITIES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/entities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js":
/*!***************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/errors.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar conventions = __webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nfunction extendError(constructor, writableName) {\n    constructor.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: constructor\n        },\n        name: {\n            value: constructor.name,\n            enumerable: true,\n            writable: writableName\n        }\n    });\n}\nvar DOMExceptionName = conventions.freeze({\n    /**\n\t * the default value as defined by the spec\n\t */ Error: \"Error\",\n    /**\n\t * @deprecated\n\t * Use RangeError instead.\n\t */ IndexSizeError: \"IndexSizeError\",\n    /**\n\t * @deprecated\n\t * Just to match the related static code, not part of the spec.\n\t */ DomstringSizeError: \"DomstringSizeError\",\n    HierarchyRequestError: \"HierarchyRequestError\",\n    WrongDocumentError: \"WrongDocumentError\",\n    InvalidCharacterError: \"InvalidCharacterError\",\n    /**\n\t * @deprecated\n\t * Just to match the related static code, not part of the spec.\n\t */ NoDataAllowedError: \"NoDataAllowedError\",\n    NoModificationAllowedError: \"NoModificationAllowedError\",\n    NotFoundError: \"NotFoundError\",\n    NotSupportedError: \"NotSupportedError\",\n    InUseAttributeError: \"InUseAttributeError\",\n    InvalidStateError: \"InvalidStateError\",\n    SyntaxError: \"SyntaxError\",\n    InvalidModificationError: \"InvalidModificationError\",\n    NamespaceError: \"NamespaceError\",\n    /**\n\t * @deprecated\n\t * Use TypeError for invalid arguments,\n\t * \"NotSupportedError\" DOMException for unsupported operations,\n\t * and \"NotAllowedError\" DOMException for denied requests instead.\n\t */ InvalidAccessError: \"InvalidAccessError\",\n    /**\n\t * @deprecated\n\t * Just to match the related static code, not part of the spec.\n\t */ ValidationError: \"ValidationError\",\n    /**\n\t * @deprecated\n\t * Use TypeError instead.\n\t */ TypeMismatchError: \"TypeMismatchError\",\n    SecurityError: \"SecurityError\",\n    NetworkError: \"NetworkError\",\n    AbortError: \"AbortError\",\n    /**\n\t * @deprecated\n\t * Just to match the related static code, not part of the spec.\n\t */ URLMismatchError: \"URLMismatchError\",\n    QuotaExceededError: \"QuotaExceededError\",\n    TimeoutError: \"TimeoutError\",\n    InvalidNodeTypeError: \"InvalidNodeTypeError\",\n    DataCloneError: \"DataCloneError\",\n    EncodingError: \"EncodingError\",\n    NotReadableError: \"NotReadableError\",\n    UnknownError: \"UnknownError\",\n    ConstraintError: \"ConstraintError\",\n    DataError: \"DataError\",\n    TransactionInactiveError: \"TransactionInactiveError\",\n    ReadOnlyError: \"ReadOnlyError\",\n    VersionError: \"VersionError\",\n    OperationError: \"OperationError\",\n    NotAllowedError: \"NotAllowedError\",\n    OptOutError: \"OptOutError\"\n});\nvar DOMExceptionNames = Object.keys(DOMExceptionName);\nfunction isValidDomExceptionCode(value) {\n    return typeof value === \"number\" && value >= 1 && value <= 25;\n}\nfunction endsWithError(value) {\n    return typeof value === \"string\" && value.substring(value.length - DOMExceptionName.Error.length) === DOMExceptionName.Error;\n}\n/**\n * DOM operations only raise exceptions in \"exceptional\" circumstances, i.e., when an operation\n * is impossible to perform (either for logical reasons, because data is lost, or because the\n * implementation has become unstable). In general, DOM methods return specific error values in\n * ordinary processing situations, such as out-of-bound errors when using NodeList.\n *\n * Implementations should raise other exceptions under other circumstances. For example,\n * implementations should raise an implementation-dependent exception if a null argument is\n * passed when null was not expected.\n *\n * This implementation supports the following usages:\n * 1. according to the living standard (both arguments are optional):\n * ```\n * new DOMException(\"message (can be empty)\", DOMExceptionNames.HierarchyRequestError)\n * ```\n * 2. according to previous xmldom implementation (only the first argument is required):\n * ```\n * new DOMException(DOMException.HIERARCHY_REQUEST_ERR, \"optional message\")\n * ```\n * both result in the proper name being set.\n *\n * @class DOMException\n * @param {number | string} messageOrCode\n * The reason why an operation is not acceptable.\n * If it is a number, it is used to determine the `name`, see\n * {@link https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-258A00AF ExceptionCode}\n * @param {string | keyof typeof DOMExceptionName | Error} [nameOrMessage]\n * The `name` to use for the error.\n * If `messageOrCode` is a number, this arguments is used as the `message` instead.\n * @augments Error\n * @see https://webidl.spec.whatwg.org/#idl-DOMException\n * @see https://webidl.spec.whatwg.org/#dfn-error-names-table\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-17189187\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n */ function DOMException(messageOrCode, nameOrMessage) {\n    // support old way of passing arguments: first argument is a valid number\n    if (isValidDomExceptionCode(messageOrCode)) {\n        this.name = DOMExceptionNames[messageOrCode];\n        this.message = nameOrMessage || \"\";\n    } else {\n        this.message = messageOrCode;\n        this.name = endsWithError(nameOrMessage) ? nameOrMessage : DOMExceptionName.Error;\n    }\n    if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n}\nextendError(DOMException, true);\nObject.defineProperties(DOMException.prototype, {\n    code: {\n        enumerable: true,\n        get: function() {\n            var code = DOMExceptionNames.indexOf(this.name);\n            if (isValidDomExceptionCode(code)) return code;\n            return 0;\n        }\n    }\n});\nvar ExceptionCode = {\n    INDEX_SIZE_ERR: 1,\n    DOMSTRING_SIZE_ERR: 2,\n    HIERARCHY_REQUEST_ERR: 3,\n    WRONG_DOCUMENT_ERR: 4,\n    INVALID_CHARACTER_ERR: 5,\n    NO_DATA_ALLOWED_ERR: 6,\n    NO_MODIFICATION_ALLOWED_ERR: 7,\n    NOT_FOUND_ERR: 8,\n    NOT_SUPPORTED_ERR: 9,\n    INUSE_ATTRIBUTE_ERR: 10,\n    INVALID_STATE_ERR: 11,\n    SYNTAX_ERR: 12,\n    INVALID_MODIFICATION_ERR: 13,\n    NAMESPACE_ERR: 14,\n    INVALID_ACCESS_ERR: 15,\n    VALIDATION_ERR: 16,\n    TYPE_MISMATCH_ERR: 17,\n    SECURITY_ERR: 18,\n    NETWORK_ERR: 19,\n    ABORT_ERR: 20,\n    URL_MISMATCH_ERR: 21,\n    QUOTA_EXCEEDED_ERR: 22,\n    TIMEOUT_ERR: 23,\n    INVALID_NODE_TYPE_ERR: 24,\n    DATA_CLONE_ERR: 25\n};\nvar entries = Object.entries(ExceptionCode);\nfor(var i = 0; i < entries.length; i++){\n    var key = entries[i][0];\n    DOMException[key] = entries[i][1];\n}\n/**\n * Creates an error that will not be caught by XMLReader aka the SAX parser.\n *\n * @class\n * @param {string} message\n * @param {any} [locator]\n */ function ParseError(message, locator) {\n    this.message = message;\n    this.locator = locator;\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);\n}\nextendError(ParseError);\nexports.DOMException = DOMException;\nexports.DOMExceptionName = DOMExceptionName;\nexports.ExceptionCode = ExceptionCode;\nexports.ParseError = ParseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDO0FBRTFCLFNBQVNDLFlBQVlDLFdBQVcsRUFBRUMsWUFBWTtJQUM3Q0QsWUFBWUUsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNDLE1BQU1ILFNBQVMsRUFBRTtRQUN0REYsYUFBYTtZQUFFTSxPQUFPTjtRQUFZO1FBQ2xDTyxNQUFNO1lBQUVELE9BQU9OLFlBQVlPLElBQUk7WUFBRUMsWUFBWTtZQUFNQyxVQUFVUjtRQUFhO0lBQzNFO0FBQ0Q7QUFFQSxJQUFJUyxtQkFBbUJiLFlBQVljLE1BQU0sQ0FBQztJQUN6Qzs7RUFFQyxHQUNETixPQUFPO0lBQ1A7OztFQUdDLEdBQ0RPLGdCQUFnQjtJQUNoQjs7O0VBR0MsR0FDREMsb0JBQW9CO0lBQ3BCQyx1QkFBdUI7SUFDdkJDLG9CQUFvQjtJQUNwQkMsdUJBQXVCO0lBQ3ZCOzs7RUFHQyxHQUNEQyxvQkFBb0I7SUFDcEJDLDRCQUE0QjtJQUM1QkMsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyxhQUFhO0lBQ2JDLDBCQUEwQjtJQUMxQkMsZ0JBQWdCO0lBQ2hCOzs7OztFQUtDLEdBQ0RDLG9CQUFvQjtJQUNwQjs7O0VBR0MsR0FDREMsaUJBQWlCO0lBQ2pCOzs7RUFHQyxHQUNEQyxtQkFBbUI7SUFDbkJDLGVBQWU7SUFDZkMsY0FBYztJQUNkQyxZQUFZO0lBQ1o7OztFQUdDLEdBQ0RDLGtCQUFrQjtJQUNsQkMsb0JBQW9CO0lBQ3BCQyxjQUFjO0lBQ2RDLHNCQUFzQjtJQUN0QkMsZ0JBQWdCO0lBQ2hCQyxlQUFlO0lBQ2ZDLGtCQUFrQjtJQUNsQkMsY0FBYztJQUNkQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsMEJBQTBCO0lBQzFCQyxlQUFlO0lBQ2ZDLGNBQWM7SUFDZEMsZ0JBQWdCO0lBQ2hCQyxpQkFBaUI7SUFDakJDLGFBQWE7QUFDZDtBQUNBLElBQUlDLG9CQUFvQjdDLE9BQU84QyxJQUFJLENBQUN2QztBQUVwQyxTQUFTd0Msd0JBQXdCNUMsS0FBSztJQUNyQyxPQUFPLE9BQU9BLFVBQVUsWUFBWUEsU0FBUyxLQUFLQSxTQUFTO0FBQzVEO0FBQ0EsU0FBUzZDLGNBQWM3QyxLQUFLO0lBQzNCLE9BQU8sT0FBT0EsVUFBVSxZQUFZQSxNQUFNOEMsU0FBUyxDQUFDOUMsTUFBTStDLE1BQU0sR0FBRzNDLGlCQUFpQkwsS0FBSyxDQUFDZ0QsTUFBTSxNQUFNM0MsaUJBQWlCTCxLQUFLO0FBQzdIO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUNDLEdBQ0QsU0FBU2lELGFBQWFDLGFBQWEsRUFBRUMsYUFBYTtJQUNqRCx5RUFBeUU7SUFDekUsSUFBSU4sd0JBQXdCSyxnQkFBZ0I7UUFDM0MsSUFBSSxDQUFDaEQsSUFBSSxHQUFHeUMsaUJBQWlCLENBQUNPLGNBQWM7UUFDNUMsSUFBSSxDQUFDRSxPQUFPLEdBQUdELGlCQUFpQjtJQUNqQyxPQUFPO1FBQ04sSUFBSSxDQUFDQyxPQUFPLEdBQUdGO1FBQ2YsSUFBSSxDQUFDaEQsSUFBSSxHQUFHNEMsY0FBY0ssaUJBQWlCQSxnQkFBZ0I5QyxpQkFBaUJMLEtBQUs7SUFDbEY7SUFDQSxJQUFJQSxNQUFNcUQsaUJBQWlCLEVBQUVyRCxNQUFNcUQsaUJBQWlCLENBQUMsSUFBSSxFQUFFSjtBQUM1RDtBQUNBdkQsWUFBWXVELGNBQWM7QUFDMUJuRCxPQUFPd0QsZ0JBQWdCLENBQUNMLGFBQWFwRCxTQUFTLEVBQUU7SUFDL0MwRCxNQUFNO1FBQ0xwRCxZQUFZO1FBQ1pxRCxLQUFLO1lBQ0osSUFBSUQsT0FBT1osa0JBQWtCYyxPQUFPLENBQUMsSUFBSSxDQUFDdkQsSUFBSTtZQUM5QyxJQUFJMkMsd0JBQXdCVSxPQUFPLE9BQU9BO1lBQzFDLE9BQU87UUFDUjtJQUNEO0FBQ0Q7QUFFQSxJQUFJRyxnQkFBZ0I7SUFDbkJDLGdCQUFnQjtJQUNoQkMsb0JBQW9CO0lBQ3BCQyx1QkFBdUI7SUFDdkJDLG9CQUFvQjtJQUNwQkMsdUJBQXVCO0lBQ3ZCQyxxQkFBcUI7SUFDckJDLDZCQUE2QjtJQUM3QkMsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyxZQUFZO0lBQ1pDLDBCQUEwQjtJQUMxQkMsZUFBZTtJQUNmQyxvQkFBb0I7SUFDcEJDLGdCQUFnQjtJQUNoQkMsbUJBQW1CO0lBQ25CQyxjQUFjO0lBQ2RDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxrQkFBa0I7SUFDbEJDLG9CQUFvQjtJQUNwQkMsYUFBYTtJQUNiQyx1QkFBdUI7SUFDdkJDLGdCQUFnQjtBQUNqQjtBQUVBLElBQUlDLFVBQVV0RixPQUFPc0YsT0FBTyxDQUFDMUI7QUFDN0IsSUFBSyxJQUFJMkIsSUFBSSxHQUFHQSxJQUFJRCxRQUFRcEMsTUFBTSxFQUFFcUMsSUFBSztJQUN4QyxJQUFJQyxNQUFNRixPQUFPLENBQUNDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZCcEMsWUFBWSxDQUFDcUMsSUFBSSxHQUFHRixPQUFPLENBQUNDLEVBQUUsQ0FBQyxFQUFFO0FBQ2xDO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0UsV0FBV25DLE9BQU8sRUFBRW9DLE9BQU87SUFDbkMsSUFBSSxDQUFDcEMsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ29DLE9BQU8sR0FBR0E7SUFDZixJQUFJeEYsTUFBTXFELGlCQUFpQixFQUFFckQsTUFBTXFELGlCQUFpQixDQUFDLElBQUksRUFBRWtDO0FBQzVEO0FBQ0E3RixZQUFZNkY7QUFFWkUsb0JBQW9CLEdBQUd4QztBQUN2QndDLHdCQUF3QixHQUFHcEY7QUFDM0JvRixxQkFBcUIsR0FBRy9CO0FBQ3hCK0Isa0JBQWtCLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AeG1sZG9tL3htbGRvbS9saWIvZXJyb3JzLmpzPzY2Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29udmVudGlvbnMgPSByZXF1aXJlKCcuL2NvbnZlbnRpb25zJyk7XG5cbmZ1bmN0aW9uIGV4dGVuZEVycm9yKGNvbnN0cnVjdG9yLCB3cml0YWJsZU5hbWUpIHtcblx0Y29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcblx0XHRjb25zdHJ1Y3RvcjogeyB2YWx1ZTogY29uc3RydWN0b3IgfSxcblx0XHRuYW1lOiB7IHZhbHVlOiBjb25zdHJ1Y3Rvci5uYW1lLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogd3JpdGFibGVOYW1lIH0sXG5cdH0pO1xufVxuXG52YXIgRE9NRXhjZXB0aW9uTmFtZSA9IGNvbnZlbnRpb25zLmZyZWV6ZSh7XG5cdC8qKlxuXHQgKiB0aGUgZGVmYXVsdCB2YWx1ZSBhcyBkZWZpbmVkIGJ5IHRoZSBzcGVjXG5cdCAqL1xuXHRFcnJvcjogJ0Vycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFVzZSBSYW5nZUVycm9yIGluc3RlYWQuXG5cdCAqL1xuXHRJbmRleFNpemVFcnJvcjogJ0luZGV4U2l6ZUVycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIEp1c3QgdG8gbWF0Y2ggdGhlIHJlbGF0ZWQgc3RhdGljIGNvZGUsIG5vdCBwYXJ0IG9mIHRoZSBzcGVjLlxuXHQgKi9cblx0RG9tc3RyaW5nU2l6ZUVycm9yOiAnRG9tc3RyaW5nU2l6ZUVycm9yJyxcblx0SGllcmFyY2h5UmVxdWVzdEVycm9yOiAnSGllcmFyY2h5UmVxdWVzdEVycm9yJyxcblx0V3JvbmdEb2N1bWVudEVycm9yOiAnV3JvbmdEb2N1bWVudEVycm9yJyxcblx0SW52YWxpZENoYXJhY3RlckVycm9yOiAnSW52YWxpZENoYXJhY3RlckVycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIEp1c3QgdG8gbWF0Y2ggdGhlIHJlbGF0ZWQgc3RhdGljIGNvZGUsIG5vdCBwYXJ0IG9mIHRoZSBzcGVjLlxuXHQgKi9cblx0Tm9EYXRhQWxsb3dlZEVycm9yOiAnTm9EYXRhQWxsb3dlZEVycm9yJyxcblx0Tm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I6ICdOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvcicsXG5cdE5vdEZvdW5kRXJyb3I6ICdOb3RGb3VuZEVycm9yJyxcblx0Tm90U3VwcG9ydGVkRXJyb3I6ICdOb3RTdXBwb3J0ZWRFcnJvcicsXG5cdEluVXNlQXR0cmlidXRlRXJyb3I6ICdJblVzZUF0dHJpYnV0ZUVycm9yJyxcblx0SW52YWxpZFN0YXRlRXJyb3I6ICdJbnZhbGlkU3RhdGVFcnJvcicsXG5cdFN5bnRheEVycm9yOiAnU3ludGF4RXJyb3InLFxuXHRJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3I6ICdJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3InLFxuXHROYW1lc3BhY2VFcnJvcjogJ05hbWVzcGFjZUVycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFVzZSBUeXBlRXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnRzLFxuXHQgKiBcIk5vdFN1cHBvcnRlZEVycm9yXCIgRE9NRXhjZXB0aW9uIGZvciB1bnN1cHBvcnRlZCBvcGVyYXRpb25zLFxuXHQgKiBhbmQgXCJOb3RBbGxvd2VkRXJyb3JcIiBET01FeGNlcHRpb24gZm9yIGRlbmllZCByZXF1ZXN0cyBpbnN0ZWFkLlxuXHQgKi9cblx0SW52YWxpZEFjY2Vzc0Vycm9yOiAnSW52YWxpZEFjY2Vzc0Vycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIEp1c3QgdG8gbWF0Y2ggdGhlIHJlbGF0ZWQgc3RhdGljIGNvZGUsIG5vdCBwYXJ0IG9mIHRoZSBzcGVjLlxuXHQgKi9cblx0VmFsaWRhdGlvbkVycm9yOiAnVmFsaWRhdGlvbkVycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFVzZSBUeXBlRXJyb3IgaW5zdGVhZC5cblx0ICovXG5cdFR5cGVNaXNtYXRjaEVycm9yOiAnVHlwZU1pc21hdGNoRXJyb3InLFxuXHRTZWN1cml0eUVycm9yOiAnU2VjdXJpdHlFcnJvcicsXG5cdE5ldHdvcmtFcnJvcjogJ05ldHdvcmtFcnJvcicsXG5cdEFib3J0RXJyb3I6ICdBYm9ydEVycm9yJyxcblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIEp1c3QgdG8gbWF0Y2ggdGhlIHJlbGF0ZWQgc3RhdGljIGNvZGUsIG5vdCBwYXJ0IG9mIHRoZSBzcGVjLlxuXHQgKi9cblx0VVJMTWlzbWF0Y2hFcnJvcjogJ1VSTE1pc21hdGNoRXJyb3InLFxuXHRRdW90YUV4Y2VlZGVkRXJyb3I6ICdRdW90YUV4Y2VlZGVkRXJyb3InLFxuXHRUaW1lb3V0RXJyb3I6ICdUaW1lb3V0RXJyb3InLFxuXHRJbnZhbGlkTm9kZVR5cGVFcnJvcjogJ0ludmFsaWROb2RlVHlwZUVycm9yJyxcblx0RGF0YUNsb25lRXJyb3I6ICdEYXRhQ2xvbmVFcnJvcicsXG5cdEVuY29kaW5nRXJyb3I6ICdFbmNvZGluZ0Vycm9yJyxcblx0Tm90UmVhZGFibGVFcnJvcjogJ05vdFJlYWRhYmxlRXJyb3InLFxuXHRVbmtub3duRXJyb3I6ICdVbmtub3duRXJyb3InLFxuXHRDb25zdHJhaW50RXJyb3I6ICdDb25zdHJhaW50RXJyb3InLFxuXHREYXRhRXJyb3I6ICdEYXRhRXJyb3InLFxuXHRUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3I6ICdUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3InLFxuXHRSZWFkT25seUVycm9yOiAnUmVhZE9ubHlFcnJvcicsXG5cdFZlcnNpb25FcnJvcjogJ1ZlcnNpb25FcnJvcicsXG5cdE9wZXJhdGlvbkVycm9yOiAnT3BlcmF0aW9uRXJyb3InLFxuXHROb3RBbGxvd2VkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuXHRPcHRPdXRFcnJvcjogJ09wdE91dEVycm9yJyxcbn0pO1xudmFyIERPTUV4Y2VwdGlvbk5hbWVzID0gT2JqZWN0LmtleXMoRE9NRXhjZXB0aW9uTmFtZSk7XG5cbmZ1bmN0aW9uIGlzVmFsaWREb21FeGNlcHRpb25Db2RlKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gMjU7XG59XG5mdW5jdGlvbiBlbmRzV2l0aEVycm9yKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnN1YnN0cmluZyh2YWx1ZS5sZW5ndGggLSBET01FeGNlcHRpb25OYW1lLkVycm9yLmxlbmd0aCkgPT09IERPTUV4Y2VwdGlvbk5hbWUuRXJyb3I7XG59XG4vKipcbiAqIERPTSBvcGVyYXRpb25zIG9ubHkgcmFpc2UgZXhjZXB0aW9ucyBpbiBcImV4Y2VwdGlvbmFsXCIgY2lyY3Vtc3RhbmNlcywgaS5lLiwgd2hlbiBhbiBvcGVyYXRpb25cbiAqIGlzIGltcG9zc2libGUgdG8gcGVyZm9ybSAoZWl0aGVyIGZvciBsb2dpY2FsIHJlYXNvbnMsIGJlY2F1c2UgZGF0YSBpcyBsb3N0LCBvciBiZWNhdXNlIHRoZVxuICogaW1wbGVtZW50YXRpb24gaGFzIGJlY29tZSB1bnN0YWJsZSkuIEluIGdlbmVyYWwsIERPTSBtZXRob2RzIHJldHVybiBzcGVjaWZpYyBlcnJvciB2YWx1ZXMgaW5cbiAqIG9yZGluYXJ5IHByb2Nlc3Npbmcgc2l0dWF0aW9ucywgc3VjaCBhcyBvdXQtb2YtYm91bmQgZXJyb3JzIHdoZW4gdXNpbmcgTm9kZUxpc3QuXG4gKlxuICogSW1wbGVtZW50YXRpb25zIHNob3VsZCByYWlzZSBvdGhlciBleGNlcHRpb25zIHVuZGVyIG90aGVyIGNpcmN1bXN0YW5jZXMuIEZvciBleGFtcGxlLFxuICogaW1wbGVtZW50YXRpb25zIHNob3VsZCByYWlzZSBhbiBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQgZXhjZXB0aW9uIGlmIGEgbnVsbCBhcmd1bWVudCBpc1xuICogcGFzc2VkIHdoZW4gbnVsbCB3YXMgbm90IGV4cGVjdGVkLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gc3VwcG9ydHMgdGhlIGZvbGxvd2luZyB1c2FnZXM6XG4gKiAxLiBhY2NvcmRpbmcgdG8gdGhlIGxpdmluZyBzdGFuZGFyZCAoYm90aCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsKTpcbiAqIGBgYFxuICogbmV3IERPTUV4Y2VwdGlvbihcIm1lc3NhZ2UgKGNhbiBiZSBlbXB0eSlcIiwgRE9NRXhjZXB0aW9uTmFtZXMuSGllcmFyY2h5UmVxdWVzdEVycm9yKVxuICogYGBgXG4gKiAyLiBhY2NvcmRpbmcgdG8gcHJldmlvdXMgeG1sZG9tIGltcGxlbWVudGF0aW9uIChvbmx5IHRoZSBmaXJzdCBhcmd1bWVudCBpcyByZXF1aXJlZCk6XG4gKiBgYGBcbiAqIG5ldyBET01FeGNlcHRpb24oRE9NRXhjZXB0aW9uLkhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgXCJvcHRpb25hbCBtZXNzYWdlXCIpXG4gKiBgYGBcbiAqIGJvdGggcmVzdWx0IGluIHRoZSBwcm9wZXIgbmFtZSBiZWluZyBzZXQuXG4gKlxuICogQGNsYXNzIERPTUV4Y2VwdGlvblxuICogQHBhcmFtIHtudW1iZXIgfCBzdHJpbmd9IG1lc3NhZ2VPckNvZGVcbiAqIFRoZSByZWFzb24gd2h5IGFuIG9wZXJhdGlvbiBpcyBub3QgYWNjZXB0YWJsZS5cbiAqIElmIGl0IGlzIGEgbnVtYmVyLCBpdCBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgYG5hbWVgLCBzZWVcbiAqIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9jb3JlLmh0bWwjSUQtMjU4QTAwQUYgRXhjZXB0aW9uQ29kZX1cbiAqIEBwYXJhbSB7c3RyaW5nIHwga2V5b2YgdHlwZW9mIERPTUV4Y2VwdGlvbk5hbWUgfCBFcnJvcn0gW25hbWVPck1lc3NhZ2VdXG4gKiBUaGUgYG5hbWVgIHRvIHVzZSBmb3IgdGhlIGVycm9yLlxuICogSWYgYG1lc3NhZ2VPckNvZGVgIGlzIGEgbnVtYmVyLCB0aGlzIGFyZ3VtZW50cyBpcyB1c2VkIGFzIHRoZSBgbWVzc2FnZWAgaW5zdGVhZC5cbiAqIEBhdWdtZW50cyBFcnJvclxuICogQHNlZSBodHRwczovL3dlYmlkbC5zcGVjLndoYXR3Zy5vcmcvI2lkbC1ET01FeGNlcHRpb25cbiAqIEBzZWUgaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNkZm4tZXJyb3ItbmFtZXMtdGFibGVcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvY29yZS5odG1sI0lELTE3MTg5MTg3XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9lY21hLXNjcmlwdC1sYW5ndWFnZS1iaW5kaW5nLmh0bWxcbiAqL1xuZnVuY3Rpb24gRE9NRXhjZXB0aW9uKG1lc3NhZ2VPckNvZGUsIG5hbWVPck1lc3NhZ2UpIHtcblx0Ly8gc3VwcG9ydCBvbGQgd2F5IG9mIHBhc3NpbmcgYXJndW1lbnRzOiBmaXJzdCBhcmd1bWVudCBpcyBhIHZhbGlkIG51bWJlclxuXHRpZiAoaXNWYWxpZERvbUV4Y2VwdGlvbkNvZGUobWVzc2FnZU9yQ29kZSkpIHtcblx0XHR0aGlzLm5hbWUgPSBET01FeGNlcHRpb25OYW1lc1ttZXNzYWdlT3JDb2RlXTtcblx0XHR0aGlzLm1lc3NhZ2UgPSBuYW1lT3JNZXNzYWdlIHx8ICcnO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VPckNvZGU7XG5cdFx0dGhpcy5uYW1lID0gZW5kc1dpdGhFcnJvcihuYW1lT3JNZXNzYWdlKSA/IG5hbWVPck1lc3NhZ2UgOiBET01FeGNlcHRpb25OYW1lLkVycm9yO1xuXHR9XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRE9NRXhjZXB0aW9uKTtcbn1cbmV4dGVuZEVycm9yKERPTUV4Y2VwdGlvbiwgdHJ1ZSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhET01FeGNlcHRpb24ucHJvdG90eXBlLCB7XG5cdGNvZGU6IHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGNvZGUgPSBET01FeGNlcHRpb25OYW1lcy5pbmRleE9mKHRoaXMubmFtZSk7XG5cdFx0XHRpZiAoaXNWYWxpZERvbUV4Y2VwdGlvbkNvZGUoY29kZSkpIHJldHVybiBjb2RlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSxcblx0fSxcbn0pO1xuXG52YXIgRXhjZXB0aW9uQ29kZSA9IHtcblx0SU5ERVhfU0laRV9FUlI6IDEsXG5cdERPTVNUUklOR19TSVpFX0VSUjogMixcblx0SElFUkFSQ0hZX1JFUVVFU1RfRVJSOiAzLFxuXHRXUk9OR19ET0NVTUVOVF9FUlI6IDQsXG5cdElOVkFMSURfQ0hBUkFDVEVSX0VSUjogNSxcblx0Tk9fREFUQV9BTExPV0VEX0VSUjogNixcblx0Tk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSOiA3LFxuXHROT1RfRk9VTkRfRVJSOiA4LFxuXHROT1RfU1VQUE9SVEVEX0VSUjogOSxcblx0SU5VU0VfQVRUUklCVVRFX0VSUjogMTAsXG5cdElOVkFMSURfU1RBVEVfRVJSOiAxMSxcblx0U1lOVEFYX0VSUjogMTIsXG5cdElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUjogMTMsXG5cdE5BTUVTUEFDRV9FUlI6IDE0LFxuXHRJTlZBTElEX0FDQ0VTU19FUlI6IDE1LFxuXHRWQUxJREFUSU9OX0VSUjogMTYsXG5cdFRZUEVfTUlTTUFUQ0hfRVJSOiAxNyxcblx0U0VDVVJJVFlfRVJSOiAxOCxcblx0TkVUV09SS19FUlI6IDE5LFxuXHRBQk9SVF9FUlI6IDIwLFxuXHRVUkxfTUlTTUFUQ0hfRVJSOiAyMSxcblx0UVVPVEFfRVhDRUVERURfRVJSOiAyMixcblx0VElNRU9VVF9FUlI6IDIzLFxuXHRJTlZBTElEX05PREVfVFlQRV9FUlI6IDI0LFxuXHREQVRBX0NMT05FX0VSUjogMjUsXG59O1xuXG52YXIgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKEV4Y2VwdGlvbkNvZGUpO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdHZhciBrZXkgPSBlbnRyaWVzW2ldWzBdO1xuXHRET01FeGNlcHRpb25ba2V5XSA9IGVudHJpZXNbaV1bMV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlcnJvciB0aGF0IHdpbGwgbm90IGJlIGNhdWdodCBieSBYTUxSZWFkZXIgYWthIHRoZSBTQVggcGFyc2VyLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7YW55fSBbbG9jYXRvcl1cbiAqL1xuZnVuY3Rpb24gUGFyc2VFcnJvcihtZXNzYWdlLCBsb2NhdG9yKSB7XG5cdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdHRoaXMubG9jYXRvciA9IGxvY2F0b3I7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUGFyc2VFcnJvcik7XG59XG5leHRlbmRFcnJvcihQYXJzZUVycm9yKTtcblxuZXhwb3J0cy5ET01FeGNlcHRpb24gPSBET01FeGNlcHRpb247XG5leHBvcnRzLkRPTUV4Y2VwdGlvbk5hbWUgPSBET01FeGNlcHRpb25OYW1lO1xuZXhwb3J0cy5FeGNlcHRpb25Db2RlID0gRXhjZXB0aW9uQ29kZTtcbmV4cG9ydHMuUGFyc2VFcnJvciA9IFBhcnNlRXJyb3I7XG4iXSwibmFtZXMiOlsiY29udmVudGlvbnMiLCJyZXF1aXJlIiwiZXh0ZW5kRXJyb3IiLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlTmFtZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIkVycm9yIiwidmFsdWUiLCJuYW1lIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiRE9NRXhjZXB0aW9uTmFtZSIsImZyZWV6ZSIsIkluZGV4U2l6ZUVycm9yIiwiRG9tc3RyaW5nU2l6ZUVycm9yIiwiSGllcmFyY2h5UmVxdWVzdEVycm9yIiwiV3JvbmdEb2N1bWVudEVycm9yIiwiSW52YWxpZENoYXJhY3RlckVycm9yIiwiTm9EYXRhQWxsb3dlZEVycm9yIiwiTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiTm90U3VwcG9ydGVkRXJyb3IiLCJJblVzZUF0dHJpYnV0ZUVycm9yIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJTeW50YXhFcnJvciIsIkludmFsaWRNb2RpZmljYXRpb25FcnJvciIsIk5hbWVzcGFjZUVycm9yIiwiSW52YWxpZEFjY2Vzc0Vycm9yIiwiVmFsaWRhdGlvbkVycm9yIiwiVHlwZU1pc21hdGNoRXJyb3IiLCJTZWN1cml0eUVycm9yIiwiTmV0d29ya0Vycm9yIiwiQWJvcnRFcnJvciIsIlVSTE1pc21hdGNoRXJyb3IiLCJRdW90YUV4Y2VlZGVkRXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJJbnZhbGlkTm9kZVR5cGVFcnJvciIsIkRhdGFDbG9uZUVycm9yIiwiRW5jb2RpbmdFcnJvciIsIk5vdFJlYWRhYmxlRXJyb3IiLCJVbmtub3duRXJyb3IiLCJDb25zdHJhaW50RXJyb3IiLCJEYXRhRXJyb3IiLCJUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3IiLCJSZWFkT25seUVycm9yIiwiVmVyc2lvbkVycm9yIiwiT3BlcmF0aW9uRXJyb3IiLCJOb3RBbGxvd2VkRXJyb3IiLCJPcHRPdXRFcnJvciIsIkRPTUV4Y2VwdGlvbk5hbWVzIiwia2V5cyIsImlzVmFsaWREb21FeGNlcHRpb25Db2RlIiwiZW5kc1dpdGhFcnJvciIsInN1YnN0cmluZyIsImxlbmd0aCIsIkRPTUV4Y2VwdGlvbiIsIm1lc3NhZ2VPckNvZGUiLCJuYW1lT3JNZXNzYWdlIiwibWVzc2FnZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiZGVmaW5lUHJvcGVydGllcyIsImNvZGUiLCJnZXQiLCJpbmRleE9mIiwiRXhjZXB0aW9uQ29kZSIsIklOREVYX1NJWkVfRVJSIiwiRE9NU1RSSU5HX1NJWkVfRVJSIiwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIiwiV1JPTkdfRE9DVU1FTlRfRVJSIiwiSU5WQUxJRF9DSEFSQUNURVJfRVJSIiwiTk9fREFUQV9BTExPV0VEX0VSUiIsIk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiIsIk5PVF9GT1VORF9FUlIiLCJOT1RfU1VQUE9SVEVEX0VSUiIsIklOVVNFX0FUVFJJQlVURV9FUlIiLCJJTlZBTElEX1NUQVRFX0VSUiIsIlNZTlRBWF9FUlIiLCJJTlZBTElEX01PRElGSUNBVElPTl9FUlIiLCJOQU1FU1BBQ0VfRVJSIiwiSU5WQUxJRF9BQ0NFU1NfRVJSIiwiVkFMSURBVElPTl9FUlIiLCJUWVBFX01JU01BVENIX0VSUiIsIlNFQ1VSSVRZX0VSUiIsIk5FVFdPUktfRVJSIiwiQUJPUlRfRVJSIiwiVVJMX01JU01BVENIX0VSUiIsIlFVT1RBX0VYQ0VFREVEX0VSUiIsIlRJTUVPVVRfRVJSIiwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIiwiREFUQV9DTE9ORV9FUlIiLCJlbnRyaWVzIiwiaSIsImtleSIsIlBhcnNlRXJyb3IiLCJsb2NhdG9yIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/grammar.js":
/*!****************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/grammar.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Detects relevant unicode support for regular expressions in the runtime.\n * Should the runtime not accepts the flag `u` or unicode ranges,\n * character classes without unicode handling will be used.\n *\n * @param {typeof RegExp} [RegExpImpl=RegExp]\n * For testing: the RegExp class.\n * @returns {boolean}\n * @see https://node.green/#ES2015-syntax-RegExp--y--and--u--flags\n */ function detectUnicodeSupport(RegExpImpl) {\n    try {\n        if (typeof RegExpImpl !== \"function\") {\n            RegExpImpl = RegExp;\n        }\n        // eslint-disable-next-line es5/no-unicode-regex,es5/no-unicode-code-point-escape\n        var match = new RegExpImpl(\"\\uD834\\uDF06\", \"u\").exec(\"\\uD834\\uDF06\");\n        return !!match && match[0].length === 2;\n    } catch (error) {}\n    return false;\n}\nvar UNICODE_SUPPORT = detectUnicodeSupport();\n/**\n * Removes `[`, `]` and any trailing quantifiers from the source of a RegExp.\n *\n * @param {RegExp} regexp\n */ function chars(regexp) {\n    if (regexp.source[0] !== \"[\") {\n        throw new Error(regexp + \" can not be used with chars\");\n    }\n    return regexp.source.slice(1, regexp.source.lastIndexOf(\"]\"));\n}\n/**\n * Creates a new character list regular expression,\n * by removing `search` from the source of `regexp`.\n *\n * @param {RegExp} regexp\n * @param {string} search\n * The character(s) to remove.\n * @returns {RegExp}\n */ function chars_without(regexp, search) {\n    if (regexp.source[0] !== \"[\") {\n        throw new Error(\"/\" + regexp.source + \"/ can not be used with chars_without\");\n    }\n    if (!search || typeof search !== \"string\") {\n        throw new Error(JSON.stringify(search) + \" is not a valid search\");\n    }\n    if (regexp.source.indexOf(search) === -1) {\n        throw new Error('\"' + search + '\" is not is /' + regexp.source + \"/\");\n    }\n    if (search === \"-\" && regexp.source.indexOf(search) !== 1) {\n        throw new Error('\"' + search + '\" is not at the first postion of /' + regexp.source + \"/\");\n    }\n    return new RegExp(regexp.source.replace(search, \"\"), UNICODE_SUPPORT ? \"u\" : \"\");\n}\n/**\n * Combines and Regular expressions correctly by using `RegExp.source`.\n *\n * @param {...(RegExp | string)[]} args\n * @returns {RegExp}\n */ function reg(args) {\n    var self = this;\n    return new RegExp(Array.prototype.slice.call(arguments).map(function(part) {\n        var isStr = typeof part === \"string\";\n        if (isStr && self === undefined && part === \"|\") {\n            throw new Error(\"use regg instead of reg to wrap expressions with `|`!\");\n        }\n        return isStr ? part : part.source;\n    }).join(\"\"), UNICODE_SUPPORT ? \"mu\" : \"m\");\n}\n/**\n * Like `reg` but wraps the expression in `(?:`,`)` to create a non tracking group.\n *\n * @param {...(RegExp | string)[]} args\n * @returns {RegExp}\n */ function regg(args) {\n    if (arguments.length === 0) {\n        throw new Error(\"no parameters provided\");\n    }\n    return reg.apply(regg, [\n        \"(?:\"\n    ].concat(Array.prototype.slice.call(arguments), [\n        \")\"\n    ]));\n}\n// /**\n//  * Append ^ to the beginning of the expression.\n//  * @param {...(RegExp | string)[]} args\n//  * @returns {RegExp}\n//  */\n// function reg_start(args) {\n// \tif (arguments.length === 0) {\n// \t\tthrow new Error('no parameters provided');\n// \t}\n// \treturn reg.apply(reg_start, ['^'].concat(Array.prototype.slice.call(arguments)));\n// }\n// https://www.w3.org/TR/xml/#document\n// `[1] document ::= prolog element Misc*`\n// https://www.w3.org/TR/xml11/#NT-document\n// `[1] document ::= ( prolog element Misc* ) - ( Char* RestrictedChar Char* )`\n/**\n * A character usually appearing in wrongly converted strings.\n *\n * @type {string}\n * @see https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\n * @see https://nodejs.dev/en/api/v18/buffer/#buffers-and-character-encodings\n * @see https://www.unicode.org/faq/utf_bom.html#BOM\n * @readonly\n */ var UNICODE_REPLACEMENT_CHARACTER = \"�\";\n// https://www.w3.org/TR/xml/#NT-Char\n// any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n// `[2] Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]`\n// https://www.w3.org/TR/xml11/#NT-Char\n// `[2] Char ::= [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]`\n// https://www.w3.org/TR/xml11/#NT-RestrictedChar\n// `[2a] RestrictedChar ::= [#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]`\n// https://www.w3.org/TR/xml11/#charsets\nvar Char = /[-\\x09\\x0A\\x0D\\x20-\\x2C\\x2E-\\uD7FF\\uE000-\\uFFFD]/; // without \\u10000-\\uEFFFF\nif (UNICODE_SUPPORT) {\n    // eslint-disable-next-line es5/no-unicode-code-point-escape\n    Char = reg(\"[\", chars(Char), \"\\\\u{10000}-\\\\u{10FFFF}\", \"]\");\n}\nvar _SChar = /[\\x20\\x09\\x0D\\x0A]/;\nvar SChar_s = chars(_SChar);\n// https://www.w3.org/TR/xml11/#NT-S\n// `[3] S ::= (#x20 | #x9 | #xD | #xA)+`\nvar S = reg(_SChar, \"+\");\n// optional whitespace described as `S?` in the grammar,\n// simplified to 0-n occurrences of the character class\n// instead of 0-1 occurrences of a non-capturing group around S\nvar S_OPT = reg(_SChar, \"*\");\n// https://www.w3.org/TR/xml11/#NT-NameStartChar\n// `[4] NameStartChar ::= \":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]`\nvar NameStartChar = /[:_a-zA-Z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/; // without \\u10000-\\uEFFFF\nif (UNICODE_SUPPORT) {\n    // eslint-disable-next-line es5/no-unicode-code-point-escape\n    NameStartChar = reg(\"[\", chars(NameStartChar), \"\\\\u{10000}-\\\\u{10FFFF}\", \"]\");\n}\nvar NameStartChar_s = chars(NameStartChar);\n// https://www.w3.org/TR/xml11/#NT-NameChar\n// `[4a] NameChar ::= NameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]`\nvar NameChar = reg(\"[\", NameStartChar_s, chars(/[-.0-9\\xB7]/), chars(/[\\u0300-\\u036F\\u203F-\\u2040]/), \"]\");\n// https://www.w3.org/TR/xml11/#NT-Name\n// `[5] Name ::= NameStartChar (NameChar)*`\nvar Name = reg(NameStartChar, NameChar, \"*\");\n/*\nhttps://www.w3.org/TR/xml11/#NT-Names\n`[6] Names ::= Name (#x20 Name)*`\n*/ // https://www.w3.org/TR/xml11/#NT-Nmtoken\n// `[7] Nmtoken ::= (NameChar)+`\nvar Nmtoken = reg(NameChar, \"+\");\n/*\nhttps://www.w3.org/TR/xml11/#NT-Nmtokens\n`[8] Nmtokens ::= Nmtoken (#x20 Nmtoken)*`\nvar Nmtokens = reg(Nmtoken, regg(/\\x20/, Nmtoken), '*');\n*/ // https://www.w3.org/TR/xml11/#NT-EntityRef\n// `[68] EntityRef ::= '&' Name ';'` [WFC: Entity Declared] [VC: Entity Declared] [WFC: Parsed Entity] [WFC: No Recursion]\nvar EntityRef = reg(\"&\", Name, \";\");\n// https://www.w3.org/TR/xml11/#NT-CharRef\n// `[66] CharRef ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'` [WFC: Legal Character]\nvar CharRef = regg(/&#[0-9]+;|&#x[0-9a-fA-F]+;/);\n/*\nhttps://www.w3.org/TR/xml11/#NT-Reference\n- `[67] Reference ::= EntityRef | CharRef`\n- `[66] CharRef ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'` [WFC: Legal Character]\n- `[68] EntityRef ::= '&' Name ';'` [WFC: Entity Declared] [VC: Entity Declared] [WFC: Parsed Entity] [WFC: No Recursion]\n*/ var Reference = regg(EntityRef, \"|\", CharRef);\n// https://www.w3.org/TR/xml11/#NT-PEReference\n// `[69] PEReference ::= '%' Name ';'`\n// [VC: Entity Declared] [WFC: No Recursion] [WFC: In DTD]\nvar PEReference = reg(\"%\", Name, \";\");\n// https://www.w3.org/TR/xml11/#NT-EntityValue\n// `[9] EntityValue ::= '\"' ([^%&\"] | PEReference | Reference)* '\"' | \"'\" ([^%&'] | PEReference | Reference)* \"'\"`\nvar EntityValue = regg(reg('\"', regg(/[^%&\"]/, \"|\", PEReference, \"|\", Reference), \"*\", '\"'), \"|\", reg(\"'\", regg(/[^%&']/, \"|\", PEReference, \"|\", Reference), \"*\", \"'\"));\n// https://www.w3.org/TR/xml11/#NT-AttValue\n// `[10] AttValue ::= '\"' ([^<&\"] | Reference)* '\"' | \"'\" ([^<&'] | Reference)* \"'\"`\nvar AttValue = regg('\"', regg(/[^<&\"]/, \"|\", Reference), \"*\", '\"', \"|\", \"'\", regg(/[^<&']/, \"|\", Reference), \"*\", \"'\");\n// https://www.w3.org/TR/xml-names/#ns-decl\n// https://www.w3.org/TR/xml-names/#ns-qualnames\n// NameStartChar without \":\"\nvar NCNameStartChar = chars_without(NameStartChar, \":\");\n// https://www.w3.org/TR/xml-names/#orphans\n// `[5] NCNameChar ::= NameChar - ':'`\n// An XML NameChar, minus the \":\"\nvar NCNameChar = chars_without(NameChar, \":\");\n// https://www.w3.org/TR/xml-names/#NT-NCName\n// `[4] NCName ::= Name - (Char* ':' Char*)`\n// An XML Name, minus the \":\"\nvar NCName = reg(NCNameStartChar, NCNameChar, \"*\");\n/**\nhttps://www.w3.org/TR/xml-names/#ns-qualnames\n\n```\n[7] QName ::= PrefixedName | UnprefixedName\n\t\t\t\t  === (NCName ':' NCName) | NCName\n\t\t\t\t  === NCName (':' NCName)?\n[8] PrefixedName ::= Prefix ':' LocalPart\n\t\t\t\t\t\t\t\t === NCName ':' NCName\n[9] UnprefixedName ::= LocalPart\n\t\t\t\t\t\t\t\t\t === NCName\n[10] Prefix ::= NCName\n[11] LocalPart ::= NCName\n```\n*/ var QName = reg(NCName, regg(\":\", NCName), \"?\");\nvar QName_exact = reg(\"^\", QName, \"$\");\nvar QName_group = reg(\"(\", QName, \")\");\n// https://www.w3.org/TR/xml11/#NT-SystemLiteral\n// `[11] SystemLiteral ::= ('\"' [^\"]* '\"') | (\"'\" [^']* \"'\")`\nvar SystemLiteral = regg(/\"[^\"]*\"|'[^']*'/);\n/*\n https://www.w3.org/TR/xml11/#NT-PI\n ```\n [17] PITarget    ::= Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))\n [16] PI    ::= '<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'\n ```\n target /xml/i is not excluded!\n*/ var PI = reg(/^<\\?/, \"(\", Name, \")\", regg(S, \"(\", Char, \"*?)\"), \"?\", /\\?>/);\n// https://www.w3.org/TR/xml11/#NT-PubidChar\n// `[13] PubidChar ::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]`\nvar PubidChar = /[\\x20\\x0D\\x0Aa-zA-Z0-9-'()+,./:=?;!*#@$_%]/;\n// https://www.w3.org/TR/xml11/#NT-PubidLiteral\n// `[12] PubidLiteral ::= '\"' PubidChar* '\"' | \"'\" (PubidChar - \"'\")* \"'\"`\nvar PubidLiteral = regg('\"', PubidChar, '*\"', \"|\", \"'\", chars_without(PubidChar, \"'\"), \"*'\");\n// https://www.w3.org/TR/xml11/#NT-CharData\n// `[14] CharData    ::= [^<&]* - ([^<&]* ']]>' [^<&]*)`\nvar COMMENT_START = \"<!--\";\nvar COMMENT_END = \"-->\";\n// https://www.w3.org/TR/xml11/#NT-Comment\n// `[15] Comment ::= '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'`\nvar Comment = reg(COMMENT_START, regg(chars_without(Char, \"-\"), \"|\", reg(\"-\", chars_without(Char, \"-\"))), \"*\", COMMENT_END);\nvar PCDATA = \"#PCDATA\";\n// https://www.w3.org/TR/xml11/#NT-Mixed\n// `[51] Mixed ::= '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*' | '(' S? '#PCDATA' S? ')'`\n// https://www.w3.org/TR/xml-names/#NT-Mixed\n// `[51] Mixed ::= '(' S? '#PCDATA' (S? '|' S? QName)* S? ')*' | '(' S? '#PCDATA' S? ')'`\n// [VC: Proper Group/PE Nesting] [VC: No Duplicate Types]\nvar Mixed = regg(reg(/\\(/, S_OPT, PCDATA, regg(S_OPT, /\\|/, S_OPT, QName), \"*\", S_OPT, /\\)\\*/), \"|\", reg(/\\(/, S_OPT, PCDATA, S_OPT, /\\)/));\nvar _children_quantity = /[?*+]?/;\n/*\n `[49] choice ::= '(' S? cp ( S? '|' S? cp )+ S? ')'` [VC: Proper Group/PE Nesting]\n `[50] seq ::= '(' S? cp ( S? ',' S? cp )* S? ')'` [VC: Proper Group/PE Nesting]\n simplification to solve circular referencing, but doesn't check validity constraint \"Proper Group/PE Nesting\"\n var _choice_or_seq = reg('[', NameChar_s, SChar_s, chars(_children_quantity), '()|,]*');\n ```\n [48] cp ::= (Name | choice | seq) ('?' | '*' | '+')?\n         === (Name | '(' S? cp ( S? '|' S? cp )+ S? ')' | '(' S? cp ( S? ',' S? cp )* S? ')') ('?' | '*' | '+')?\n         !== (Name | [_choice_or_seq]*) ('?' | '*' | '+')?\n ```\n simplification to solve circular referencing, but doesn't check validity constraint \"Proper Group/PE Nesting\"\n var cp = reg(regg(Name, '|', _choice_or_seq), _children_quantity);\n*/ /*\nInefficient regular expression (High)\nThis part of the regular expression may cause exponential backtracking on strings starting with '(|' and containing many repetitions of '|'.\nhttps://github.com/xmldom/xmldom/security/code-scanning/91\nvar choice = regg(/\\(/, S_OPT, cp, regg(S_OPT, /\\|/, S_OPT, cp), '+', S_OPT, /\\)/);\n*/ /*\nInefficient regular expression (High)\nThis part of the regular expression may cause exponential backtracking on strings starting with '(,' and containing many repetitions of ','.\nhttps://github.com/xmldom/xmldom/security/code-scanning/92\nvar seq = regg(/\\(/, S_OPT, cp, regg(S_OPT, /,/, S_OPT, cp), '*', S_OPT, /\\)/);\n*/ // `[47] children ::= (choice | seq) ('?' | '*' | '+')?`\n// simplification to solve circular referencing, but doesn't check validity constraint \"Proper Group/PE Nesting\"\nvar children = reg(/\\([^>]+\\)/, _children_quantity /*regg(choice, '|', seq), _children_quantity*/ );\n// https://www.w3.org/TR/xml11/#NT-contentspec\n// `[46] contentspec ::= 'EMPTY' | 'ANY' | Mixed | children`\nvar contentspec = regg(\"EMPTY\", \"|\", \"ANY\", \"|\", Mixed, \"|\", children);\nvar ELEMENTDECL_START = \"<!ELEMENT\";\n// https://www.w3.org/TR/xml11/#NT-elementdecl\n// `[45] elementdecl ::= '<!ELEMENT' S Name S contentspec S? '>'`\n// https://www.w3.org/TR/xml-names/#NT-elementdecl\n// `[17] elementdecl ::= '<!ELEMENT' S QName S contentspec S? '>'`\n// because of https://www.w3.org/TR/xml11/#NT-PEReference\n// since xmldom is not supporting replacements of PEReferences in the DTD\n// this also supports PEReference in the possible places\nvar elementdecl = reg(ELEMENTDECL_START, S, regg(QName, \"|\", PEReference), S, regg(contentspec, \"|\", PEReference), S_OPT, \">\");\n// https://www.w3.org/TR/xml11/#NT-NotationType\n// `[58] NotationType ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'`\n// [VC: Notation Attributes] [VC: One Notation Per Element Type] [VC: No Notation on Empty Element] [VC: No Duplicate Tokens]\nvar NotationType = reg(\"NOTATION\", S, /\\(/, S_OPT, Name, regg(S_OPT, /\\|/, S_OPT, Name), \"*\", S_OPT, /\\)/);\n// https://www.w3.org/TR/xml11/#NT-Enumeration\n// `[59] Enumeration ::= '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')'`\n// [VC: Enumeration] [VC: No Duplicate Tokens]\nvar Enumeration = reg(/\\(/, S_OPT, Nmtoken, regg(S_OPT, /\\|/, S_OPT, Nmtoken), \"*\", S_OPT, /\\)/);\n// https://www.w3.org/TR/xml11/#NT-EnumeratedType\n// `[57] EnumeratedType ::= NotationType | Enumeration`\nvar EnumeratedType = regg(NotationType, \"|\", Enumeration);\n/*\n```\n[55] StringType ::= 'CDATA'\n[56] TokenizedType ::= 'ID' [VC: ID] [VC: One ID per Element Type] [VC: ID Attribute Default]\n   | 'IDREF' [VC: IDREF]\n   | 'IDREFS' [VC: IDREF]\n\t | 'ENTITY' [VC: Entity Name]\n\t | 'ENTITIES' [VC: Entity Name]\n\t | 'NMTOKEN' [VC: Name Token]\n\t | 'NMTOKENS' [VC: Name Token]\n [54] AttType ::= StringType | TokenizedType | EnumeratedType\n```*/ var AttType = regg(/CDATA|ID|IDREF|IDREFS|ENTITY|ENTITIES|NMTOKEN|NMTOKENS/, \"|\", EnumeratedType);\n// `[60] DefaultDecl ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue)`\n// [WFC: No < in Attribute Values] [WFC: No External Entity References]\n// [VC: Fixed Attribute Default] [VC: Required Attribute] [VC: Attribute Default Value Syntactically Correct]\nvar DefaultDecl = regg(/#REQUIRED|#IMPLIED/, \"|\", regg(regg(\"#FIXED\", S), \"?\", AttValue));\n// https://www.w3.org/TR/xml11/#NT-AttDef\n// [53] AttDef ::= S Name S AttType S DefaultDecl\n// https://www.w3.org/TR/xml-names/#NT-AttDef\n// [1] NSAttName ::= PrefixedAttName | DefaultAttName\n// [2] PrefixedAttName ::= 'xmlns:' NCName [NSC: Reserved Prefixes and Namespace Names]\n// [3] DefaultAttName ::= 'xmlns'\n// [21] AttDef ::= S (QName | NSAttName) S AttType S DefaultDecl\n// \t\t\t\t\t\t === S Name S AttType S DefaultDecl\n// xmldom is not distinguishing between QName and NSAttName on this level\n// to support XML without namespaces in DTD we can not restrict it to QName\nvar AttDef = regg(S, Name, S, AttType, S, DefaultDecl);\nvar ATTLIST_DECL_START = \"<!ATTLIST\";\n// https://www.w3.org/TR/xml11/#NT-AttlistDecl\n// `[52] AttlistDecl ::= '<!ATTLIST' S Name AttDef* S? '>'`\n// https://www.w3.org/TR/xml-names/#NT-AttlistDecl\n// `[20] AttlistDecl ::= '<!ATTLIST' S QName AttDef* S? '>'`\n// to support XML without namespaces in DTD we can not restrict it to QName\nvar AttlistDecl = reg(ATTLIST_DECL_START, S, Name, AttDef, \"*\", S_OPT, \">\");\n// https://html.spec.whatwg.org/multipage/urls-and-fetching.html#about:legacy-compat\nvar ABOUT_LEGACY_COMPAT = \"about:legacy-compat\";\nvar ABOUT_LEGACY_COMPAT_SystemLiteral = regg('\"' + ABOUT_LEGACY_COMPAT + '\"', \"|\", \"'\" + ABOUT_LEGACY_COMPAT + \"'\");\nvar SYSTEM = \"SYSTEM\";\nvar PUBLIC = \"PUBLIC\";\n// https://www.w3.org/TR/xml11/#NT-ExternalID\n// `[75] ExternalID ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral`\nvar ExternalID = regg(regg(SYSTEM, S, SystemLiteral), \"|\", regg(PUBLIC, S, PubidLiteral, S, SystemLiteral));\nvar ExternalID_match = reg(\"^\", regg(regg(SYSTEM, S, \"(?<SystemLiteralOnly>\", SystemLiteral, \")\"), \"|\", regg(PUBLIC, S, \"(?<PubidLiteral>\", PubidLiteral, \")\", S, \"(?<SystemLiteral>\", SystemLiteral, \")\")));\n// https://www.w3.org/TR/xml11/#NT-NDataDecl\n// `[76] NDataDecl ::= S 'NDATA' S Name` [VC: Notation Declared]\nvar NDataDecl = regg(S, \"NDATA\", S, Name);\n// https://www.w3.org/TR/xml11/#NT-EntityDef\n// `[73] EntityDef ::= EntityValue | (ExternalID NDataDecl?)`\nvar EntityDef = regg(EntityValue, \"|\", regg(ExternalID, NDataDecl, \"?\"));\nvar ENTITY_DECL_START = \"<!ENTITY\";\n// https://www.w3.org/TR/xml11/#NT-GEDecl\n// `[71] GEDecl ::= '<!ENTITY' S Name S EntityDef S? '>'`\nvar GEDecl = reg(ENTITY_DECL_START, S, Name, S, EntityDef, S_OPT, \">\");\n// https://www.w3.org/TR/xml11/#NT-PEDef\n// `[74] PEDef ::= EntityValue | ExternalID`\nvar PEDef = regg(EntityValue, \"|\", ExternalID);\n// https://www.w3.org/TR/xml11/#NT-PEDecl\n// `[72] PEDecl ::= '<!ENTITY' S '%' S Name S PEDef S? '>'`\nvar PEDecl = reg(ENTITY_DECL_START, S, \"%\", S, Name, S, PEDef, S_OPT, \">\");\n// https://www.w3.org/TR/xml11/#NT-EntityDecl\n// `[70] EntityDecl ::= GEDecl | PEDecl`\nvar EntityDecl = regg(GEDecl, \"|\", PEDecl);\n// https://www.w3.org/TR/xml11/#NT-PublicID\n// `[83] PublicID    ::= 'PUBLIC' S PubidLiteral`\nvar PublicID = reg(PUBLIC, S, PubidLiteral);\n// https://www.w3.org/TR/xml11/#NT-NotationDecl\n// `[82] NotationDecl    ::= '<!NOTATION' S Name S (ExternalID | PublicID) S? '>'` [VC: Unique Notation Name]\nvar NotationDecl = reg(\"<!NOTATION\", S, Name, S, regg(ExternalID, \"|\", PublicID), S_OPT, \">\");\n// https://www.w3.org/TR/xml11/#NT-Eq\n// `[25] Eq ::= S? '=' S?`\nvar Eq = reg(S_OPT, \"=\", S_OPT);\n// https://www.w3.org/TR/xml/#NT-VersionNum\n// `[26] VersionNum ::= '1.' [0-9]+`\n// https://www.w3.org/TR/xml11/#NT-VersionNum\n// `[26] VersionNum ::= '1.1'`\nvar VersionNum = /1[.]\\d+/;\n// https://www.w3.org/TR/xml11/#NT-VersionInfo\n// `[24] VersionInfo ::= S 'version' Eq (\"'\" VersionNum \"'\" | '\"' VersionNum '\"')`\nvar VersionInfo = reg(S, \"version\", Eq, regg(\"'\", VersionNum, \"'\", \"|\", '\"', VersionNum, '\"'));\n// https://www.w3.org/TR/xml11/#NT-EncName\n// `[81] EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*`\nvar EncName = /[A-Za-z][-A-Za-z0-9._]*/;\n// https://www.w3.org/TR/xml11/#NT-EncDecl\n// `[80] EncodingDecl ::= S 'encoding' Eq ('\"' EncName '\"' | \"'\" EncName \"'\" )`\nvar EncodingDecl = regg(S, \"encoding\", Eq, regg('\"', EncName, '\"', \"|\", \"'\", EncName, \"'\"));\n// https://www.w3.org/TR/xml11/#NT-SDDecl\n// `[32] SDDecl ::= S 'standalone' Eq ((\"'\" ('yes' | 'no') \"'\") | ('\"' ('yes' | 'no') '\"'))`\nvar SDDecl = regg(S, \"standalone\", Eq, regg(\"'\", regg(\"yes\", \"|\", \"no\"), \"'\", \"|\", '\"', regg(\"yes\", \"|\", \"no\"), '\"'));\n// https://www.w3.org/TR/xml11/#NT-XMLDecl\n// [23] XMLDecl ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'\nvar XMLDecl = reg(/^<\\?xml/, VersionInfo, EncodingDecl, \"?\", SDDecl, \"?\", S_OPT, /\\?>/);\n/*\n https://www.w3.org/TR/xml/#NT-markupdecl\n https://www.w3.org/TR/xml11/#NT-markupdecl\n `[29] markupdecl ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment`\n var markupdecl = regg(elementdecl, '|', AttlistDecl, '|', EntityDecl, '|', NotationDecl, '|', PI_unsafe, '|', Comment);\n*/ /*\n https://www.w3.org/TR/xml-names/#NT-doctypedecl\n`[28a] DeclSep   ::= PEReference | S`\n https://www.w3.org/TR/xml11/#NT-intSubset\n```\n [28b] intSubset ::= (markupdecl | DeclSep)*\n                 === (markupdecl | PEReference | S)*\n```\n [WFC: PE Between Declarations]\n var intSubset = reg(regg(markupdecl, '|', PEReference, '|', S), '*');\n*/ var DOCTYPE_DECL_START = \"<!DOCTYPE\";\n/*\n https://www.w3.org/TR/xml11/#NT-doctypedecl\n `[28] doctypedecl ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'`\n https://www.afterwardsw3.org/TR/xml-names/#NT-doctypedecl\n `[16] doctypedecl ::= '<!DOCTYPE' S QName (S ExternalID)? S? ('[' (markupdecl | PEReference | S)* ']' S?)? '>'`\n var doctypedecl = reg('<!DOCTYPE', S, Name, regg(S, ExternalID), '?', S_OPT, regg(/\\[/, intSubset, /]/, S_OPT), '?', '>');\n*/ var CDATA_START = \"<![CDATA[\";\nvar CDATA_END = \"]]>\";\nvar CDStart = /<!\\[CDATA\\[/;\nvar CDEnd = /\\]\\]>/;\nvar CData = reg(Char, \"*?\", CDEnd);\n/*\n https://www.w3.org/TR/xml/#dt-cdsection\n `[18]   \tCDSect\t   ::=   \tCDStart CData CDEnd`\n `[19]   \tCDStart\t   ::=   \t'<![CDATA['`\n `[20]   \tCData\t   ::=   \t(Char* - (Char* ']]>' Char*))`\n `[21]   \tCDEnd\t   ::=   \t']]>'`\n*/ var CDSect = reg(CDStart, CData);\n// unit tested\nexports.chars = chars;\nexports.chars_without = chars_without;\nexports.detectUnicodeSupport = detectUnicodeSupport;\nexports.reg = reg;\nexports.regg = regg;\nexports.ABOUT_LEGACY_COMPAT = ABOUT_LEGACY_COMPAT;\nexports.ABOUT_LEGACY_COMPAT_SystemLiteral = ABOUT_LEGACY_COMPAT_SystemLiteral;\nexports.AttlistDecl = AttlistDecl;\nexports.CDATA_START = CDATA_START;\nexports.CDATA_END = CDATA_END;\nexports.CDSect = CDSect;\nexports.Char = Char;\nexports.Comment = Comment;\nexports.COMMENT_START = COMMENT_START;\nexports.COMMENT_END = COMMENT_END;\nexports.DOCTYPE_DECL_START = DOCTYPE_DECL_START;\nexports.elementdecl = elementdecl;\nexports.EntityDecl = EntityDecl;\nexports.EntityValue = EntityValue;\nexports.ExternalID = ExternalID;\nexports.ExternalID_match = ExternalID_match;\nexports.Name = Name;\nexports.NotationDecl = NotationDecl;\nexports.Reference = Reference;\nexports.PEReference = PEReference;\nexports.PI = PI;\nexports.PUBLIC = PUBLIC;\nexports.PubidLiteral = PubidLiteral;\nexports.QName = QName;\nexports.QName_exact = QName_exact;\nexports.QName_group = QName_group;\nexports.S = S;\nexports.SChar_s = SChar_s;\nexports.S_OPT = S_OPT;\nexports.SYSTEM = SYSTEM;\nexports.SystemLiteral = SystemLiteral;\nexports.UNICODE_REPLACEMENT_CHARACTER = UNICODE_REPLACEMENT_CHARACTER;\nexports.UNICODE_SUPPORT = UNICODE_SUPPORT;\nexports.XMLDecl = XMLDecl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2dyYW1tYXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxxQkFBcUJDLFVBQVU7SUFDdkMsSUFBSTtRQUNILElBQUksT0FBT0EsZUFBZSxZQUFZO1lBQ3JDQSxhQUFhQztRQUNkO1FBQ0EsaUZBQWlGO1FBQ2pGLElBQUlDLFFBQVEsSUFBSUYsV0FBVyxnQkFBYSxLQUFLRyxJQUFJLENBQUM7UUFDbEQsT0FBTyxDQUFDLENBQUNELFNBQVNBLEtBQUssQ0FBQyxFQUFFLENBQUNFLE1BQU0sS0FBSztJQUN2QyxFQUFFLE9BQU9DLE9BQU8sQ0FBQztJQUNqQixPQUFPO0FBQ1I7QUFDQSxJQUFJQyxrQkFBa0JQO0FBRXRCOzs7O0NBSUMsR0FDRCxTQUFTUSxNQUFNQyxNQUFNO0lBQ3BCLElBQUlBLE9BQU9DLE1BQU0sQ0FBQyxFQUFFLEtBQUssS0FBSztRQUM3QixNQUFNLElBQUlDLE1BQU1GLFNBQVM7SUFDMUI7SUFDQSxPQUFPQSxPQUFPQyxNQUFNLENBQUNFLEtBQUssQ0FBQyxHQUFHSCxPQUFPQyxNQUFNLENBQUNHLFdBQVcsQ0FBQztBQUN6RDtBQUVBOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0MsY0FBY0wsTUFBTSxFQUFFTSxNQUFNO0lBQ3BDLElBQUlOLE9BQU9DLE1BQU0sQ0FBQyxFQUFFLEtBQUssS0FBSztRQUM3QixNQUFNLElBQUlDLE1BQU0sTUFBTUYsT0FBT0MsTUFBTSxHQUFHO0lBQ3ZDO0lBQ0EsSUFBSSxDQUFDSyxVQUFVLE9BQU9BLFdBQVcsVUFBVTtRQUMxQyxNQUFNLElBQUlKLE1BQU1LLEtBQUtDLFNBQVMsQ0FBQ0YsVUFBVTtJQUMxQztJQUNBLElBQUlOLE9BQU9DLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDSCxZQUFZLENBQUMsR0FBRztRQUN6QyxNQUFNLElBQUlKLE1BQU0sTUFBTUksU0FBUyxrQkFBa0JOLE9BQU9DLE1BQU0sR0FBRztJQUNsRTtJQUNBLElBQUlLLFdBQVcsT0FBT04sT0FBT0MsTUFBTSxDQUFDUSxPQUFPLENBQUNILFlBQVksR0FBRztRQUMxRCxNQUFNLElBQUlKLE1BQU0sTUFBTUksU0FBUyx1Q0FBdUNOLE9BQU9DLE1BQU0sR0FBRztJQUN2RjtJQUNBLE9BQU8sSUFBSVIsT0FBT08sT0FBT0MsTUFBTSxDQUFDUyxPQUFPLENBQUNKLFFBQVEsS0FBS1Isa0JBQWtCLE1BQU07QUFDOUU7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNhLElBQUlDLElBQUk7SUFDaEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsT0FBTyxJQUFJcEIsT0FDVnFCLE1BQU1DLFNBQVMsQ0FBQ1osS0FBSyxDQUNuQmEsSUFBSSxDQUFDQyxXQUNMQyxHQUFHLENBQUMsU0FBVUMsSUFBSTtRQUNsQixJQUFJQyxRQUFRLE9BQU9ELFNBQVM7UUFDNUIsSUFBSUMsU0FBU1AsU0FBU1EsYUFBYUYsU0FBUyxLQUFLO1lBQ2hELE1BQU0sSUFBSWpCLE1BQU07UUFDakI7UUFDQSxPQUFPa0IsUUFBUUQsT0FBT0EsS0FBS2xCLE1BQU07SUFDbEMsR0FDQ3FCLElBQUksQ0FBQyxLQUNQeEIsa0JBQWtCLE9BQU87QUFFM0I7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVN5QixLQUFLWCxJQUFJO0lBQ2pCLElBQUlLLFVBQVVyQixNQUFNLEtBQUssR0FBRztRQUMzQixNQUFNLElBQUlNLE1BQU07SUFDakI7SUFDQSxPQUFPUyxJQUFJYSxLQUFLLENBQUNELE1BQU07UUFBQztLQUFNLENBQUNFLE1BQU0sQ0FBQ1gsTUFBTUMsU0FBUyxDQUFDWixLQUFLLENBQUNhLElBQUksQ0FBQ0MsWUFBWTtRQUFDO0tBQUk7QUFDbkY7QUFFQSxNQUFNO0FBQ04sa0RBQWtEO0FBQ2xELDBDQUEwQztBQUMxQyx1QkFBdUI7QUFDdkIsTUFBTTtBQUNOLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsK0NBQStDO0FBQy9DLEtBQUs7QUFDTCxxRkFBcUY7QUFDckYsSUFBSTtBQUVKLHNDQUFzQztBQUN0QywwQ0FBMEM7QUFDMUMsMkNBQTJDO0FBQzNDLCtFQUErRTtBQUUvRTs7Ozs7Ozs7Q0FRQyxHQUNELElBQUlTLGdDQUFnQztBQUNwQyxxQ0FBcUM7QUFDckMseUVBQXlFO0FBQ3pFLHdGQUF3RjtBQUN4Rix1Q0FBdUM7QUFDdkMscUVBQXFFO0FBQ3JFLGlEQUFpRDtBQUNqRCwyRkFBMkY7QUFDM0Ysd0NBQXdDO0FBQ3hDLElBQUlDLE9BQU8sb0RBQW9ELDBCQUEwQjtBQUN6RixJQUFJN0IsaUJBQWlCO0lBQ3BCLDREQUE0RDtJQUM1RDZCLE9BQU9oQixJQUFJLEtBQUtaLE1BQU00QixPQUFPLDBCQUEwQjtBQUN4RDtBQUVBLElBQUlDLFNBQVM7QUFDYixJQUFJQyxVQUFVOUIsTUFBTTZCO0FBQ3BCLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsSUFBSUUsSUFBSW5CLElBQUlpQixRQUFRO0FBQ3BCLHdEQUF3RDtBQUN4RCx1REFBdUQ7QUFDdkQsK0RBQStEO0FBQy9ELElBQUlHLFFBQVFwQixJQUFJaUIsUUFBUTtBQUV4QixnREFBZ0Q7QUFDaEQsZ1FBQWdRO0FBQ2hRLElBQUlJLGdCQUNILHNJQUFzSSwwQkFBMEI7QUFDakssSUFBSWxDLGlCQUFpQjtJQUNwQiw0REFBNEQ7SUFDNURrQyxnQkFBZ0JyQixJQUFJLEtBQUtaLE1BQU1pQyxnQkFBZ0IsMEJBQTBCO0FBQzFFO0FBQ0EsSUFBSUMsa0JBQWtCbEMsTUFBTWlDO0FBRTVCLDJDQUEyQztBQUMzQyxtR0FBbUc7QUFDbkcsSUFBSUUsV0FBV3ZCLElBQUksS0FBS3NCLGlCQUFpQmxDLE1BQU0sZ0JBQWdCQSxNQUFNLGlDQUFpQztBQUN0Ryx1Q0FBdUM7QUFDdkMsMkNBQTJDO0FBQzNDLElBQUlvQyxPQUFPeEIsSUFBSXFCLGVBQWVFLFVBQVU7QUFDeEM7OztBQUdBLEdBRUEsMENBQTBDO0FBQzFDLGdDQUFnQztBQUNoQyxJQUFJRSxVQUFVekIsSUFBSXVCLFVBQVU7QUFDNUI7Ozs7QUFJQSxHQUVBLDRDQUE0QztBQUM1QywwSEFBMEg7QUFDMUgsSUFBSUcsWUFBWTFCLElBQUksS0FBS3dCLE1BQU07QUFDL0IsMENBQTBDO0FBQzFDLHFGQUFxRjtBQUNyRixJQUFJRyxVQUFVZixLQUFLO0FBRW5COzs7OztBQUtBLEdBQ0EsSUFBSWdCLFlBQVloQixLQUFLYyxXQUFXLEtBQUtDO0FBRXJDLDhDQUE4QztBQUM5QyxzQ0FBc0M7QUFDdEMsMERBQTBEO0FBQzFELElBQUlFLGNBQWM3QixJQUFJLEtBQUt3QixNQUFNO0FBRWpDLDhDQUE4QztBQUM5QyxrSEFBa0g7QUFDbEgsSUFBSU0sY0FBY2xCLEtBQ2pCWixJQUFJLEtBQUtZLEtBQUssVUFBVSxLQUFLaUIsYUFBYSxLQUFLRCxZQUFZLEtBQUssTUFDaEUsS0FDQTVCLElBQUksS0FBS1ksS0FBSyxVQUFVLEtBQUtpQixhQUFhLEtBQUtELFlBQVksS0FBSztBQUdqRSwyQ0FBMkM7QUFDM0Msb0ZBQW9GO0FBQ3BGLElBQUlHLFdBQVduQixLQUFLLEtBQUtBLEtBQUssVUFBVSxLQUFLZ0IsWUFBWSxLQUFLLEtBQUssS0FBSyxLQUFLaEIsS0FBSyxVQUFVLEtBQUtnQixZQUFZLEtBQUs7QUFFbEgsMkNBQTJDO0FBQzNDLGdEQUFnRDtBQUNoRCw0QkFBNEI7QUFDNUIsSUFBSUksa0JBQWtCdEMsY0FBYzJCLGVBQWU7QUFDbkQsMkNBQTJDO0FBQzNDLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMsSUFBSVksYUFBYXZDLGNBQWM2QixVQUFVO0FBQ3pDLDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsNkJBQTZCO0FBQzdCLElBQUlXLFNBQVNsQyxJQUFJZ0MsaUJBQWlCQyxZQUFZO0FBRTlDOzs7Ozs7Ozs7Ozs7OztBQWNBLEdBQ0EsSUFBSUUsUUFBUW5DLElBQUlrQyxRQUFRdEIsS0FBSyxLQUFLc0IsU0FBUztBQUMzQyxJQUFJRSxjQUFjcEMsSUFBSSxLQUFLbUMsT0FBTztBQUNsQyxJQUFJRSxjQUFjckMsSUFBSSxLQUFLbUMsT0FBTztBQUVsQyxnREFBZ0Q7QUFDaEQsNkRBQTZEO0FBQzdELElBQUlHLGdCQUFnQjFCLEtBQUs7QUFFekI7Ozs7Ozs7QUFPQSxHQUNBLElBQUkyQixLQUFLdkMsSUFBSSxRQUFRLEtBQUt3QixNQUFNLEtBQUtaLEtBQUtPLEdBQUcsS0FBS0gsTUFBTSxRQUFRLEtBQUs7QUFFckUsNENBQTRDO0FBQzVDLDhFQUE4RTtBQUM5RSxJQUFJd0IsWUFBWTtBQUVoQiwrQ0FBK0M7QUFDL0MsMEVBQTBFO0FBQzFFLElBQUlDLGVBQWU3QixLQUFLLEtBQUs0QixXQUFXLE1BQU0sS0FBSyxLQUFLOUMsY0FBYzhDLFdBQVcsTUFBTTtBQUV2RiwyQ0FBMkM7QUFDM0Msd0RBQXdEO0FBRXhELElBQUlFLGdCQUFnQjtBQUNwQixJQUFJQyxjQUFjO0FBQ2xCLDBDQUEwQztBQUMxQyx1RUFBdUU7QUFDdkUsSUFBSUMsVUFBVTVDLElBQUkwQyxlQUFlOUIsS0FBS2xCLGNBQWNzQixNQUFNLE1BQU0sS0FBS2hCLElBQUksS0FBS04sY0FBY3NCLE1BQU0sUUFBUSxLQUFLMkI7QUFFL0csSUFBSUUsU0FBUztBQUNiLHdDQUF3QztBQUN4Qyx3RkFBd0Y7QUFDeEYsNENBQTRDO0FBQzVDLHlGQUF5RjtBQUN6Rix5REFBeUQ7QUFDekQsSUFBSUMsUUFBUWxDLEtBQ1haLElBQUksTUFBTW9CLE9BQU95QixRQUFRakMsS0FBS1EsT0FBTyxNQUFNQSxPQUFPZSxRQUFRLEtBQUtmLE9BQU8sU0FDdEUsS0FDQXBCLElBQUksTUFBTW9CLE9BQU95QixRQUFRekIsT0FBTztBQUdqQyxJQUFJMkIscUJBQXFCO0FBQ3pCOzs7Ozs7Ozs7Ozs7QUFZQSxHQUNBOzs7OztBQUtBLEdBQ0E7Ozs7O0FBS0EsR0FFQSx3REFBd0Q7QUFDeEQsZ0hBQWdIO0FBQ2hILElBQUlDLFdBQVdoRCxJQUFJLGFBQWErQyxtQkFBbUIsNENBQTRDO0FBRS9GLDhDQUE4QztBQUM5Qyw0REFBNEQ7QUFDNUQsSUFBSUUsY0FBY3JDLEtBQUssU0FBUyxLQUFLLE9BQU8sS0FBS2tDLE9BQU8sS0FBS0U7QUFFN0QsSUFBSUUsb0JBQW9CO0FBQ3hCLDhDQUE4QztBQUM5QyxpRUFBaUU7QUFDakUsa0RBQWtEO0FBQ2xELGtFQUFrRTtBQUNsRSx5REFBeUQ7QUFDekQseUVBQXlFO0FBQ3pFLHdEQUF3RDtBQUN4RCxJQUFJQyxjQUFjbkQsSUFBSWtELG1CQUFtQi9CLEdBQUdQLEtBQUt1QixPQUFPLEtBQUtOLGNBQWNWLEdBQUdQLEtBQUtxQyxhQUFhLEtBQUtwQixjQUFjVCxPQUFPO0FBRTFILCtDQUErQztBQUMvQyw0RUFBNEU7QUFDNUUsNkhBQTZIO0FBQzdILElBQUlnQyxlQUFlcEQsSUFBSSxZQUFZbUIsR0FBRyxNQUFNQyxPQUFPSSxNQUFNWixLQUFLUSxPQUFPLE1BQU1BLE9BQU9JLE9BQU8sS0FBS0osT0FBTztBQUNyRyw4Q0FBOEM7QUFDOUMsb0VBQW9FO0FBQ3BFLDhDQUE4QztBQUM5QyxJQUFJaUMsY0FBY3JELElBQUksTUFBTW9CLE9BQU9LLFNBQVNiLEtBQUtRLE9BQU8sTUFBTUEsT0FBT0ssVUFBVSxLQUFLTCxPQUFPO0FBRTNGLGlEQUFpRDtBQUNqRCx1REFBdUQ7QUFDdkQsSUFBSWtDLGlCQUFpQjFDLEtBQUt3QyxjQUFjLEtBQUtDO0FBRTdDOzs7Ozs7Ozs7OztHQVdHLEdBQ0gsSUFBSUUsVUFBVTNDLEtBQUssMERBQTBELEtBQUswQztBQUVsRiw2RUFBNkU7QUFDN0UsdUVBQXVFO0FBQ3ZFLDZHQUE2RztBQUM3RyxJQUFJRSxjQUFjNUMsS0FBSyxzQkFBc0IsS0FBS0EsS0FBS0EsS0FBSyxVQUFVTyxJQUFJLEtBQUtZO0FBRS9FLHlDQUF5QztBQUN6QyxpREFBaUQ7QUFDakQsNkNBQTZDO0FBQzdDLHFEQUFxRDtBQUNyRCx1RkFBdUY7QUFDdkYsaUNBQWlDO0FBQ2pDLGdFQUFnRTtBQUNoRSw0Q0FBNEM7QUFDNUMseUVBQXlFO0FBQ3pFLDJFQUEyRTtBQUMzRSxJQUFJMEIsU0FBUzdDLEtBQUtPLEdBQUdLLE1BQU1MLEdBQUdvQyxTQUFTcEMsR0FBR3FDO0FBRTFDLElBQUlFLHFCQUFxQjtBQUN6Qiw4Q0FBOEM7QUFDOUMsMkRBQTJEO0FBQzNELGtEQUFrRDtBQUNsRCw0REFBNEQ7QUFDNUQsMkVBQTJFO0FBQzNFLElBQUlDLGNBQWMzRCxJQUFJMEQsb0JBQW9CdkMsR0FBR0ssTUFBTWlDLFFBQVEsS0FBS3JDLE9BQU87QUFFdkUsb0ZBQW9GO0FBQ3BGLElBQUl3QyxzQkFBc0I7QUFDMUIsSUFBSUMsb0NBQW9DakQsS0FBSyxNQUFNZ0Qsc0JBQXNCLEtBQUssS0FBSyxNQUFNQSxzQkFBc0I7QUFDL0csSUFBSUUsU0FBUztBQUNiLElBQUlDLFNBQVM7QUFDYiw2Q0FBNkM7QUFDN0MsMkZBQTJGO0FBQzNGLElBQUlDLGFBQWFwRCxLQUFLQSxLQUFLa0QsUUFBUTNDLEdBQUdtQixnQkFBZ0IsS0FBSzFCLEtBQUttRCxRQUFRNUMsR0FBR3NCLGNBQWN0QixHQUFHbUI7QUFDNUYsSUFBSTJCLG1CQUFtQmpFLElBQ3RCLEtBQ0FZLEtBQ0NBLEtBQUtrRCxRQUFRM0MsR0FBRyx5QkFBeUJtQixlQUFlLE1BQ3hELEtBQ0ExQixLQUFLbUQsUUFBUTVDLEdBQUcsb0JBQW9Cc0IsY0FBYyxLQUFLdEIsR0FBRyxxQkFBcUJtQixlQUFlO0FBSWhHLDRDQUE0QztBQUM1QyxnRUFBZ0U7QUFDaEUsSUFBSTRCLFlBQVl0RCxLQUFLTyxHQUFHLFNBQVNBLEdBQUdLO0FBRXBDLDRDQUE0QztBQUM1Qyw2REFBNkQ7QUFDN0QsSUFBSTJDLFlBQVl2RCxLQUFLa0IsYUFBYSxLQUFLbEIsS0FBS29ELFlBQVlFLFdBQVc7QUFFbkUsSUFBSUUsb0JBQW9CO0FBQ3hCLHlDQUF5QztBQUN6Qyx5REFBeUQ7QUFDekQsSUFBSUMsU0FBU3JFLElBQUlvRSxtQkFBbUJqRCxHQUFHSyxNQUFNTCxHQUFHZ0QsV0FBVy9DLE9BQU87QUFDbEUsd0NBQXdDO0FBQ3hDLDRDQUE0QztBQUM1QyxJQUFJa0QsUUFBUTFELEtBQUtrQixhQUFhLEtBQUtrQztBQUNuQyx5Q0FBeUM7QUFDekMsMkRBQTJEO0FBQzNELElBQUlPLFNBQVN2RSxJQUFJb0UsbUJBQW1CakQsR0FBRyxLQUFLQSxHQUFHSyxNQUFNTCxHQUFHbUQsT0FBT2xELE9BQU87QUFDdEUsNkNBQTZDO0FBQzdDLHdDQUF3QztBQUN4QyxJQUFJb0QsYUFBYTVELEtBQUt5RCxRQUFRLEtBQUtFO0FBRW5DLDJDQUEyQztBQUMzQyxpREFBaUQ7QUFDakQsSUFBSUUsV0FBV3pFLElBQUkrRCxRQUFRNUMsR0FBR3NCO0FBQzlCLCtDQUErQztBQUMvQyw2R0FBNkc7QUFDN0csSUFBSWlDLGVBQWUxRSxJQUFJLGNBQWNtQixHQUFHSyxNQUFNTCxHQUFHUCxLQUFLb0QsWUFBWSxLQUFLUyxXQUFXckQsT0FBTztBQUV6RixxQ0FBcUM7QUFDckMsMEJBQTBCO0FBQzFCLElBQUl1RCxLQUFLM0UsSUFBSW9CLE9BQU8sS0FBS0E7QUFDekIsMkNBQTJDO0FBQzNDLG9DQUFvQztBQUNwQyw2Q0FBNkM7QUFDN0MsOEJBQThCO0FBQzlCLElBQUl3RCxhQUFhO0FBQ2pCLDhDQUE4QztBQUM5QyxrRkFBa0Y7QUFDbEYsSUFBSUMsY0FBYzdFLElBQUltQixHQUFHLFdBQVd3RCxJQUFJL0QsS0FBSyxLQUFLZ0UsWUFBWSxLQUFLLEtBQUssS0FBS0EsWUFBWTtBQUN6RiwwQ0FBMEM7QUFDMUMscURBQXFEO0FBQ3JELElBQUlFLFVBQVU7QUFDZCwwQ0FBMEM7QUFDMUMsK0VBQStFO0FBQy9FLElBQUlDLGVBQWVuRSxLQUFLTyxHQUFHLFlBQVl3RCxJQUFJL0QsS0FBSyxLQUFLa0UsU0FBUyxLQUFLLEtBQUssS0FBS0EsU0FBUztBQUN0Rix5Q0FBeUM7QUFDekMsNEZBQTRGO0FBQzVGLElBQUlFLFNBQVNwRSxLQUFLTyxHQUFHLGNBQWN3RCxJQUFJL0QsS0FBSyxLQUFLQSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssS0FBSyxLQUFLQSxLQUFLLE9BQU8sS0FBSyxPQUFPO0FBQ2hILDBDQUEwQztBQUMxQyxxRUFBcUU7QUFDckUsSUFBSXFFLFVBQVVqRixJQUFJLFdBQVc2RSxhQUFhRSxjQUFjLEtBQUtDLFFBQVEsS0FBSzVELE9BQU87QUFFakY7Ozs7O0FBS0EsR0FDQTs7Ozs7Ozs7OztBQVVBLEdBQ0EsSUFBSThELHFCQUFxQjtBQUN6Qjs7Ozs7O0FBTUEsR0FFQSxJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLFlBQVk7QUFDaEIsSUFBSUMsVUFBVTtBQUNkLElBQUlDLFFBQVE7QUFDWixJQUFJQyxRQUFRdkYsSUFBSWdCLE1BQU0sTUFBTXNFO0FBQzVCOzs7Ozs7QUFNQSxHQUNBLElBQUlFLFNBQVN4RixJQUFJcUYsU0FBU0U7QUFFMUIsY0FBYztBQUNkRSxhQUFhLEdBQUdyRztBQUNoQnFHLHFCQUFxQixHQUFHL0Y7QUFDeEIrRiw0QkFBNEIsR0FBRzdHO0FBQy9CNkcsV0FBVyxHQUFHekY7QUFDZHlGLFlBQVksR0FBRzdFO0FBQ2Y2RSwyQkFBMkIsR0FBRzdCO0FBQzlCNkIseUNBQXlDLEdBQUc1QjtBQUM1QzRCLG1CQUFtQixHQUFHOUI7QUFDdEI4QixtQkFBbUIsR0FBR047QUFDdEJNLGlCQUFpQixHQUFHTDtBQUNwQkssY0FBYyxHQUFHRDtBQUNqQkMsWUFBWSxHQUFHekU7QUFDZnlFLGVBQWUsR0FBRzdDO0FBQ2xCNkMscUJBQXFCLEdBQUcvQztBQUN4QitDLG1CQUFtQixHQUFHOUM7QUFDdEI4QywwQkFBMEIsR0FBR1A7QUFDN0JPLG1CQUFtQixHQUFHdEM7QUFDdEJzQyxrQkFBa0IsR0FBR2pCO0FBQ3JCaUIsbUJBQW1CLEdBQUczRDtBQUN0QjJELGtCQUFrQixHQUFHekI7QUFDckJ5Qix3QkFBd0IsR0FBR3hCO0FBQzNCd0IsWUFBWSxHQUFHakU7QUFDZmlFLG9CQUFvQixHQUFHZjtBQUN2QmUsaUJBQWlCLEdBQUc3RDtBQUNwQjZELG1CQUFtQixHQUFHNUQ7QUFDdEI0RCxVQUFVLEdBQUdsRDtBQUNia0QsY0FBYyxHQUFHMUI7QUFDakIwQixvQkFBb0IsR0FBR2hEO0FBQ3ZCZ0QsYUFBYSxHQUFHdEQ7QUFDaEJzRCxtQkFBbUIsR0FBR3JEO0FBQ3RCcUQsbUJBQW1CLEdBQUdwRDtBQUN0Qm9ELFNBQVMsR0FBR3RFO0FBQ1pzRSxlQUFlLEdBQUd2RTtBQUNsQnVFLGFBQWEsR0FBR3JFO0FBQ2hCcUUsY0FBYyxHQUFHM0I7QUFDakIyQixxQkFBcUIsR0FBR25EO0FBQ3hCbUQscUNBQXFDLEdBQUcxRTtBQUN4QzBFLHVCQUF1QixHQUFHdEc7QUFDMUJzRyxlQUFlLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlrZS1yZW50YWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AeG1sZG9tL3htbGRvbS9saWIvZ3JhbW1hci5qcz85YThjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlY3RzIHJlbGV2YW50IHVuaWNvZGUgc3VwcG9ydCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBpbiB0aGUgcnVudGltZS5cbiAqIFNob3VsZCB0aGUgcnVudGltZSBub3QgYWNjZXB0cyB0aGUgZmxhZyBgdWAgb3IgdW5pY29kZSByYW5nZXMsXG4gKiBjaGFyYWN0ZXIgY2xhc3NlcyB3aXRob3V0IHVuaWNvZGUgaGFuZGxpbmcgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSB7dHlwZW9mIFJlZ0V4cH0gW1JlZ0V4cEltcGw9UmVnRXhwXVxuICogRm9yIHRlc3Rpbmc6IHRoZSBSZWdFeHAgY2xhc3MuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBzZWUgaHR0cHM6Ly9ub2RlLmdyZWVuLyNFUzIwMTUtc3ludGF4LVJlZ0V4cC0teS0tYW5kLS11LS1mbGFnc1xuICovXG5mdW5jdGlvbiBkZXRlY3RVbmljb2RlU3VwcG9ydChSZWdFeHBJbXBsKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiBSZWdFeHBJbXBsICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRSZWdFeHBJbXBsID0gUmVnRXhwO1xuXHRcdH1cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXM1L25vLXVuaWNvZGUtcmVnZXgsZXM1L25vLXVuaWNvZGUtY29kZS1wb2ludC1lc2NhcGVcblx0XHR2YXIgbWF0Y2ggPSBuZXcgUmVnRXhwSW1wbCgnXFx1ezFkMzA2fScsICd1JykuZXhlYygn8J2MhicpO1xuXHRcdHJldHVybiAhIW1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA9PT0gMjtcblx0fSBjYXRjaCAoZXJyb3IpIHt9XG5cdHJldHVybiBmYWxzZTtcbn1cbnZhciBVTklDT0RFX1NVUFBPUlQgPSBkZXRlY3RVbmljb2RlU3VwcG9ydCgpO1xuXG4vKipcbiAqIFJlbW92ZXMgYFtgLCBgXWAgYW5kIGFueSB0cmFpbGluZyBxdWFudGlmaWVycyBmcm9tIHRoZSBzb3VyY2Ugb2YgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICovXG5mdW5jdGlvbiBjaGFycyhyZWdleHApIHtcblx0aWYgKHJlZ2V4cC5zb3VyY2VbMF0gIT09ICdbJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihyZWdleHAgKyAnIGNhbiBub3QgYmUgdXNlZCB3aXRoIGNoYXJzJyk7XG5cdH1cblx0cmV0dXJuIHJlZ2V4cC5zb3VyY2Uuc2xpY2UoMSwgcmVnZXhwLnNvdXJjZS5sYXN0SW5kZXhPZignXScpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGNoYXJhY3RlciBsaXN0IHJlZ3VsYXIgZXhwcmVzc2lvbixcbiAqIGJ5IHJlbW92aW5nIGBzZWFyY2hgIGZyb20gdGhlIHNvdXJjZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBUaGUgY2hhcmFjdGVyKHMpIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGNoYXJzX3dpdGhvdXQocmVnZXhwLCBzZWFyY2gpIHtcblx0aWYgKHJlZ2V4cC5zb3VyY2VbMF0gIT09ICdbJykge1xuXHRcdHRocm93IG5ldyBFcnJvcignLycgKyByZWdleHAuc291cmNlICsgJy8gY2FuIG5vdCBiZSB1c2VkIHdpdGggY2hhcnNfd2l0aG91dCcpO1xuXHR9XG5cdGlmICghc2VhcmNoIHx8IHR5cGVvZiBzZWFyY2ggIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHNlYXJjaCkgKyAnIGlzIG5vdCBhIHZhbGlkIHNlYXJjaCcpO1xuXHR9XG5cdGlmIChyZWdleHAuc291cmNlLmluZGV4T2Yoc2VhcmNoKSA9PT0gLTEpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHNlYXJjaCArICdcIiBpcyBub3QgaXMgLycgKyByZWdleHAuc291cmNlICsgJy8nKTtcblx0fVxuXHRpZiAoc2VhcmNoID09PSAnLScgJiYgcmVnZXhwLnNvdXJjZS5pbmRleE9mKHNlYXJjaCkgIT09IDEpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHNlYXJjaCArICdcIiBpcyBub3QgYXQgdGhlIGZpcnN0IHBvc3Rpb24gb2YgLycgKyByZWdleHAuc291cmNlICsgJy8nKTtcblx0fVxuXHRyZXR1cm4gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLnJlcGxhY2Uoc2VhcmNoLCAnJyksIFVOSUNPREVfU1VQUE9SVCA/ICd1JyA6ICcnKTtcbn1cblxuLyoqXG4gKiBDb21iaW5lcyBhbmQgUmVndWxhciBleHByZXNzaW9ucyBjb3JyZWN0bHkgYnkgdXNpbmcgYFJlZ0V4cC5zb3VyY2VgLlxuICpcbiAqIEBwYXJhbSB7Li4uKFJlZ0V4cCB8IHN0cmluZylbXX0gYXJnc1xuICogQHJldHVybnMge1JlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnKGFyZ3MpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRyZXR1cm4gbmV3IFJlZ0V4cChcblx0XHRBcnJheS5wcm90b3R5cGUuc2xpY2Vcblx0XHRcdC5jYWxsKGFyZ3VtZW50cylcblx0XHRcdC5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcblx0XHRcdFx0dmFyIGlzU3RyID0gdHlwZW9mIHBhcnQgPT09ICdzdHJpbmcnO1xuXHRcdFx0XHRpZiAoaXNTdHIgJiYgc2VsZiA9PT0gdW5kZWZpbmVkICYmIHBhcnQgPT09ICd8Jykge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcigndXNlIHJlZ2cgaW5zdGVhZCBvZiByZWcgdG8gd3JhcCBleHByZXNzaW9ucyB3aXRoIGB8YCEnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gaXNTdHIgPyBwYXJ0IDogcGFydC5zb3VyY2U7XG5cdFx0XHR9KVxuXHRcdFx0LmpvaW4oJycpLFxuXHRcdFVOSUNPREVfU1VQUE9SVCA/ICdtdScgOiAnbSdcblx0KTtcbn1cblxuLyoqXG4gKiBMaWtlIGByZWdgIGJ1dCB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBgKD86YCxgKWAgdG8gY3JlYXRlIGEgbm9uIHRyYWNraW5nIGdyb3VwLlxuICpcbiAqIEBwYXJhbSB7Li4uKFJlZ0V4cCB8IHN0cmluZylbXX0gYXJnc1xuICogQHJldHVybnMge1JlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZyhhcmdzKSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdubyBwYXJhbWV0ZXJzIHByb3ZpZGVkJyk7XG5cdH1cblx0cmV0dXJuIHJlZy5hcHBseShyZWdnLCBbJyg/OiddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLCBbJyknXSkpO1xufVxuXG4vLyAvKipcbi8vICAqIEFwcGVuZCBeIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGV4cHJlc3Npb24uXG4vLyAgKiBAcGFyYW0gey4uLihSZWdFeHAgfCBzdHJpbmcpW119IGFyZ3Ncbi8vICAqIEByZXR1cm5zIHtSZWdFeHB9XG4vLyAgKi9cbi8vIGZ1bmN0aW9uIHJlZ19zdGFydChhcmdzKSB7XG4vLyBcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4vLyBcdFx0dGhyb3cgbmV3IEVycm9yKCdubyBwYXJhbWV0ZXJzIHByb3ZpZGVkJyk7XG4vLyBcdH1cbi8vIFx0cmV0dXJuIHJlZy5hcHBseShyZWdfc3RhcnQsIFsnXiddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4vLyB9XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI2RvY3VtZW50XG4vLyBgWzFdIGRvY3VtZW50IDo6PSBwcm9sb2cgZWxlbWVudCBNaXNjKmBcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtZG9jdW1lbnRcbi8vIGBbMV0gZG9jdW1lbnQgOjo9ICggcHJvbG9nIGVsZW1lbnQgTWlzYyogKSAtICggQ2hhciogUmVzdHJpY3RlZENoYXIgQ2hhciogKWBcblxuLyoqXG4gKiBBIGNoYXJhY3RlciB1c3VhbGx5IGFwcGVhcmluZyBpbiB3cm9uZ2x5IGNvbnZlcnRlZCBzdHJpbmdzLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwZWNpYWxzXyhVbmljb2RlX2Jsb2NrKSNSZXBsYWNlbWVudF9jaGFyYWN0ZXJcbiAqIEBzZWUgaHR0cHM6Ly9ub2RlanMuZGV2L2VuL2FwaS92MTgvYnVmZmVyLyNidWZmZXJzLWFuZC1jaGFyYWN0ZXItZW5jb2RpbmdzXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2ZhcS91dGZfYm9tLmh0bWwjQk9NXG4gKiBAcmVhZG9ubHlcbiAqL1xudmFyIFVOSUNPREVfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSID0gJ1xcdUZGRkQnO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jTlQtQ2hhclxuLy8gYW55IFVuaWNvZGUgY2hhcmFjdGVyLCBleGNsdWRpbmcgdGhlIHN1cnJvZ2F0ZSBibG9ja3MsIEZGRkUsIGFuZCBGRkZGLlxuLy8gYFsyXSBDaGFyIDo6PSAjeDkgfCAjeEEgfCAjeEQgfCBbI3gyMC0jeEQ3RkZdIHwgWyN4RTAwMC0jeEZGRkRdIHwgWyN4MTAwMDAtI3gxMEZGRkZdYFxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1DaGFyXG4vLyBgWzJdIENoYXIgOjo9IFsjeDEtI3hEN0ZGXSB8IFsjeEUwMDAtI3hGRkZEXSB8IFsjeDEwMDAwLSN4MTBGRkZGXWBcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtUmVzdHJpY3RlZENoYXJcbi8vIGBbMmFdIFJlc3RyaWN0ZWRDaGFyIDo6PSBbI3gxLSN4OF0gfCBbI3hCLSN4Q10gfCBbI3hFLSN4MUZdIHwgWyN4N0YtI3g4NF0gfCBbI3g4Ni0jeDlGXWBcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jY2hhcnNldHNcbnZhciBDaGFyID0gL1stXFx4MDlcXHgwQVxceDBEXFx4MjAtXFx4MkNcXHgyRS1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZEXS87IC8vIHdpdGhvdXQgXFx1MTAwMDAtXFx1RUZGRkZcbmlmIChVTklDT0RFX1NVUFBPUlQpIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzNS9uby11bmljb2RlLWNvZGUtcG9pbnQtZXNjYXBlXG5cdENoYXIgPSByZWcoJ1snLCBjaGFycyhDaGFyKSwgJ1xcXFx1ezEwMDAwfS1cXFxcdXsxMEZGRkZ9JywgJ10nKTtcbn1cblxudmFyIF9TQ2hhciA9IC9bXFx4MjBcXHgwOVxceDBEXFx4MEFdLztcbnZhciBTQ2hhcl9zID0gY2hhcnMoX1NDaGFyKTtcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtU1xuLy8gYFszXSBTIDo6PSAoI3gyMCB8ICN4OSB8ICN4RCB8ICN4QSkrYFxudmFyIFMgPSByZWcoX1NDaGFyLCAnKycpO1xuLy8gb3B0aW9uYWwgd2hpdGVzcGFjZSBkZXNjcmliZWQgYXMgYFM/YCBpbiB0aGUgZ3JhbW1hcixcbi8vIHNpbXBsaWZpZWQgdG8gMC1uIG9jY3VycmVuY2VzIG9mIHRoZSBjaGFyYWN0ZXIgY2xhc3Ncbi8vIGluc3RlYWQgb2YgMC0xIG9jY3VycmVuY2VzIG9mIGEgbm9uLWNhcHR1cmluZyBncm91cCBhcm91bmQgU1xudmFyIFNfT1BUID0gcmVnKF9TQ2hhciwgJyonKTtcblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1OYW1lU3RhcnRDaGFyXG4vLyBgWzRdIE5hbWVTdGFydENoYXIgOjo9IFwiOlwiIHwgW0EtWl0gfCBcIl9cIiB8IFthLXpdIHwgWyN4QzAtI3hENl0gfCBbI3hEOC0jeEY2XSB8IFsjeEY4LSN4MkZGXSB8IFsjeDM3MC0jeDM3RF0gfCBbI3gzN0YtI3gxRkZGXSB8IFsjeDIwMEMtI3gyMDBEXSB8IFsjeDIwNzAtI3gyMThGXSB8IFsjeDJDMDAtI3gyRkVGXSB8IFsjeDMwMDEtI3hEN0ZGXSB8IFsjeEY5MDAtI3hGRENGXSB8IFsjeEZERjAtI3hGRkZEXSB8IFsjeDEwMDAwLSN4RUZGRkZdYFxudmFyIE5hbWVTdGFydENoYXIgPVxuXHQvWzpfYS16QS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyRkZcXHUwMzcwLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdLzsgLy8gd2l0aG91dCBcXHUxMDAwMC1cXHVFRkZGRlxuaWYgKFVOSUNPREVfU1VQUE9SVCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXM1L25vLXVuaWNvZGUtY29kZS1wb2ludC1lc2NhcGVcblx0TmFtZVN0YXJ0Q2hhciA9IHJlZygnWycsIGNoYXJzKE5hbWVTdGFydENoYXIpLCAnXFxcXHV7MTAwMDB9LVxcXFx1ezEwRkZGRn0nLCAnXScpO1xufVxudmFyIE5hbWVTdGFydENoYXJfcyA9IGNoYXJzKE5hbWVTdGFydENoYXIpO1xuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULU5hbWVDaGFyXG4vLyBgWzRhXSBOYW1lQ2hhciA6Oj0gTmFtZVN0YXJ0Q2hhciB8IFwiLVwiIHwgXCIuXCIgfCBbMC05XSB8ICN4QjcgfCBbI3gwMzAwLSN4MDM2Rl0gfCBbI3gyMDNGLSN4MjA0MF1gXG52YXIgTmFtZUNoYXIgPSByZWcoJ1snLCBOYW1lU3RhcnRDaGFyX3MsIGNoYXJzKC9bLS4wLTlcXHhCN10vKSwgY2hhcnMoL1tcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdLyksICddJyk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULU5hbWVcbi8vIGBbNV0gTmFtZSA6Oj0gTmFtZVN0YXJ0Q2hhciAoTmFtZUNoYXIpKmBcbnZhciBOYW1lID0gcmVnKE5hbWVTdGFydENoYXIsIE5hbWVDaGFyLCAnKicpO1xuLypcbmh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtTmFtZXNcbmBbNl0gTmFtZXMgOjo9IE5hbWUgKCN4MjAgTmFtZSkqYFxuKi9cblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1ObXRva2VuXG4vLyBgWzddIE5tdG9rZW4gOjo9IChOYW1lQ2hhcikrYFxudmFyIE5tdG9rZW4gPSByZWcoTmFtZUNoYXIsICcrJyk7XG4vKlxuaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1ObXRva2Vuc1xuYFs4XSBObXRva2VucyA6Oj0gTm10b2tlbiAoI3gyMCBObXRva2VuKSpgXG52YXIgTm10b2tlbnMgPSByZWcoTm10b2tlbiwgcmVnZygvXFx4MjAvLCBObXRva2VuKSwgJyonKTtcbiovXG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtRW50aXR5UmVmXG4vLyBgWzY4XSBFbnRpdHlSZWYgOjo9ICcmJyBOYW1lICc7J2AgW1dGQzogRW50aXR5IERlY2xhcmVkXSBbVkM6IEVudGl0eSBEZWNsYXJlZF0gW1dGQzogUGFyc2VkIEVudGl0eV0gW1dGQzogTm8gUmVjdXJzaW9uXVxudmFyIEVudGl0eVJlZiA9IHJlZygnJicsIE5hbWUsICc7Jyk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUNoYXJSZWZcbi8vIGBbNjZdIENoYXJSZWYgOjo9ICcmIycgWzAtOV0rICc7JyB8ICcmI3gnIFswLTlhLWZBLUZdKyAnOydgIFtXRkM6IExlZ2FsIENoYXJhY3Rlcl1cbnZhciBDaGFyUmVmID0gcmVnZygvJiNbMC05XSs7fCYjeFswLTlhLWZBLUZdKzsvKTtcblxuLypcbmh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtUmVmZXJlbmNlXG4tIGBbNjddIFJlZmVyZW5jZSA6Oj0gRW50aXR5UmVmIHwgQ2hhclJlZmBcbi0gYFs2Nl0gQ2hhclJlZiA6Oj0gJyYjJyBbMC05XSsgJzsnIHwgJyYjeCcgWzAtOWEtZkEtRl0rICc7J2AgW1dGQzogTGVnYWwgQ2hhcmFjdGVyXVxuLSBgWzY4XSBFbnRpdHlSZWYgOjo9ICcmJyBOYW1lICc7J2AgW1dGQzogRW50aXR5IERlY2xhcmVkXSBbVkM6IEVudGl0eSBEZWNsYXJlZF0gW1dGQzogUGFyc2VkIEVudGl0eV0gW1dGQzogTm8gUmVjdXJzaW9uXVxuKi9cbnZhciBSZWZlcmVuY2UgPSByZWdnKEVudGl0eVJlZiwgJ3wnLCBDaGFyUmVmKTtcblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1QRVJlZmVyZW5jZVxuLy8gYFs2OV0gUEVSZWZlcmVuY2UgOjo9ICclJyBOYW1lICc7J2Bcbi8vIFtWQzogRW50aXR5IERlY2xhcmVkXSBbV0ZDOiBObyBSZWN1cnNpb25dIFtXRkM6IEluIERURF1cbnZhciBQRVJlZmVyZW5jZSA9IHJlZygnJScsIE5hbWUsICc7Jyk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtRW50aXR5VmFsdWVcbi8vIGBbOV0gRW50aXR5VmFsdWUgOjo9ICdcIicgKFteJSZcIl0gfCBQRVJlZmVyZW5jZSB8IFJlZmVyZW5jZSkqICdcIicgfCBcIidcIiAoW14lJiddIHwgUEVSZWZlcmVuY2UgfCBSZWZlcmVuY2UpKiBcIidcImBcbnZhciBFbnRpdHlWYWx1ZSA9IHJlZ2coXG5cdHJlZygnXCInLCByZWdnKC9bXiUmXCJdLywgJ3wnLCBQRVJlZmVyZW5jZSwgJ3wnLCBSZWZlcmVuY2UpLCAnKicsICdcIicpLFxuXHQnfCcsXG5cdHJlZyhcIidcIiwgcmVnZygvW14lJiddLywgJ3wnLCBQRVJlZmVyZW5jZSwgJ3wnLCBSZWZlcmVuY2UpLCAnKicsIFwiJ1wiKVxuKTtcblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1BdHRWYWx1ZVxuLy8gYFsxMF0gQXR0VmFsdWUgOjo9ICdcIicgKFtePCZcIl0gfCBSZWZlcmVuY2UpKiAnXCInIHwgXCInXCIgKFtePCYnXSB8IFJlZmVyZW5jZSkqIFwiJ1wiYFxudmFyIEF0dFZhbHVlID0gcmVnZygnXCInLCByZWdnKC9bXjwmXCJdLywgJ3wnLCBSZWZlcmVuY2UpLCAnKicsICdcIicsICd8JywgXCInXCIsIHJlZ2coL1tePCYnXS8sICd8JywgUmVmZXJlbmNlKSwgJyonLCBcIidcIik7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwtbmFtZXMvI25zLWRlY2xcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwtbmFtZXMvI25zLXF1YWxuYW1lc1xuLy8gTmFtZVN0YXJ0Q2hhciB3aXRob3V0IFwiOlwiXG52YXIgTkNOYW1lU3RhcnRDaGFyID0gY2hhcnNfd2l0aG91dChOYW1lU3RhcnRDaGFyLCAnOicpO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC1uYW1lcy8jb3JwaGFuc1xuLy8gYFs1XSBOQ05hbWVDaGFyIDo6PSBOYW1lQ2hhciAtICc6J2Bcbi8vIEFuIFhNTCBOYW1lQ2hhciwgbWludXMgdGhlIFwiOlwiXG52YXIgTkNOYW1lQ2hhciA9IGNoYXJzX3dpdGhvdXQoTmFtZUNoYXIsICc6Jyk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNOVC1OQ05hbWVcbi8vIGBbNF0gTkNOYW1lIDo6PSBOYW1lIC0gKENoYXIqICc6JyBDaGFyKilgXG4vLyBBbiBYTUwgTmFtZSwgbWludXMgdGhlIFwiOlwiXG52YXIgTkNOYW1lID0gcmVnKE5DTmFtZVN0YXJ0Q2hhciwgTkNOYW1lQ2hhciwgJyonKTtcblxuLyoqXG5odHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNucy1xdWFsbmFtZXNcblxuYGBgXG5bN10gUU5hbWUgOjo9IFByZWZpeGVkTmFtZSB8IFVucHJlZml4ZWROYW1lXG5cdFx0XHRcdCAgPT09IChOQ05hbWUgJzonIE5DTmFtZSkgfCBOQ05hbWVcblx0XHRcdFx0ICA9PT0gTkNOYW1lICgnOicgTkNOYW1lKT9cbls4XSBQcmVmaXhlZE5hbWUgOjo9IFByZWZpeCAnOicgTG9jYWxQYXJ0XG5cdFx0XHRcdFx0XHRcdFx0ID09PSBOQ05hbWUgJzonIE5DTmFtZVxuWzldIFVucHJlZml4ZWROYW1lIDo6PSBMb2NhbFBhcnRcblx0XHRcdFx0XHRcdFx0XHRcdCA9PT0gTkNOYW1lXG5bMTBdIFByZWZpeCA6Oj0gTkNOYW1lXG5bMTFdIExvY2FsUGFydCA6Oj0gTkNOYW1lXG5gYGBcbiovXG52YXIgUU5hbWUgPSByZWcoTkNOYW1lLCByZWdnKCc6JywgTkNOYW1lKSwgJz8nKTtcbnZhciBRTmFtZV9leGFjdCA9IHJlZygnXicsIFFOYW1lLCAnJCcpO1xudmFyIFFOYW1lX2dyb3VwID0gcmVnKCcoJywgUU5hbWUsICcpJyk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtU3lzdGVtTGl0ZXJhbFxuLy8gYFsxMV0gU3lzdGVtTGl0ZXJhbCA6Oj0gKCdcIicgW15cIl0qICdcIicpIHwgKFwiJ1wiIFteJ10qIFwiJ1wiKWBcbnZhciBTeXN0ZW1MaXRlcmFsID0gcmVnZygvXCJbXlwiXSpcInwnW14nXSonLyk7XG5cbi8qXG4gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1QSVxuIGBgYFxuIFsxN10gUElUYXJnZXQgICAgOjo9IE5hbWUgLSAoKCdYJyB8ICd4JykgKCdNJyB8ICdtJykgKCdMJyB8ICdsJykpXG4gWzE2XSBQSSAgICA6Oj0gJzw/JyBQSVRhcmdldCAoUyAoQ2hhciogLSAoQ2hhciogJz8+JyBDaGFyKikpKT8gJz8+J1xuIGBgYFxuIHRhcmdldCAveG1sL2kgaXMgbm90IGV4Y2x1ZGVkIVxuKi9cbnZhciBQSSA9IHJlZygvXjxcXD8vLCAnKCcsIE5hbWUsICcpJywgcmVnZyhTLCAnKCcsIENoYXIsICcqPyknKSwgJz8nLCAvXFw/Pi8pO1xuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULVB1YmlkQ2hhclxuLy8gYFsxM10gUHViaWRDaGFyIDo6PSAjeDIwIHwgI3hEIHwgI3hBIHwgW2EtekEtWjAtOV0gfCBbLScoKSssLi86PT87ISojQCRfJV1gXG52YXIgUHViaWRDaGFyID0gL1tcXHgyMFxceDBEXFx4MEFhLXpBLVowLTktJygpKywuLzo9PzshKiNAJF8lXS87XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtUHViaWRMaXRlcmFsXG4vLyBgWzEyXSBQdWJpZExpdGVyYWwgOjo9ICdcIicgUHViaWRDaGFyKiAnXCInIHwgXCInXCIgKFB1YmlkQ2hhciAtIFwiJ1wiKSogXCInXCJgXG52YXIgUHViaWRMaXRlcmFsID0gcmVnZygnXCInLCBQdWJpZENoYXIsICcqXCInLCAnfCcsIFwiJ1wiLCBjaGFyc193aXRob3V0KFB1YmlkQ2hhciwgXCInXCIpLCBcIionXCIpO1xuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUNoYXJEYXRhXG4vLyBgWzE0XSBDaGFyRGF0YSAgICA6Oj0gW148Jl0qIC0gKFtePCZdKiAnXV0+JyBbXjwmXSopYFxuXG52YXIgQ09NTUVOVF9TVEFSVCA9ICc8IS0tJztcbnZhciBDT01NRU5UX0VORCA9ICctLT4nO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1Db21tZW50XG4vLyBgWzE1XSBDb21tZW50IDo6PSAnPCEtLScgKChDaGFyIC0gJy0nKSB8ICgnLScgKENoYXIgLSAnLScpKSkqICctLT4nYFxudmFyIENvbW1lbnQgPSByZWcoQ09NTUVOVF9TVEFSVCwgcmVnZyhjaGFyc193aXRob3V0KENoYXIsICctJyksICd8JywgcmVnKCctJywgY2hhcnNfd2l0aG91dChDaGFyLCAnLScpKSksICcqJywgQ09NTUVOVF9FTkQpO1xuXG52YXIgUENEQVRBID0gJyNQQ0RBVEEnO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1NaXhlZFxuLy8gYFs1MV0gTWl4ZWQgOjo9ICcoJyBTPyAnI1BDREFUQScgKFM/ICd8JyBTPyBOYW1lKSogUz8gJykqJyB8ICcoJyBTPyAnI1BDREFUQScgUz8gJyknYFxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC1uYW1lcy8jTlQtTWl4ZWRcbi8vIGBbNTFdIE1peGVkIDo6PSAnKCcgUz8gJyNQQ0RBVEEnIChTPyAnfCcgUz8gUU5hbWUpKiBTPyAnKSonIHwgJygnIFM/ICcjUENEQVRBJyBTPyAnKSdgXG4vLyBbVkM6IFByb3BlciBHcm91cC9QRSBOZXN0aW5nXSBbVkM6IE5vIER1cGxpY2F0ZSBUeXBlc11cbnZhciBNaXhlZCA9IHJlZ2coXG5cdHJlZygvXFwoLywgU19PUFQsIFBDREFUQSwgcmVnZyhTX09QVCwgL1xcfC8sIFNfT1BULCBRTmFtZSksICcqJywgU19PUFQsIC9cXClcXCovKSxcblx0J3wnLFxuXHRyZWcoL1xcKC8sIFNfT1BULCBQQ0RBVEEsIFNfT1BULCAvXFwpLylcbik7XG5cbnZhciBfY2hpbGRyZW5fcXVhbnRpdHkgPSAvWz8qK10/Lztcbi8qXG4gYFs0OV0gY2hvaWNlIDo6PSAnKCcgUz8gY3AgKCBTPyAnfCcgUz8gY3AgKSsgUz8gJyknYCBbVkM6IFByb3BlciBHcm91cC9QRSBOZXN0aW5nXVxuIGBbNTBdIHNlcSA6Oj0gJygnIFM/IGNwICggUz8gJywnIFM/IGNwICkqIFM/ICcpJ2AgW1ZDOiBQcm9wZXIgR3JvdXAvUEUgTmVzdGluZ11cbiBzaW1wbGlmaWNhdGlvbiB0byBzb2x2ZSBjaXJjdWxhciByZWZlcmVuY2luZywgYnV0IGRvZXNuJ3QgY2hlY2sgdmFsaWRpdHkgY29uc3RyYWludCBcIlByb3BlciBHcm91cC9QRSBOZXN0aW5nXCJcbiB2YXIgX2Nob2ljZV9vcl9zZXEgPSByZWcoJ1snLCBOYW1lQ2hhcl9zLCBTQ2hhcl9zLCBjaGFycyhfY2hpbGRyZW5fcXVhbnRpdHkpLCAnKCl8LF0qJyk7XG4gYGBgXG4gWzQ4XSBjcCA6Oj0gKE5hbWUgfCBjaG9pY2UgfCBzZXEpICgnPycgfCAnKicgfCAnKycpP1xuICAgICAgICAgPT09IChOYW1lIHwgJygnIFM/IGNwICggUz8gJ3wnIFM/IGNwICkrIFM/ICcpJyB8ICcoJyBTPyBjcCAoIFM/ICcsJyBTPyBjcCApKiBTPyAnKScpICgnPycgfCAnKicgfCAnKycpP1xuICAgICAgICAgIT09IChOYW1lIHwgW19jaG9pY2Vfb3Jfc2VxXSopICgnPycgfCAnKicgfCAnKycpP1xuIGBgYFxuIHNpbXBsaWZpY2F0aW9uIHRvIHNvbHZlIGNpcmN1bGFyIHJlZmVyZW5jaW5nLCBidXQgZG9lc24ndCBjaGVjayB2YWxpZGl0eSBjb25zdHJhaW50IFwiUHJvcGVyIEdyb3VwL1BFIE5lc3RpbmdcIlxuIHZhciBjcCA9IHJlZyhyZWdnKE5hbWUsICd8JywgX2Nob2ljZV9vcl9zZXEpLCBfY2hpbGRyZW5fcXVhbnRpdHkpO1xuKi9cbi8qXG5JbmVmZmljaWVudCByZWd1bGFyIGV4cHJlc3Npb24gKEhpZ2gpXG5UaGlzIHBhcnQgb2YgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXkgY2F1c2UgZXhwb25lbnRpYWwgYmFja3RyYWNraW5nIG9uIHN0cmluZ3Mgc3RhcnRpbmcgd2l0aCAnKHwnIGFuZCBjb250YWluaW5nIG1hbnkgcmVwZXRpdGlvbnMgb2YgJ3wnLlxuaHR0cHM6Ly9naXRodWIuY29tL3htbGRvbS94bWxkb20vc2VjdXJpdHkvY29kZS1zY2FubmluZy85MVxudmFyIGNob2ljZSA9IHJlZ2coL1xcKC8sIFNfT1BULCBjcCwgcmVnZyhTX09QVCwgL1xcfC8sIFNfT1BULCBjcCksICcrJywgU19PUFQsIC9cXCkvKTtcbiovXG4vKlxuSW5lZmZpY2llbnQgcmVndWxhciBleHByZXNzaW9uIChIaWdoKVxuVGhpcyBwYXJ0IG9mIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gbWF5IGNhdXNlIGV4cG9uZW50aWFsIGJhY2t0cmFja2luZyBvbiBzdHJpbmdzIHN0YXJ0aW5nIHdpdGggJygsJyBhbmQgY29udGFpbmluZyBtYW55IHJlcGV0aXRpb25zIG9mICcsJy5cbmh0dHBzOi8vZ2l0aHViLmNvbS94bWxkb20veG1sZG9tL3NlY3VyaXR5L2NvZGUtc2Nhbm5pbmcvOTJcbnZhciBzZXEgPSByZWdnKC9cXCgvLCBTX09QVCwgY3AsIHJlZ2coU19PUFQsIC8sLywgU19PUFQsIGNwKSwgJyonLCBTX09QVCwgL1xcKS8pO1xuKi9cblxuLy8gYFs0N10gY2hpbGRyZW4gOjo9IChjaG9pY2UgfCBzZXEpICgnPycgfCAnKicgfCAnKycpP2Bcbi8vIHNpbXBsaWZpY2F0aW9uIHRvIHNvbHZlIGNpcmN1bGFyIHJlZmVyZW5jaW5nLCBidXQgZG9lc24ndCBjaGVjayB2YWxpZGl0eSBjb25zdHJhaW50IFwiUHJvcGVyIEdyb3VwL1BFIE5lc3RpbmdcIlxudmFyIGNoaWxkcmVuID0gcmVnKC9cXChbXj5dK1xcKS8sIF9jaGlsZHJlbl9xdWFudGl0eSAvKnJlZ2coY2hvaWNlLCAnfCcsIHNlcSksIF9jaGlsZHJlbl9xdWFudGl0eSovKTtcblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1jb250ZW50c3BlY1xuLy8gYFs0Nl0gY29udGVudHNwZWMgOjo9ICdFTVBUWScgfCAnQU5ZJyB8IE1peGVkIHwgY2hpbGRyZW5gXG52YXIgY29udGVudHNwZWMgPSByZWdnKCdFTVBUWScsICd8JywgJ0FOWScsICd8JywgTWl4ZWQsICd8JywgY2hpbGRyZW4pO1xuXG52YXIgRUxFTUVOVERFQ0xfU1RBUlQgPSAnPCFFTEVNRU5UJztcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtZWxlbWVudGRlY2xcbi8vIGBbNDVdIGVsZW1lbnRkZWNsIDo6PSAnPCFFTEVNRU5UJyBTIE5hbWUgUyBjb250ZW50c3BlYyBTPyAnPidgXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNOVC1lbGVtZW50ZGVjbFxuLy8gYFsxN10gZWxlbWVudGRlY2wgOjo9ICc8IUVMRU1FTlQnIFMgUU5hbWUgUyBjb250ZW50c3BlYyBTPyAnPidgXG4vLyBiZWNhdXNlIG9mIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtUEVSZWZlcmVuY2Vcbi8vIHNpbmNlIHhtbGRvbSBpcyBub3Qgc3VwcG9ydGluZyByZXBsYWNlbWVudHMgb2YgUEVSZWZlcmVuY2VzIGluIHRoZSBEVERcbi8vIHRoaXMgYWxzbyBzdXBwb3J0cyBQRVJlZmVyZW5jZSBpbiB0aGUgcG9zc2libGUgcGxhY2VzXG52YXIgZWxlbWVudGRlY2wgPSByZWcoRUxFTUVOVERFQ0xfU1RBUlQsIFMsIHJlZ2coUU5hbWUsICd8JywgUEVSZWZlcmVuY2UpLCBTLCByZWdnKGNvbnRlbnRzcGVjLCAnfCcsIFBFUmVmZXJlbmNlKSwgU19PUFQsICc+Jyk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtTm90YXRpb25UeXBlXG4vLyBgWzU4XSBOb3RhdGlvblR5cGUgOjo9ICdOT1RBVElPTicgUyAnKCcgUz8gTmFtZSAoUz8gJ3wnIFM/IE5hbWUpKiBTPyAnKSdgXG4vLyBbVkM6IE5vdGF0aW9uIEF0dHJpYnV0ZXNdIFtWQzogT25lIE5vdGF0aW9uIFBlciBFbGVtZW50IFR5cGVdIFtWQzogTm8gTm90YXRpb24gb24gRW1wdHkgRWxlbWVudF0gW1ZDOiBObyBEdXBsaWNhdGUgVG9rZW5zXVxudmFyIE5vdGF0aW9uVHlwZSA9IHJlZygnTk9UQVRJT04nLCBTLCAvXFwoLywgU19PUFQsIE5hbWUsIHJlZ2coU19PUFQsIC9cXHwvLCBTX09QVCwgTmFtZSksICcqJywgU19PUFQsIC9cXCkvKTtcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtRW51bWVyYXRpb25cbi8vIGBbNTldIEVudW1lcmF0aW9uIDo6PSAnKCcgUz8gTm10b2tlbiAoUz8gJ3wnIFM/IE5tdG9rZW4pKiBTPyAnKSdgXG4vLyBbVkM6IEVudW1lcmF0aW9uXSBbVkM6IE5vIER1cGxpY2F0ZSBUb2tlbnNdXG52YXIgRW51bWVyYXRpb24gPSByZWcoL1xcKC8sIFNfT1BULCBObXRva2VuLCByZWdnKFNfT1BULCAvXFx8LywgU19PUFQsIE5tdG9rZW4pLCAnKicsIFNfT1BULCAvXFwpLyk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtRW51bWVyYXRlZFR5cGVcbi8vIGBbNTddIEVudW1lcmF0ZWRUeXBlIDo6PSBOb3RhdGlvblR5cGUgfCBFbnVtZXJhdGlvbmBcbnZhciBFbnVtZXJhdGVkVHlwZSA9IHJlZ2coTm90YXRpb25UeXBlLCAnfCcsIEVudW1lcmF0aW9uKTtcblxuLypcbmBgYFxuWzU1XSBTdHJpbmdUeXBlIDo6PSAnQ0RBVEEnXG5bNTZdIFRva2VuaXplZFR5cGUgOjo9ICdJRCcgW1ZDOiBJRF0gW1ZDOiBPbmUgSUQgcGVyIEVsZW1lbnQgVHlwZV0gW1ZDOiBJRCBBdHRyaWJ1dGUgRGVmYXVsdF1cbiAgIHwgJ0lEUkVGJyBbVkM6IElEUkVGXVxuICAgfCAnSURSRUZTJyBbVkM6IElEUkVGXVxuXHQgfCAnRU5USVRZJyBbVkM6IEVudGl0eSBOYW1lXVxuXHQgfCAnRU5USVRJRVMnIFtWQzogRW50aXR5IE5hbWVdXG5cdCB8ICdOTVRPS0VOJyBbVkM6IE5hbWUgVG9rZW5dXG5cdCB8ICdOTVRPS0VOUycgW1ZDOiBOYW1lIFRva2VuXVxuIFs1NF0gQXR0VHlwZSA6Oj0gU3RyaW5nVHlwZSB8IFRva2VuaXplZFR5cGUgfCBFbnVtZXJhdGVkVHlwZVxuYGBgKi9cbnZhciBBdHRUeXBlID0gcmVnZygvQ0RBVEF8SUR8SURSRUZ8SURSRUZTfEVOVElUWXxFTlRJVElFU3xOTVRPS0VOfE5NVE9LRU5TLywgJ3wnLCBFbnVtZXJhdGVkVHlwZSk7XG5cbi8vIGBbNjBdIERlZmF1bHREZWNsIDo6PSAnI1JFUVVJUkVEJyB8ICcjSU1QTElFRCcgfCAoKCcjRklYRUQnIFMpPyBBdHRWYWx1ZSlgXG4vLyBbV0ZDOiBObyA8IGluIEF0dHJpYnV0ZSBWYWx1ZXNdIFtXRkM6IE5vIEV4dGVybmFsIEVudGl0eSBSZWZlcmVuY2VzXVxuLy8gW1ZDOiBGaXhlZCBBdHRyaWJ1dGUgRGVmYXVsdF0gW1ZDOiBSZXF1aXJlZCBBdHRyaWJ1dGVdIFtWQzogQXR0cmlidXRlIERlZmF1bHQgVmFsdWUgU3ludGFjdGljYWxseSBDb3JyZWN0XVxudmFyIERlZmF1bHREZWNsID0gcmVnZygvI1JFUVVJUkVEfCNJTVBMSUVELywgJ3wnLCByZWdnKHJlZ2coJyNGSVhFRCcsIFMpLCAnPycsIEF0dFZhbHVlKSk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtQXR0RGVmXG4vLyBbNTNdIEF0dERlZiA6Oj0gUyBOYW1lIFMgQXR0VHlwZSBTIERlZmF1bHREZWNsXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNOVC1BdHREZWZcbi8vIFsxXSBOU0F0dE5hbWUgOjo9IFByZWZpeGVkQXR0TmFtZSB8IERlZmF1bHRBdHROYW1lXG4vLyBbMl0gUHJlZml4ZWRBdHROYW1lIDo6PSAneG1sbnM6JyBOQ05hbWUgW05TQzogUmVzZXJ2ZWQgUHJlZml4ZXMgYW5kIE5hbWVzcGFjZSBOYW1lc11cbi8vIFszXSBEZWZhdWx0QXR0TmFtZSA6Oj0gJ3htbG5zJ1xuLy8gWzIxXSBBdHREZWYgOjo9IFMgKFFOYW1lIHwgTlNBdHROYW1lKSBTIEF0dFR5cGUgUyBEZWZhdWx0RGVjbFxuLy8gXHRcdFx0XHRcdFx0ID09PSBTIE5hbWUgUyBBdHRUeXBlIFMgRGVmYXVsdERlY2xcbi8vIHhtbGRvbSBpcyBub3QgZGlzdGluZ3Vpc2hpbmcgYmV0d2VlbiBRTmFtZSBhbmQgTlNBdHROYW1lIG9uIHRoaXMgbGV2ZWxcbi8vIHRvIHN1cHBvcnQgWE1MIHdpdGhvdXQgbmFtZXNwYWNlcyBpbiBEVEQgd2UgY2FuIG5vdCByZXN0cmljdCBpdCB0byBRTmFtZVxudmFyIEF0dERlZiA9IHJlZ2coUywgTmFtZSwgUywgQXR0VHlwZSwgUywgRGVmYXVsdERlY2wpO1xuXG52YXIgQVRUTElTVF9ERUNMX1NUQVJUID0gJzwhQVRUTElTVCc7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUF0dGxpc3REZWNsXG4vLyBgWzUyXSBBdHRsaXN0RGVjbCA6Oj0gJzwhQVRUTElTVCcgUyBOYW1lIEF0dERlZiogUz8gJz4nYFxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC1uYW1lcy8jTlQtQXR0bGlzdERlY2xcbi8vIGBbMjBdIEF0dGxpc3REZWNsIDo6PSAnPCFBVFRMSVNUJyBTIFFOYW1lIEF0dERlZiogUz8gJz4nYFxuLy8gdG8gc3VwcG9ydCBYTUwgd2l0aG91dCBuYW1lc3BhY2VzIGluIERURCB3ZSBjYW4gbm90IHJlc3RyaWN0IGl0IHRvIFFOYW1lXG52YXIgQXR0bGlzdERlY2wgPSByZWcoQVRUTElTVF9ERUNMX1NUQVJULCBTLCBOYW1lLCBBdHREZWYsICcqJywgU19PUFQsICc+Jyk7XG5cbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3VybHMtYW5kLWZldGNoaW5nLmh0bWwjYWJvdXQ6bGVnYWN5LWNvbXBhdFxudmFyIEFCT1VUX0xFR0FDWV9DT01QQVQgPSAnYWJvdXQ6bGVnYWN5LWNvbXBhdCc7XG52YXIgQUJPVVRfTEVHQUNZX0NPTVBBVF9TeXN0ZW1MaXRlcmFsID0gcmVnZygnXCInICsgQUJPVVRfTEVHQUNZX0NPTVBBVCArICdcIicsICd8JywgXCInXCIgKyBBQk9VVF9MRUdBQ1lfQ09NUEFUICsgXCInXCIpO1xudmFyIFNZU1RFTSA9ICdTWVNURU0nO1xudmFyIFBVQkxJQyA9ICdQVUJMSUMnO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1FeHRlcm5hbElEXG4vLyBgWzc1XSBFeHRlcm5hbElEIDo6PSAnU1lTVEVNJyBTIFN5c3RlbUxpdGVyYWwgfCAnUFVCTElDJyBTIFB1YmlkTGl0ZXJhbCBTIFN5c3RlbUxpdGVyYWxgXG52YXIgRXh0ZXJuYWxJRCA9IHJlZ2cocmVnZyhTWVNURU0sIFMsIFN5c3RlbUxpdGVyYWwpLCAnfCcsIHJlZ2coUFVCTElDLCBTLCBQdWJpZExpdGVyYWwsIFMsIFN5c3RlbUxpdGVyYWwpKTtcbnZhciBFeHRlcm5hbElEX21hdGNoID0gcmVnKFxuXHQnXicsXG5cdHJlZ2coXG5cdFx0cmVnZyhTWVNURU0sIFMsICcoPzxTeXN0ZW1MaXRlcmFsT25seT4nLCBTeXN0ZW1MaXRlcmFsLCAnKScpLFxuXHRcdCd8Jyxcblx0XHRyZWdnKFBVQkxJQywgUywgJyg/PFB1YmlkTGl0ZXJhbD4nLCBQdWJpZExpdGVyYWwsICcpJywgUywgJyg/PFN5c3RlbUxpdGVyYWw+JywgU3lzdGVtTGl0ZXJhbCwgJyknKVxuXHQpXG4pO1xuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULU5EYXRhRGVjbFxuLy8gYFs3Nl0gTkRhdGFEZWNsIDo6PSBTICdOREFUQScgUyBOYW1lYCBbVkM6IE5vdGF0aW9uIERlY2xhcmVkXVxudmFyIE5EYXRhRGVjbCA9IHJlZ2coUywgJ05EQVRBJywgUywgTmFtZSk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtRW50aXR5RGVmXG4vLyBgWzczXSBFbnRpdHlEZWYgOjo9IEVudGl0eVZhbHVlIHwgKEV4dGVybmFsSUQgTkRhdGFEZWNsPylgXG52YXIgRW50aXR5RGVmID0gcmVnZyhFbnRpdHlWYWx1ZSwgJ3wnLCByZWdnKEV4dGVybmFsSUQsIE5EYXRhRGVjbCwgJz8nKSk7XG5cbnZhciBFTlRJVFlfREVDTF9TVEFSVCA9ICc8IUVOVElUWSc7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUdFRGVjbFxuLy8gYFs3MV0gR0VEZWNsIDo6PSAnPCFFTlRJVFknIFMgTmFtZSBTIEVudGl0eURlZiBTPyAnPidgXG52YXIgR0VEZWNsID0gcmVnKEVOVElUWV9ERUNMX1NUQVJULCBTLCBOYW1lLCBTLCBFbnRpdHlEZWYsIFNfT1BULCAnPicpO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1QRURlZlxuLy8gYFs3NF0gUEVEZWYgOjo9IEVudGl0eVZhbHVlIHwgRXh0ZXJuYWxJRGBcbnZhciBQRURlZiA9IHJlZ2coRW50aXR5VmFsdWUsICd8JywgRXh0ZXJuYWxJRCk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULVBFRGVjbFxuLy8gYFs3Ml0gUEVEZWNsIDo6PSAnPCFFTlRJVFknIFMgJyUnIFMgTmFtZSBTIFBFRGVmIFM/ICc+J2BcbnZhciBQRURlY2wgPSByZWcoRU5USVRZX0RFQ0xfU1RBUlQsIFMsICclJywgUywgTmFtZSwgUywgUEVEZWYsIFNfT1BULCAnPicpO1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1FbnRpdHlEZWNsXG4vLyBgWzcwXSBFbnRpdHlEZWNsIDo6PSBHRURlY2wgfCBQRURlY2xgXG52YXIgRW50aXR5RGVjbCA9IHJlZ2coR0VEZWNsLCAnfCcsIFBFRGVjbCk7XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtUHVibGljSURcbi8vIGBbODNdIFB1YmxpY0lEICAgIDo6PSAnUFVCTElDJyBTIFB1YmlkTGl0ZXJhbGBcbnZhciBQdWJsaWNJRCA9IHJlZyhQVUJMSUMsIFMsIFB1YmlkTGl0ZXJhbCk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULU5vdGF0aW9uRGVjbFxuLy8gYFs4Ml0gTm90YXRpb25EZWNsICAgIDo6PSAnPCFOT1RBVElPTicgUyBOYW1lIFMgKEV4dGVybmFsSUQgfCBQdWJsaWNJRCkgUz8gJz4nYCBbVkM6IFVuaXF1ZSBOb3RhdGlvbiBOYW1lXVxudmFyIE5vdGF0aW9uRGVjbCA9IHJlZygnPCFOT1RBVElPTicsIFMsIE5hbWUsIFMsIHJlZ2coRXh0ZXJuYWxJRCwgJ3wnLCBQdWJsaWNJRCksIFNfT1BULCAnPicpO1xuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUVxXG4vLyBgWzI1XSBFcSA6Oj0gUz8gJz0nIFM/YFxudmFyIEVxID0gcmVnKFNfT1BULCAnPScsIFNfT1BUKTtcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI05ULVZlcnNpb25OdW1cbi8vIGBbMjZdIFZlcnNpb25OdW0gOjo9ICcxLicgWzAtOV0rYFxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1WZXJzaW9uTnVtXG4vLyBgWzI2XSBWZXJzaW9uTnVtIDo6PSAnMS4xJ2BcbnZhciBWZXJzaW9uTnVtID0gLzFbLl1cXGQrLztcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtVmVyc2lvbkluZm9cbi8vIGBbMjRdIFZlcnNpb25JbmZvIDo6PSBTICd2ZXJzaW9uJyBFcSAoXCInXCIgVmVyc2lvbk51bSBcIidcIiB8ICdcIicgVmVyc2lvbk51bSAnXCInKWBcbnZhciBWZXJzaW9uSW5mbyA9IHJlZyhTLCAndmVyc2lvbicsIEVxLCByZWdnKFwiJ1wiLCBWZXJzaW9uTnVtLCBcIidcIiwgJ3wnLCAnXCInLCBWZXJzaW9uTnVtLCAnXCInKSk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUVuY05hbWVcbi8vIGBbODFdIEVuY05hbWUgOjo9IFtBLVphLXpdIChbQS1aYS16MC05Ll9dIHwgJy0nKSpgXG52YXIgRW5jTmFtZSA9IC9bQS1aYS16XVstQS1aYS16MC05Ll9dKi87XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULUVuY0RlY2xcbi8vIGBbODBdIEVuY29kaW5nRGVjbCA6Oj0gUyAnZW5jb2RpbmcnIEVxICgnXCInIEVuY05hbWUgJ1wiJyB8IFwiJ1wiIEVuY05hbWUgXCInXCIgKWBcbnZhciBFbmNvZGluZ0RlY2wgPSByZWdnKFMsICdlbmNvZGluZycsIEVxLCByZWdnKCdcIicsIEVuY05hbWUsICdcIicsICd8JywgXCInXCIsIEVuY05hbWUsIFwiJ1wiKSk7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI05ULVNERGVjbFxuLy8gYFszMl0gU0REZWNsIDo6PSBTICdzdGFuZGFsb25lJyBFcSAoKFwiJ1wiICgneWVzJyB8ICdubycpIFwiJ1wiKSB8ICgnXCInICgneWVzJyB8ICdubycpICdcIicpKWBcbnZhciBTRERlY2wgPSByZWdnKFMsICdzdGFuZGFsb25lJywgRXEsIHJlZ2coXCInXCIsIHJlZ2coJ3llcycsICd8JywgJ25vJyksIFwiJ1wiLCAnfCcsICdcIicsIHJlZ2coJ3llcycsICd8JywgJ25vJyksICdcIicpKTtcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwxMS8jTlQtWE1MRGVjbFxuLy8gWzIzXSBYTUxEZWNsIDo6PSAnPD94bWwnIFZlcnNpb25JbmZvIEVuY29kaW5nRGVjbD8gU0REZWNsPyBTPyAnPz4nXG52YXIgWE1MRGVjbCA9IHJlZygvXjxcXD94bWwvLCBWZXJzaW9uSW5mbywgRW5jb2RpbmdEZWNsLCAnPycsIFNERGVjbCwgJz8nLCBTX09QVCwgL1xcPz4vKTtcblxuLypcbiBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNOVC1tYXJrdXBkZWNsXG4gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1tYXJrdXBkZWNsXG4gYFsyOV0gbWFya3VwZGVjbCA6Oj0gZWxlbWVudGRlY2wgfCBBdHRsaXN0RGVjbCB8IEVudGl0eURlY2wgfCBOb3RhdGlvbkRlY2wgfCBQSSB8IENvbW1lbnRgXG4gdmFyIG1hcmt1cGRlY2wgPSByZWdnKGVsZW1lbnRkZWNsLCAnfCcsIEF0dGxpc3REZWNsLCAnfCcsIEVudGl0eURlY2wsICd8JywgTm90YXRpb25EZWNsLCAnfCcsIFBJX3Vuc2FmZSwgJ3wnLCBDb21tZW50KTtcbiovXG4vKlxuIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwtbmFtZXMvI05ULWRvY3R5cGVkZWNsXG5gWzI4YV0gRGVjbFNlcCAgIDo6PSBQRVJlZmVyZW5jZSB8IFNgXG4gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1pbnRTdWJzZXRcbmBgYFxuIFsyOGJdIGludFN1YnNldCA6Oj0gKG1hcmt1cGRlY2wgfCBEZWNsU2VwKSpcbiAgICAgICAgICAgICAgICAgPT09IChtYXJrdXBkZWNsIHwgUEVSZWZlcmVuY2UgfCBTKSpcbmBgYFxuIFtXRkM6IFBFIEJldHdlZW4gRGVjbGFyYXRpb25zXVxuIHZhciBpbnRTdWJzZXQgPSByZWcocmVnZyhtYXJrdXBkZWNsLCAnfCcsIFBFUmVmZXJlbmNlLCAnfCcsIFMpLCAnKicpO1xuKi9cbnZhciBET0NUWVBFX0RFQ0xfU1RBUlQgPSAnPCFET0NUWVBFJztcbi8qXG4gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1kb2N0eXBlZGVjbFxuIGBbMjhdIGRvY3R5cGVkZWNsIDo6PSAnPCFET0NUWVBFJyBTIE5hbWUgKFMgRXh0ZXJuYWxJRCk/IFM/ICgnWycgaW50U3Vic2V0ICddJyBTPyk/ICc+J2BcbiBodHRwczovL3d3dy5hZnRlcndhcmRzdzMub3JnL1RSL3htbC1uYW1lcy8jTlQtZG9jdHlwZWRlY2xcbiBgWzE2XSBkb2N0eXBlZGVjbCA6Oj0gJzwhRE9DVFlQRScgUyBRTmFtZSAoUyBFeHRlcm5hbElEKT8gUz8gKCdbJyAobWFya3VwZGVjbCB8IFBFUmVmZXJlbmNlIHwgUykqICddJyBTPyk/ICc+J2BcbiB2YXIgZG9jdHlwZWRlY2wgPSByZWcoJzwhRE9DVFlQRScsIFMsIE5hbWUsIHJlZ2coUywgRXh0ZXJuYWxJRCksICc/JywgU19PUFQsIHJlZ2coL1xcWy8sIGludFN1YnNldCwgL10vLCBTX09QVCksICc/JywgJz4nKTtcbiovXG5cbnZhciBDREFUQV9TVEFSVCA9ICc8IVtDREFUQVsnO1xudmFyIENEQVRBX0VORCA9ICddXT4nO1xudmFyIENEU3RhcnQgPSAvPCFcXFtDREFUQVxcWy87XG52YXIgQ0RFbmQgPSAvXFxdXFxdPi87XG52YXIgQ0RhdGEgPSByZWcoQ2hhciwgJyo/JywgQ0RFbmQpO1xuLypcbiBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNkdC1jZHNlY3Rpb25cbiBgWzE4XSAgIFx0Q0RTZWN0XHQgICA6Oj0gICBcdENEU3RhcnQgQ0RhdGEgQ0RFbmRgXG4gYFsxOV0gICBcdENEU3RhcnRcdCAgIDo6PSAgIFx0JzwhW0NEQVRBWydgXG4gYFsyMF0gICBcdENEYXRhXHQgICA6Oj0gICBcdChDaGFyKiAtIChDaGFyKiAnXV0+JyBDaGFyKikpYFxuIGBbMjFdICAgXHRDREVuZFx0ICAgOjo9ICAgXHQnXV0+J2BcbiovXG52YXIgQ0RTZWN0ID0gcmVnKENEU3RhcnQsIENEYXRhKTtcblxuLy8gdW5pdCB0ZXN0ZWRcbmV4cG9ydHMuY2hhcnMgPSBjaGFycztcbmV4cG9ydHMuY2hhcnNfd2l0aG91dCA9IGNoYXJzX3dpdGhvdXQ7XG5leHBvcnRzLmRldGVjdFVuaWNvZGVTdXBwb3J0ID0gZGV0ZWN0VW5pY29kZVN1cHBvcnQ7XG5leHBvcnRzLnJlZyA9IHJlZztcbmV4cG9ydHMucmVnZyA9IHJlZ2c7XG5leHBvcnRzLkFCT1VUX0xFR0FDWV9DT01QQVQgPSBBQk9VVF9MRUdBQ1lfQ09NUEFUO1xuZXhwb3J0cy5BQk9VVF9MRUdBQ1lfQ09NUEFUX1N5c3RlbUxpdGVyYWwgPSBBQk9VVF9MRUdBQ1lfQ09NUEFUX1N5c3RlbUxpdGVyYWw7XG5leHBvcnRzLkF0dGxpc3REZWNsID0gQXR0bGlzdERlY2w7XG5leHBvcnRzLkNEQVRBX1NUQVJUID0gQ0RBVEFfU1RBUlQ7XG5leHBvcnRzLkNEQVRBX0VORCA9IENEQVRBX0VORDtcbmV4cG9ydHMuQ0RTZWN0ID0gQ0RTZWN0O1xuZXhwb3J0cy5DaGFyID0gQ2hhcjtcbmV4cG9ydHMuQ29tbWVudCA9IENvbW1lbnQ7XG5leHBvcnRzLkNPTU1FTlRfU1RBUlQgPSBDT01NRU5UX1NUQVJUO1xuZXhwb3J0cy5DT01NRU5UX0VORCA9IENPTU1FTlRfRU5EO1xuZXhwb3J0cy5ET0NUWVBFX0RFQ0xfU1RBUlQgPSBET0NUWVBFX0RFQ0xfU1RBUlQ7XG5leHBvcnRzLmVsZW1lbnRkZWNsID0gZWxlbWVudGRlY2w7XG5leHBvcnRzLkVudGl0eURlY2wgPSBFbnRpdHlEZWNsO1xuZXhwb3J0cy5FbnRpdHlWYWx1ZSA9IEVudGl0eVZhbHVlO1xuZXhwb3J0cy5FeHRlcm5hbElEID0gRXh0ZXJuYWxJRDtcbmV4cG9ydHMuRXh0ZXJuYWxJRF9tYXRjaCA9IEV4dGVybmFsSURfbWF0Y2g7XG5leHBvcnRzLk5hbWUgPSBOYW1lO1xuZXhwb3J0cy5Ob3RhdGlvbkRlY2wgPSBOb3RhdGlvbkRlY2w7XG5leHBvcnRzLlJlZmVyZW5jZSA9IFJlZmVyZW5jZTtcbmV4cG9ydHMuUEVSZWZlcmVuY2UgPSBQRVJlZmVyZW5jZTtcbmV4cG9ydHMuUEkgPSBQSTtcbmV4cG9ydHMuUFVCTElDID0gUFVCTElDO1xuZXhwb3J0cy5QdWJpZExpdGVyYWwgPSBQdWJpZExpdGVyYWw7XG5leHBvcnRzLlFOYW1lID0gUU5hbWU7XG5leHBvcnRzLlFOYW1lX2V4YWN0ID0gUU5hbWVfZXhhY3Q7XG5leHBvcnRzLlFOYW1lX2dyb3VwID0gUU5hbWVfZ3JvdXA7XG5leHBvcnRzLlMgPSBTO1xuZXhwb3J0cy5TQ2hhcl9zID0gU0NoYXJfcztcbmV4cG9ydHMuU19PUFQgPSBTX09QVDtcbmV4cG9ydHMuU1lTVEVNID0gU1lTVEVNO1xuZXhwb3J0cy5TeXN0ZW1MaXRlcmFsID0gU3lzdGVtTGl0ZXJhbDtcbmV4cG9ydHMuVU5JQ09ERV9SRVBMQUNFTUVOVF9DSEFSQUNURVIgPSBVTklDT0RFX1JFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbmV4cG9ydHMuVU5JQ09ERV9TVVBQT1JUID0gVU5JQ09ERV9TVVBQT1JUO1xuZXhwb3J0cy5YTUxEZWNsID0gWE1MRGVjbDtcbiJdLCJuYW1lcyI6WyJkZXRlY3RVbmljb2RlU3VwcG9ydCIsIlJlZ0V4cEltcGwiLCJSZWdFeHAiLCJtYXRjaCIsImV4ZWMiLCJsZW5ndGgiLCJlcnJvciIsIlVOSUNPREVfU1VQUE9SVCIsImNoYXJzIiwicmVnZXhwIiwic291cmNlIiwiRXJyb3IiLCJzbGljZSIsImxhc3RJbmRleE9mIiwiY2hhcnNfd2l0aG91dCIsInNlYXJjaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmRleE9mIiwicmVwbGFjZSIsInJlZyIsImFyZ3MiLCJzZWxmIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwiYXJndW1lbnRzIiwibWFwIiwicGFydCIsImlzU3RyIiwidW5kZWZpbmVkIiwiam9pbiIsInJlZ2ciLCJhcHBseSIsImNvbmNhdCIsIlVOSUNPREVfUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIiwiQ2hhciIsIl9TQ2hhciIsIlNDaGFyX3MiLCJTIiwiU19PUFQiLCJOYW1lU3RhcnRDaGFyIiwiTmFtZVN0YXJ0Q2hhcl9zIiwiTmFtZUNoYXIiLCJOYW1lIiwiTm10b2tlbiIsIkVudGl0eVJlZiIsIkNoYXJSZWYiLCJSZWZlcmVuY2UiLCJQRVJlZmVyZW5jZSIsIkVudGl0eVZhbHVlIiwiQXR0VmFsdWUiLCJOQ05hbWVTdGFydENoYXIiLCJOQ05hbWVDaGFyIiwiTkNOYW1lIiwiUU5hbWUiLCJRTmFtZV9leGFjdCIsIlFOYW1lX2dyb3VwIiwiU3lzdGVtTGl0ZXJhbCIsIlBJIiwiUHViaWRDaGFyIiwiUHViaWRMaXRlcmFsIiwiQ09NTUVOVF9TVEFSVCIsIkNPTU1FTlRfRU5EIiwiQ29tbWVudCIsIlBDREFUQSIsIk1peGVkIiwiX2NoaWxkcmVuX3F1YW50aXR5IiwiY2hpbGRyZW4iLCJjb250ZW50c3BlYyIsIkVMRU1FTlRERUNMX1NUQVJUIiwiZWxlbWVudGRlY2wiLCJOb3RhdGlvblR5cGUiLCJFbnVtZXJhdGlvbiIsIkVudW1lcmF0ZWRUeXBlIiwiQXR0VHlwZSIsIkRlZmF1bHREZWNsIiwiQXR0RGVmIiwiQVRUTElTVF9ERUNMX1NUQVJUIiwiQXR0bGlzdERlY2wiLCJBQk9VVF9MRUdBQ1lfQ09NUEFUIiwiQUJPVVRfTEVHQUNZX0NPTVBBVF9TeXN0ZW1MaXRlcmFsIiwiU1lTVEVNIiwiUFVCTElDIiwiRXh0ZXJuYWxJRCIsIkV4dGVybmFsSURfbWF0Y2giLCJORGF0YURlY2wiLCJFbnRpdHlEZWYiLCJFTlRJVFlfREVDTF9TVEFSVCIsIkdFRGVjbCIsIlBFRGVmIiwiUEVEZWNsIiwiRW50aXR5RGVjbCIsIlB1YmxpY0lEIiwiTm90YXRpb25EZWNsIiwiRXEiLCJWZXJzaW9uTnVtIiwiVmVyc2lvbkluZm8iLCJFbmNOYW1lIiwiRW5jb2RpbmdEZWNsIiwiU0REZWNsIiwiWE1MRGVjbCIsIkRPQ1RZUEVfREVDTF9TVEFSVCIsIkNEQVRBX1NUQVJUIiwiQ0RBVEFfRU5EIiwiQ0RTdGFydCIsIkNERW5kIiwiQ0RhdGEiLCJDRFNlY3QiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/grammar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar conventions = __webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nexports.assign = conventions.assign;\nexports.hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;\nexports.isHTMLMimeType = conventions.isHTMLMimeType;\nexports.isValidMimeType = conventions.isValidMimeType;\nexports.MIME_TYPE = conventions.MIME_TYPE;\nexports.NAMESPACE = conventions.NAMESPACE;\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js\");\nexports.DOMException = errors.DOMException;\nexports.DOMExceptionName = errors.DOMExceptionName;\nexports.ExceptionCode = errors.ExceptionCode;\nexports.ParseError = errors.ParseError;\nvar dom = __webpack_require__(/*! ./dom */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/dom.js\");\nexports.Attr = dom.Attr;\nexports.CDATASection = dom.CDATASection;\nexports.CharacterData = dom.CharacterData;\nexports.Comment = dom.Comment;\nexports.Document = dom.Document;\nexports.DocumentFragment = dom.DocumentFragment;\nexports.DocumentType = dom.DocumentType;\nexports.DOMImplementation = dom.DOMImplementation;\nexports.Element = dom.Element;\nexports.Entity = dom.Entity;\nexports.EntityReference = dom.EntityReference;\nexports.LiveNodeList = dom.LiveNodeList;\nexports.NamedNodeMap = dom.NamedNodeMap;\nexports.Node = dom.Node;\nexports.NodeList = dom.NodeList;\nexports.Notation = dom.Notation;\nexports.ProcessingInstruction = dom.ProcessingInstruction;\nexports.Text = dom.Text;\nexports.XMLSerializer = dom.XMLSerializer;\nvar domParser = __webpack_require__(/*! ./dom-parser */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/dom-parser.js\");\nexports.DOMParser = domParser.DOMParser;\nexports.normalizeLineEndings = domParser.normalizeLineEndings;\nexports.onErrorStopParsing = domParser.onErrorStopParsing;\nexports.onWarningStopParsing = domParser.onWarningStopParsing;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFDMUJDLGNBQWMsR0FBR0YsWUFBWUcsTUFBTTtBQUNuQ0QsK0JBQStCLEdBQUdGLFlBQVlJLHVCQUF1QjtBQUNyRUYsc0JBQXNCLEdBQUdGLFlBQVlLLGNBQWM7QUFDbkRILHVCQUF1QixHQUFHRixZQUFZTSxlQUFlO0FBQ3JESixpQkFBaUIsR0FBR0YsWUFBWU8sU0FBUztBQUN6Q0wsaUJBQWlCLEdBQUdGLFlBQVlRLFNBQVM7QUFFekMsSUFBSUMsU0FBU1IsbUJBQU9BLENBQUM7QUFDckJDLG9CQUFvQixHQUFHTyxPQUFPQyxZQUFZO0FBQzFDUix3QkFBd0IsR0FBR08sT0FBT0UsZ0JBQWdCO0FBQ2xEVCxxQkFBcUIsR0FBR08sT0FBT0csYUFBYTtBQUM1Q1Ysa0JBQWtCLEdBQUdPLE9BQU9JLFVBQVU7QUFFdEMsSUFBSUMsTUFBTWIsbUJBQU9BLENBQUM7QUFDbEJDLFlBQVksR0FBR1ksSUFBSUMsSUFBSTtBQUN2QmIsb0JBQW9CLEdBQUdZLElBQUlFLFlBQVk7QUFDdkNkLHFCQUFxQixHQUFHWSxJQUFJRyxhQUFhO0FBQ3pDZixlQUFlLEdBQUdZLElBQUlJLE9BQU87QUFDN0JoQixnQkFBZ0IsR0FBR1ksSUFBSUssUUFBUTtBQUMvQmpCLHdCQUF3QixHQUFHWSxJQUFJTSxnQkFBZ0I7QUFDL0NsQixvQkFBb0IsR0FBR1ksSUFBSU8sWUFBWTtBQUN2Q25CLHlCQUF5QixHQUFHWSxJQUFJUSxpQkFBaUI7QUFDakRwQixlQUFlLEdBQUdZLElBQUlTLE9BQU87QUFDN0JyQixjQUFjLEdBQUdZLElBQUlVLE1BQU07QUFDM0J0Qix1QkFBdUIsR0FBR1ksSUFBSVcsZUFBZTtBQUM3Q3ZCLG9CQUFvQixHQUFHWSxJQUFJWSxZQUFZO0FBQ3ZDeEIsb0JBQW9CLEdBQUdZLElBQUlhLFlBQVk7QUFDdkN6QixZQUFZLEdBQUdZLElBQUljLElBQUk7QUFDdkIxQixnQkFBZ0IsR0FBR1ksSUFBSWUsUUFBUTtBQUMvQjNCLGdCQUFnQixHQUFHWSxJQUFJZ0IsUUFBUTtBQUMvQjVCLDZCQUE2QixHQUFHWSxJQUFJaUIscUJBQXFCO0FBQ3pEN0IsWUFBWSxHQUFHWSxJQUFJa0IsSUFBSTtBQUN2QjlCLHFCQUFxQixHQUFHWSxJQUFJbUIsYUFBYTtBQUV6QyxJQUFJQyxZQUFZakMsbUJBQU9BLENBQUM7QUFDeEJDLGlCQUFpQixHQUFHZ0MsVUFBVUMsU0FBUztBQUN2Q2pDLDRCQUE0QixHQUFHZ0MsVUFBVUUsb0JBQW9CO0FBQzdEbEMsMEJBQTBCLEdBQUdnQyxVQUFVRyxrQkFBa0I7QUFDekRuQyw0QkFBNEIsR0FBR2dDLFVBQVVJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jpa2UtcmVudGFsLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2luZGV4LmpzPzYyYzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbnZlbnRpb25zID0gcmVxdWlyZSgnLi9jb252ZW50aW9ucycpO1xuZXhwb3J0cy5hc3NpZ24gPSBjb252ZW50aW9ucy5hc3NpZ247XG5leHBvcnRzLmhhc0RlZmF1bHRIVE1MTmFtZXNwYWNlID0gY29udmVudGlvbnMuaGFzRGVmYXVsdEhUTUxOYW1lc3BhY2U7XG5leHBvcnRzLmlzSFRNTE1pbWVUeXBlID0gY29udmVudGlvbnMuaXNIVE1MTWltZVR5cGU7XG5leHBvcnRzLmlzVmFsaWRNaW1lVHlwZSA9IGNvbnZlbnRpb25zLmlzVmFsaWRNaW1lVHlwZTtcbmV4cG9ydHMuTUlNRV9UWVBFID0gY29udmVudGlvbnMuTUlNRV9UWVBFO1xuZXhwb3J0cy5OQU1FU1BBQ0UgPSBjb252ZW50aW9ucy5OQU1FU1BBQ0U7XG5cbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuZXhwb3J0cy5ET01FeGNlcHRpb24gPSBlcnJvcnMuRE9NRXhjZXB0aW9uO1xuZXhwb3J0cy5ET01FeGNlcHRpb25OYW1lID0gZXJyb3JzLkRPTUV4Y2VwdGlvbk5hbWU7XG5leHBvcnRzLkV4Y2VwdGlvbkNvZGUgPSBlcnJvcnMuRXhjZXB0aW9uQ29kZTtcbmV4cG9ydHMuUGFyc2VFcnJvciA9IGVycm9ycy5QYXJzZUVycm9yO1xuXG52YXIgZG9tID0gcmVxdWlyZSgnLi9kb20nKTtcbmV4cG9ydHMuQXR0ciA9IGRvbS5BdHRyO1xuZXhwb3J0cy5DREFUQVNlY3Rpb24gPSBkb20uQ0RBVEFTZWN0aW9uO1xuZXhwb3J0cy5DaGFyYWN0ZXJEYXRhID0gZG9tLkNoYXJhY3RlckRhdGE7XG5leHBvcnRzLkNvbW1lbnQgPSBkb20uQ29tbWVudDtcbmV4cG9ydHMuRG9jdW1lbnQgPSBkb20uRG9jdW1lbnQ7XG5leHBvcnRzLkRvY3VtZW50RnJhZ21lbnQgPSBkb20uRG9jdW1lbnRGcmFnbWVudDtcbmV4cG9ydHMuRG9jdW1lbnRUeXBlID0gZG9tLkRvY3VtZW50VHlwZTtcbmV4cG9ydHMuRE9NSW1wbGVtZW50YXRpb24gPSBkb20uRE9NSW1wbGVtZW50YXRpb247XG5leHBvcnRzLkVsZW1lbnQgPSBkb20uRWxlbWVudDtcbmV4cG9ydHMuRW50aXR5ID0gZG9tLkVudGl0eTtcbmV4cG9ydHMuRW50aXR5UmVmZXJlbmNlID0gZG9tLkVudGl0eVJlZmVyZW5jZTtcbmV4cG9ydHMuTGl2ZU5vZGVMaXN0ID0gZG9tLkxpdmVOb2RlTGlzdDtcbmV4cG9ydHMuTmFtZWROb2RlTWFwID0gZG9tLk5hbWVkTm9kZU1hcDtcbmV4cG9ydHMuTm9kZSA9IGRvbS5Ob2RlO1xuZXhwb3J0cy5Ob2RlTGlzdCA9IGRvbS5Ob2RlTGlzdDtcbmV4cG9ydHMuTm90YXRpb24gPSBkb20uTm90YXRpb247XG5leHBvcnRzLlByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGRvbS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5leHBvcnRzLlRleHQgPSBkb20uVGV4dDtcbmV4cG9ydHMuWE1MU2VyaWFsaXplciA9IGRvbS5YTUxTZXJpYWxpemVyO1xuXG52YXIgZG9tUGFyc2VyID0gcmVxdWlyZSgnLi9kb20tcGFyc2VyJyk7XG5leHBvcnRzLkRPTVBhcnNlciA9IGRvbVBhcnNlci5ET01QYXJzZXI7XG5leHBvcnRzLm5vcm1hbGl6ZUxpbmVFbmRpbmdzID0gZG9tUGFyc2VyLm5vcm1hbGl6ZUxpbmVFbmRpbmdzO1xuZXhwb3J0cy5vbkVycm9yU3RvcFBhcnNpbmcgPSBkb21QYXJzZXIub25FcnJvclN0b3BQYXJzaW5nO1xuZXhwb3J0cy5vbldhcm5pbmdTdG9wUGFyc2luZyA9IGRvbVBhcnNlci5vbldhcm5pbmdTdG9wUGFyc2luZztcbiJdLCJuYW1lcyI6WyJjb252ZW50aW9ucyIsInJlcXVpcmUiLCJleHBvcnRzIiwiYXNzaWduIiwiaGFzRGVmYXVsdEhUTUxOYW1lc3BhY2UiLCJpc0hUTUxNaW1lVHlwZSIsImlzVmFsaWRNaW1lVHlwZSIsIk1JTUVfVFlQRSIsIk5BTUVTUEFDRSIsImVycm9ycyIsIkRPTUV4Y2VwdGlvbiIsIkRPTUV4Y2VwdGlvbk5hbWUiLCJFeGNlcHRpb25Db2RlIiwiUGFyc2VFcnJvciIsImRvbSIsIkF0dHIiLCJDREFUQVNlY3Rpb24iLCJDaGFyYWN0ZXJEYXRhIiwiQ29tbWVudCIsIkRvY3VtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsIkRvY3VtZW50VHlwZSIsIkRPTUltcGxlbWVudGF0aW9uIiwiRWxlbWVudCIsIkVudGl0eSIsIkVudGl0eVJlZmVyZW5jZSIsIkxpdmVOb2RlTGlzdCIsIk5hbWVkTm9kZU1hcCIsIk5vZGUiLCJOb2RlTGlzdCIsIk5vdGF0aW9uIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiVGV4dCIsIlhNTFNlcmlhbGl6ZXIiLCJkb21QYXJzZXIiLCJET01QYXJzZXIiLCJub3JtYWxpemVMaW5lRW5kaW5ncyIsIm9uRXJyb3JTdG9wUGFyc2luZyIsIm9uV2FybmluZ1N0b3BQYXJzaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@xmldom/xmldom/lib/sax.js":
/*!************************************************!*\
  !*** ./node_modules/@xmldom/xmldom/lib/sax.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar conventions = __webpack_require__(/*! ./conventions */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar g = __webpack_require__(/*! ./grammar */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/grammar.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@xmldom/xmldom/lib/errors.js\");\nvar isHTMLEscapableRawTextElement = conventions.isHTMLEscapableRawTextElement;\nvar isHTMLMimeType = conventions.isHTMLMimeType;\nvar isHTMLRawTextElement = conventions.isHTMLRawTextElement;\nvar hasOwn = conventions.hasOwn;\nvar NAMESPACE = conventions.NAMESPACE;\nvar ParseError = errors.ParseError;\nvar DOMException = errors.DOMException;\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_SPACE = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\nvar S_ATTR_END = 5; //attr value end and no space(quot end)\nvar S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7; //closed el<el />\nfunction XMLReader() {}\nXMLReader.prototype = {\n    parse: function(source, defaultNSMap, entityMap) {\n        var domBuilder = this.domBuilder;\n        domBuilder.startDocument();\n        _copy(defaultNSMap, defaultNSMap = Object.create(null));\n        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);\n        domBuilder.endDocument();\n    }\n};\n/**\n * Detecting everything that might be a reference,\n * including those without ending `;`, since those are allowed in HTML.\n * The entityReplacer takes care of verifying and transforming each occurrence,\n * and reports to the errorHandler on those that are not OK,\n * depending on the context.\n */ var ENTITY_REG = /&#?\\w+;?/g;\nfunction parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n    var isHTML = isHTMLMimeType(domBuilder.mimeType);\n    if (source.indexOf(g.UNICODE_REPLACEMENT_CHARACTER) >= 0) {\n        errorHandler.warning(\"Unicode replacement character detected, source encoding issues?\");\n    }\n    function fixedFromCharCode(code) {\n        // String.prototype.fromCharCode does not supports\n        // > 2 bytes unicode chars directly\n        if (code > 0xffff) {\n            code -= 0x10000;\n            var surrogate1 = 0xd800 + (code >> 10), surrogate2 = 0xdc00 + (code & 0x3ff);\n            return String.fromCharCode(surrogate1, surrogate2);\n        } else {\n            return String.fromCharCode(code);\n        }\n    }\n    function entityReplacer(a) {\n        var complete = a[a.length - 1] === \";\" ? a : a + \";\";\n        if (!isHTML && complete !== a) {\n            errorHandler.error(\"EntityRef: expecting ;\");\n            return a;\n        }\n        var match = g.Reference.exec(complete);\n        if (!match || match[0].length !== complete.length) {\n            errorHandler.error(\"entity not matching Reference production: \" + a);\n            return a;\n        }\n        var k = complete.slice(1, -1);\n        if (hasOwn(entityMap, k)) {\n            return entityMap[k];\n        } else if (k.charAt(0) === \"#\") {\n            return fixedFromCharCode(parseInt(k.substring(1).replace(\"x\", \"0x\")));\n        } else {\n            errorHandler.error(\"entity not found:\" + a);\n            return a;\n        }\n    }\n    function appendText(end) {\n        //has some bugs\n        if (end > start) {\n            var xt = source.substring(start, end).replace(ENTITY_REG, entityReplacer);\n            locator && position(start);\n            domBuilder.characters(xt, 0, end - start);\n            start = end;\n        }\n    }\n    var lineStart = 0;\n    var lineEnd = 0;\n    var linePattern = /\\r\\n?|\\n|$/g;\n    var locator = domBuilder.locator;\n    function position(p, m) {\n        while(p >= lineEnd && (m = linePattern.exec(source))){\n            lineStart = lineEnd;\n            lineEnd = m.index + m[0].length;\n            locator.lineNumber++;\n        }\n        locator.columnNumber = p - lineStart + 1;\n    }\n    var parseStack = [\n        {\n            currentNSMap: defaultNSMapCopy\n        }\n    ];\n    var unclosedTags = [];\n    var start = 0;\n    while(true){\n        try {\n            var tagStart = source.indexOf(\"<\", start);\n            if (tagStart < 0) {\n                if (!isHTML && unclosedTags.length > 0) {\n                    return errorHandler.fatalError(\"unclosed xml tag(s): \" + unclosedTags.join(\", \"));\n                }\n                if (!source.substring(start).match(/^\\s*$/)) {\n                    var doc = domBuilder.doc;\n                    var text = doc.createTextNode(source.substring(start));\n                    if (doc.documentElement) {\n                        return errorHandler.error(\"Extra content at the end of the document\");\n                    }\n                    doc.appendChild(text);\n                    domBuilder.currentElement = text;\n                }\n                return;\n            }\n            if (tagStart > start) {\n                var fromSource = source.substring(start, tagStart);\n                if (!isHTML && unclosedTags.length === 0) {\n                    fromSource = fromSource.replace(new RegExp(g.S_OPT.source, \"g\"), \"\");\n                    fromSource && errorHandler.error(\"Unexpected content outside root element: '\" + fromSource + \"'\");\n                }\n                appendText(tagStart);\n            }\n            switch(source.charAt(tagStart + 1)){\n                case \"/\":\n                    var end = source.indexOf(\">\", tagStart + 2);\n                    var tagNameRaw = source.substring(tagStart + 2, end > 0 ? end : undefined);\n                    if (!tagNameRaw) {\n                        return errorHandler.fatalError(\"end tag name missing\");\n                    }\n                    var tagNameMatch = end > 0 && g.reg(\"^\", g.QName_group, g.S_OPT, \"$\").exec(tagNameRaw);\n                    if (!tagNameMatch) {\n                        return errorHandler.fatalError('end tag name contains invalid characters: \"' + tagNameRaw + '\"');\n                    }\n                    if (!domBuilder.currentElement && !domBuilder.doc.documentElement) {\n                        // not enough information to provide a helpful error message,\n                        // but parsing will throw since there is no root element\n                        return;\n                    }\n                    var currentTagName = unclosedTags[unclosedTags.length - 1] || domBuilder.currentElement.tagName || domBuilder.doc.documentElement.tagName || \"\";\n                    if (currentTagName !== tagNameMatch[1]) {\n                        var tagNameLower = tagNameMatch[1].toLowerCase();\n                        if (!isHTML || currentTagName.toLowerCase() !== tagNameLower) {\n                            return errorHandler.fatalError('Opening and ending tag mismatch: \"' + currentTagName + '\" != \"' + tagNameRaw + '\"');\n                        }\n                    }\n                    var config = parseStack.pop();\n                    unclosedTags.pop();\n                    var localNSMap = config.localNSMap;\n                    domBuilder.endElement(config.uri, config.localName, currentTagName);\n                    if (localNSMap) {\n                        for(var prefix in localNSMap){\n                            if (hasOwn(localNSMap, prefix)) {\n                                domBuilder.endPrefixMapping(prefix);\n                            }\n                        }\n                    }\n                    end++;\n                    break;\n                // end element\n                case \"?\":\n                    locator && position(tagStart);\n                    end = parseProcessingInstruction(source, tagStart, domBuilder, errorHandler);\n                    break;\n                case \"!\":\n                    locator && position(tagStart);\n                    end = parseDoctypeCommentOrCData(source, tagStart, domBuilder, errorHandler, isHTML);\n                    break;\n                default:\n                    locator && position(tagStart);\n                    var el = new ElementAttributes();\n                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n                    //elStartEnd\n                    var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler, isHTML);\n                    var len = el.length;\n                    if (!el.closed) {\n                        if (isHTML && conventions.isHTMLVoidElement(el.tagName)) {\n                            el.closed = true;\n                        } else {\n                            unclosedTags.push(el.tagName);\n                        }\n                    }\n                    if (locator && len) {\n                        var locator2 = copyLocator(locator, {});\n                        //try{//attribute position fixed\n                        for(var i = 0; i < len; i++){\n                            var a = el[i];\n                            position(a.offset);\n                            a.locator = copyLocator(locator, {});\n                        }\n                        domBuilder.locator = locator2;\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                        domBuilder.locator = locator;\n                    } else {\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                    }\n                    if (isHTML && !el.closed) {\n                        end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n                    } else {\n                        end++;\n                    }\n            }\n        } catch (e) {\n            if (e instanceof ParseError) {\n                throw e;\n            } else if (e instanceof DOMException) {\n                throw new ParseError(e.name + \": \" + e.message, domBuilder.locator, e);\n            }\n            errorHandler.error(\"element parse error: \" + e);\n            end = -1;\n        }\n        if (end > start) {\n            start = end;\n        } else {\n            //Possible sax fallback here, risk of positional error\n            appendText(Math.max(tagStart, start) + 1);\n        }\n    }\n}\nfunction copyLocator(f, t) {\n    t.lineNumber = f.lineNumber;\n    t.columnNumber = f.columnNumber;\n    return t;\n}\n/**\n * @returns\n * end of the elementStartPart(end of elementEndPart for selfClosed el)\n * @see {@link #appendElement}\n */ function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler, isHTML) {\n    /**\n\t * @param {string} qname\n\t * @param {string} value\n\t * @param {number} startIndex\n\t */ function addAttribute(qname, value, startIndex) {\n        if (hasOwn(el.attributeNames, qname)) {\n            return errorHandler.fatalError(\"Attribute \" + qname + \" redefined\");\n        }\n        if (!isHTML && value.indexOf(\"<\") >= 0) {\n            return errorHandler.fatalError(\"Unescaped '<' not allowed in attributes values\");\n        }\n        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize\n        // since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\n        // - recursive replacement of (DTD) entity references\n        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\n        value.replace(/[\\t\\n\\r]/g, \" \").replace(ENTITY_REG, entityReplacer), startIndex);\n    }\n    var attrName;\n    var value;\n    var p = ++start;\n    var s = S_TAG; //status\n    while(true){\n        var c = source.charAt(p);\n        switch(c){\n            case \"=\":\n                if (s === S_ATTR) {\n                    //attrName\n                    attrName = source.slice(start, p);\n                    s = S_EQ;\n                } else if (s === S_ATTR_SPACE) {\n                    s = S_EQ;\n                } else {\n                    //fatalError: equal must after attrName or space after attrName\n                    throw new Error(\"attribute equal must after attrName\"); // No known test case\n                }\n                break;\n            case \"'\":\n            case '\"':\n                if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n                ) {\n                    //equal\n                    if (s === S_ATTR) {\n                        errorHandler.warning('attribute value must after \"=\"');\n                        attrName = source.slice(start, p);\n                    }\n                    start = p + 1;\n                    p = source.indexOf(c, start);\n                    if (p > 0) {\n                        value = source.slice(start, p);\n                        addAttribute(attrName, value, start - 1);\n                        s = S_ATTR_END;\n                    } else {\n                        //fatalError: no end quot match\n                        throw new Error(\"attribute value no end '\" + c + \"' match\");\n                    }\n                } else if (s == S_ATTR_NOQUOT_VALUE) {\n                    value = source.slice(start, p);\n                    addAttribute(attrName, value, start);\n                    errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + \")!!\");\n                    start = p + 1;\n                    s = S_ATTR_END;\n                } else {\n                    //fatalError: no equal before\n                    throw new Error('attribute value must after \"=\"'); // No known test case\n                }\n                break;\n            case \"/\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        s = S_TAG_CLOSE;\n                        el.closed = true;\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        break;\n                    case S_ATTR_SPACE:\n                        el.closed = true;\n                        break;\n                    //case S_EQ:\n                    default:\n                        throw new Error(\"attribute invalid close char('/')\"); // No known test case\n                }\n                break;\n            case \"\":\n                errorHandler.error(\"unexpected end of input\");\n                if (s == S_TAG) {\n                    el.setTagName(source.slice(start, p));\n                }\n                return p;\n            case \">\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        break; //normal\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        value = source.slice(start, p);\n                        if (value.slice(-1) === \"/\") {\n                            el.closed = true;\n                            value = value.slice(0, -1);\n                        }\n                    case S_ATTR_SPACE:\n                        if (s === S_ATTR_SPACE) {\n                            value = attrName;\n                        }\n                        if (s == S_ATTR_NOQUOT_VALUE) {\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!');\n                            addAttribute(attrName, value, start);\n                        } else {\n                            if (!isHTML) {\n                                errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n                            }\n                            addAttribute(value, value, start);\n                        }\n                        break;\n                    case S_EQ:\n                        if (!isHTML) {\n                            return errorHandler.fatalError(\"AttValue: ' or \\\" expected\");\n                        }\n                }\n                return p;\n            /*xml space '\\x20' | #x9 | #xD | #xA; */ case \"\\x80\":\n                c = \" \";\n            default:\n                if (c <= \" \") {\n                    //space\n                    switch(s){\n                        case S_TAG:\n                            el.setTagName(source.slice(start, p)); //tagName\n                            s = S_TAG_SPACE;\n                            break;\n                        case S_ATTR:\n                            attrName = source.slice(start, p);\n                            s = S_ATTR_SPACE;\n                            break;\n                        case S_ATTR_NOQUOT_VALUE:\n                            var value = source.slice(start, p);\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n                            addAttribute(attrName, value, start);\n                        case S_ATTR_END:\n                            s = S_TAG_SPACE;\n                            break;\n                    }\n                } else {\n                    //not space\n                    //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n                    //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n                    switch(s){\n                        //case S_TAG:void();break;\n                        //case S_ATTR:void();break;\n                        //case S_ATTR_NOQUOT_VALUE:void();break;\n                        case S_ATTR_SPACE:\n                            if (!isHTML) {\n                                errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\n                            }\n                            addAttribute(attrName, attrName, start);\n                            start = p;\n                            s = S_ATTR;\n                            break;\n                        case S_ATTR_END:\n                            errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n                        case S_TAG_SPACE:\n                            s = S_ATTR;\n                            start = p;\n                            break;\n                        case S_EQ:\n                            s = S_ATTR_NOQUOT_VALUE;\n                            start = p;\n                            break;\n                        case S_TAG_CLOSE:\n                            throw new Error(\"elements closed character '/' and '>' must be connected to\");\n                    }\n                }\n        } //end outer switch\n        p++;\n    }\n}\n/**\n * @returns\n * `true` if a new namespace has been defined.\n */ function appendElement(el, domBuilder, currentNSMap) {\n    var tagName = el.tagName;\n    var localNSMap = null;\n    var i = el.length;\n    while(i--){\n        var a = el[i];\n        var qName = a.qName;\n        var value = a.value;\n        var nsp = qName.indexOf(\":\");\n        if (nsp > 0) {\n            var prefix = a.prefix = qName.slice(0, nsp);\n            var localName = qName.slice(nsp + 1);\n            var nsPrefix = prefix === \"xmlns\" && localName;\n        } else {\n            localName = qName;\n            prefix = null;\n            nsPrefix = qName === \"xmlns\" && \"\";\n        }\n        //can not set prefix,because prefix !== ''\n        a.localName = localName;\n        //prefix == null for no ns prefix attribute\n        if (nsPrefix !== false) {\n            //hack!!\n            if (localNSMap == null) {\n                localNSMap = Object.create(null);\n                _copy(currentNSMap, currentNSMap = Object.create(null));\n            }\n            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n            a.uri = NAMESPACE.XMLNS;\n            domBuilder.startPrefixMapping(nsPrefix, value);\n        }\n    }\n    var i = el.length;\n    while(i--){\n        a = el[i];\n        if (a.prefix) {\n            //no prefix attribute has no namespace\n            if (a.prefix === \"xml\") {\n                a.uri = NAMESPACE.XML;\n            }\n            if (a.prefix !== \"xmlns\") {\n                a.uri = currentNSMap[a.prefix];\n            }\n        }\n    }\n    var nsp = tagName.indexOf(\":\");\n    if (nsp > 0) {\n        prefix = el.prefix = tagName.slice(0, nsp);\n        localName = el.localName = tagName.slice(nsp + 1);\n    } else {\n        prefix = null; //important!!\n        localName = el.localName = tagName;\n    }\n    //no prefix element has default namespace\n    var ns = el.uri = currentNSMap[prefix || \"\"];\n    domBuilder.startElement(ns, localName, tagName, el);\n    //endPrefixMapping and startPrefixMapping have not any help for dom builder\n    //localNSMap = null\n    if (el.closed) {\n        domBuilder.endElement(ns, localName, tagName);\n        if (localNSMap) {\n            for(prefix in localNSMap){\n                if (hasOwn(localNSMap, prefix)) {\n                    domBuilder.endPrefixMapping(prefix);\n                }\n            }\n        }\n    } else {\n        el.currentNSMap = currentNSMap;\n        el.localNSMap = localNSMap;\n        //parseStack.push(el);\n        return true;\n    }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n    // https://html.spec.whatwg.org/#raw-text-elements\n    // https://html.spec.whatwg.org/#escapable-raw-text-elements\n    // https://html.spec.whatwg.org/#cdata-rcdata-restrictions:raw-text-elements\n    // TODO: https://html.spec.whatwg.org/#cdata-rcdata-restrictions\n    var isEscapableRaw = isHTMLEscapableRawTextElement(tagName);\n    if (isEscapableRaw || isHTMLRawTextElement(tagName)) {\n        var elEndStart = source.indexOf(\"</\" + tagName + \">\", elStartEnd);\n        var text = source.substring(elStartEnd + 1, elEndStart);\n        if (isEscapableRaw) {\n            text = text.replace(ENTITY_REG, entityReplacer);\n        }\n        domBuilder.characters(text, 0, text.length);\n        return elEndStart;\n    }\n    return elStartEnd + 1;\n}\nfunction _copy(source, target) {\n    for(var n in source){\n        if (hasOwn(source, n)) {\n            target[n] = source[n];\n        }\n    }\n}\n/**\n * @typedef ParseUtils\n * @property {function(relativeIndex: number?): string | undefined} char\n * Provides look ahead access to a singe character relative to the current index.\n * @property {function(): number} getIndex\n * Provides read-only access to the current index.\n * @property {function(reg: RegExp): string | null} getMatch\n * Applies the provided regular expression enforcing that it starts at the current index and\n * returns the complete matching string,\n * and moves the current index by the length of the matching string.\n * @property {function(): string} getSource\n * Provides read-only access to the complete source.\n * @property {function(places: number?): void} skip\n * moves the current index by places (defaults to 1)\n * @property {function(): number} skipBlanks\n * Moves the current index by the amount of white space that directly follows the current index\n * and returns the amount of whitespace chars skipped (0..n),\n * or -1 if the end of the source was reached.\n * @property {function(): string} substringFromIndex\n * creates a substring from the current index to the end of `source`\n * @property {function(compareWith: string): boolean} substringStartsWith\n * Checks if `source` contains `compareWith`, starting from the current index.\n * @property {function(compareWith: string): boolean} substringStartsWithCaseInsensitive\n * Checks if `source` contains `compareWith`, starting from the current index,\n * comparing the upper case of both sides.\n * @see {@link parseUtils}\n */ /**\n * A temporary scope for parsing and look ahead operations in `source`,\n * starting from index `start`.\n *\n * Some operations move the current index by a number of positions,\n * after which `getIndex` returns the new index.\n *\n * @param {string} source\n * @param {number} start\n * @returns {ParseUtils}\n */ function parseUtils(source, start) {\n    var index = start;\n    function char(n) {\n        n = n || 0;\n        return source.charAt(index + n);\n    }\n    function skip(n) {\n        n = n || 1;\n        index += n;\n    }\n    function skipBlanks() {\n        var blanks = 0;\n        while(index < source.length){\n            var c = char();\n            if (c !== \" \" && c !== \"\\n\" && c !== \"\t\" && c !== \"\\r\") {\n                return blanks;\n            }\n            blanks++;\n            skip();\n        }\n        return -1;\n    }\n    function substringFromIndex() {\n        return source.substring(index);\n    }\n    function substringStartsWith(text) {\n        return source.substring(index, index + text.length) === text;\n    }\n    function substringStartsWithCaseInsensitive(text) {\n        return source.substring(index, index + text.length).toUpperCase() === text.toUpperCase();\n    }\n    function getMatch(args) {\n        var expr = g.reg(\"^\", args);\n        var match = expr.exec(substringFromIndex());\n        if (match) {\n            skip(match[0].length);\n            return match[0];\n        }\n        return null;\n    }\n    return {\n        char: char,\n        getIndex: function() {\n            return index;\n        },\n        getMatch: getMatch,\n        getSource: function() {\n            return source;\n        },\n        skip: skip,\n        skipBlanks: skipBlanks,\n        substringFromIndex: substringFromIndex,\n        substringStartsWith: substringStartsWith,\n        substringStartsWithCaseInsensitive: substringStartsWithCaseInsensitive\n    };\n}\n/**\n * @param {ParseUtils} p\n * @param {DOMHandler} errorHandler\n * @returns {string}\n */ function parseDoctypeInternalSubset(p, errorHandler) {\n    /**\n\t * @param {ParseUtils} p\n\t * @param {DOMHandler} errorHandler\n\t * @returns {string}\n\t */ function parsePI(p, errorHandler) {\n        var match = g.PI.exec(p.substringFromIndex());\n        if (!match) {\n            return errorHandler.fatalError(\"processing instruction is not well-formed at position \" + p.getIndex());\n        }\n        if (match[1].toLowerCase() === \"xml\") {\n            return errorHandler.fatalError(\"xml declaration is only allowed at the start of the document, but found at position \" + p.getIndex());\n        }\n        p.skip(match[0].length);\n        return match[0];\n    }\n    // Parse internal subset\n    var source = p.getSource();\n    if (p.char() === \"[\") {\n        p.skip(1);\n        var intSubsetStart = p.getIndex();\n        while(p.getIndex() < source.length){\n            p.skipBlanks();\n            if (p.char() === \"]\") {\n                var internalSubset = source.substring(intSubsetStart, p.getIndex());\n                p.skip(1);\n                return internalSubset;\n            }\n            var current = null;\n            // Only in external subset\n            // if (char() === '<' && char(1) === '!' && char(2) === '[') {\n            // \tparseConditionalSections(p, errorHandler);\n            // } else\n            if (p.char() === \"<\" && p.char(1) === \"!\") {\n                switch(p.char(2)){\n                    case \"E\":\n                        if (p.char(3) === \"L\") {\n                            current = p.getMatch(g.elementdecl);\n                        } else if (p.char(3) === \"N\") {\n                            current = p.getMatch(g.EntityDecl);\n                        }\n                        break;\n                    case \"A\":\n                        current = p.getMatch(g.AttlistDecl);\n                        break;\n                    case \"N\":\n                        current = p.getMatch(g.NotationDecl);\n                        break;\n                    case \"-\":\n                        current = p.getMatch(g.Comment);\n                        break;\n                }\n            } else if (p.char() === \"<\" && p.char(1) === \"?\") {\n                current = parsePI(p, errorHandler);\n            } else if (p.char() === \"%\") {\n                current = p.getMatch(g.PEReference);\n            } else {\n                return errorHandler.fatalError(\"Error detected in Markup declaration\");\n            }\n            if (!current) {\n                return errorHandler.fatalError(\"Error in internal subset at position \" + p.getIndex());\n            }\n        }\n        return errorHandler.fatalError(\"doctype internal subset is not well-formed, missing ]\");\n    }\n}\n/**\n * Called when the parser encounters an element starting with '<!'.\n *\n * @param {string} source\n * The xml.\n * @param {number} start\n * the start index of the '<!'\n * @param {DOMHandler} domBuilder\n * @param {DOMHandler} errorHandler\n * @param {boolean} isHTML\n * @returns {number | never}\n * The end index of the element.\n * @throws {ParseError}\n * In case the element is not well-formed.\n */ function parseDoctypeCommentOrCData(source, start, domBuilder, errorHandler, isHTML) {\n    var p = parseUtils(source, start);\n    switch(isHTML ? p.char(2).toUpperCase() : p.char(2)){\n        case \"-\":\n            // should be a comment\n            var comment = p.getMatch(g.Comment);\n            if (comment) {\n                domBuilder.comment(comment, g.COMMENT_START.length, comment.length - g.COMMENT_START.length - g.COMMENT_END.length);\n                return p.getIndex();\n            } else {\n                return errorHandler.fatalError(\"comment is not well-formed at position \" + p.getIndex());\n            }\n        case \"[\":\n            // should be CDATA\n            var cdata = p.getMatch(g.CDSect);\n            if (cdata) {\n                if (!isHTML && !domBuilder.currentElement) {\n                    return errorHandler.fatalError(\"CDATA outside of element\");\n                }\n                domBuilder.startCDATA();\n                domBuilder.characters(cdata, g.CDATA_START.length, cdata.length - g.CDATA_START.length - g.CDATA_END.length);\n                domBuilder.endCDATA();\n                return p.getIndex();\n            } else {\n                return errorHandler.fatalError(\"Invalid CDATA starting at position \" + start);\n            }\n        case \"D\":\n            {\n                // should be DOCTYPE\n                if (domBuilder.doc && domBuilder.doc.documentElement) {\n                    return errorHandler.fatalError(\"Doctype not allowed inside or after documentElement at position \" + p.getIndex());\n                }\n                if (isHTML ? !p.substringStartsWithCaseInsensitive(g.DOCTYPE_DECL_START) : !p.substringStartsWith(g.DOCTYPE_DECL_START)) {\n                    return errorHandler.fatalError(\"Expected \" + g.DOCTYPE_DECL_START + \" at position \" + p.getIndex());\n                }\n                p.skip(g.DOCTYPE_DECL_START.length);\n                if (p.skipBlanks() < 1) {\n                    return errorHandler.fatalError(\"Expected whitespace after \" + g.DOCTYPE_DECL_START + \" at position \" + p.getIndex());\n                }\n                var doctype = {\n                    name: undefined,\n                    publicId: undefined,\n                    systemId: undefined,\n                    internalSubset: undefined\n                };\n                // Parse the DOCTYPE name\n                doctype.name = p.getMatch(g.Name);\n                if (!doctype.name) return errorHandler.fatalError(\"doctype name missing or contains unexpected characters at position \" + p.getIndex());\n                if (isHTML && doctype.name.toLowerCase() !== \"html\") {\n                    errorHandler.warning(\"Unexpected DOCTYPE in HTML document at position \" + p.getIndex());\n                }\n                p.skipBlanks();\n                // Check for ExternalID\n                if (p.substringStartsWith(g.PUBLIC) || p.substringStartsWith(g.SYSTEM)) {\n                    var match = g.ExternalID_match.exec(p.substringFromIndex());\n                    if (!match) {\n                        return errorHandler.fatalError(\"doctype external id is not well-formed at position \" + p.getIndex());\n                    }\n                    if (match.groups.SystemLiteralOnly !== undefined) {\n                        doctype.systemId = match.groups.SystemLiteralOnly;\n                    } else {\n                        doctype.systemId = match.groups.SystemLiteral;\n                        doctype.publicId = match.groups.PubidLiteral;\n                    }\n                    p.skip(match[0].length);\n                } else if (isHTML && p.substringStartsWithCaseInsensitive(g.SYSTEM)) {\n                    // https://html.spec.whatwg.org/multipage/syntax.html#doctype-legacy-string\n                    p.skip(g.SYSTEM.length);\n                    if (p.skipBlanks() < 1) {\n                        return errorHandler.fatalError(\"Expected whitespace after \" + g.SYSTEM + \" at position \" + p.getIndex());\n                    }\n                    doctype.systemId = p.getMatch(g.ABOUT_LEGACY_COMPAT_SystemLiteral);\n                    if (!doctype.systemId) {\n                        return errorHandler.fatalError(\"Expected \" + g.ABOUT_LEGACY_COMPAT + \" in single or double quotes after \" + g.SYSTEM + \" at position \" + p.getIndex());\n                    }\n                }\n                if (isHTML && doctype.systemId && !g.ABOUT_LEGACY_COMPAT_SystemLiteral.test(doctype.systemId)) {\n                    errorHandler.warning(\"Unexpected doctype.systemId in HTML document at position \" + p.getIndex());\n                }\n                if (!isHTML) {\n                    p.skipBlanks();\n                    doctype.internalSubset = parseDoctypeInternalSubset(p, errorHandler);\n                }\n                p.skipBlanks();\n                if (p.char() !== \">\") {\n                    return errorHandler.fatalError(\"doctype not terminated with > at position \" + p.getIndex());\n                }\n                p.skip(1);\n                domBuilder.startDTD(doctype.name, doctype.publicId, doctype.systemId, doctype.internalSubset);\n                domBuilder.endDTD();\n                return p.getIndex();\n            }\n        default:\n            return errorHandler.fatalError('Not well-formed XML starting with \"<!\" at position ' + start);\n    }\n}\nfunction parseProcessingInstruction(source, start, domBuilder, errorHandler) {\n    var match = source.substring(start).match(g.PI);\n    if (!match) {\n        return errorHandler.fatalError(\"Invalid processing instruction starting at position \" + start);\n    }\n    if (match[1].toLowerCase() === \"xml\") {\n        if (start > 0) {\n            return errorHandler.fatalError(\"processing instruction at position \" + start + \" is an xml declaration which is only at the start of the document\");\n        }\n        if (!g.XMLDecl.test(source.substring(start))) {\n            return errorHandler.fatalError(\"xml declaration is not well-formed\");\n        }\n    }\n    domBuilder.processingInstruction(match[1], match[2]);\n    return start + match[0].length;\n}\nfunction ElementAttributes() {\n    this.attributeNames = Object.create(null);\n}\nElementAttributes.prototype = {\n    setTagName: function(tagName) {\n        if (!g.QName_exact.test(tagName)) {\n            throw new Error(\"invalid tagName:\" + tagName);\n        }\n        this.tagName = tagName;\n    },\n    addValue: function(qName, value, offset) {\n        if (!g.QName_exact.test(qName)) {\n            throw new Error(\"invalid attribute:\" + qName);\n        }\n        this.attributeNames[qName] = this.length;\n        this[this.length++] = {\n            qName: qName,\n            value: value,\n            offset: offset\n        };\n    },\n    length: 0,\n    getLocalName: function(i) {\n        return this[i].localName;\n    },\n    getLocator: function(i) {\n        return this[i].locator;\n    },\n    getQName: function(i) {\n        return this[i].qName;\n    },\n    getURI: function(i) {\n        return this[i].uri;\n    },\n    getValue: function(i) {\n        return this[i].value;\n    }\n};\nexports.XMLReader = XMLReader;\nexports.parseUtils = parseUtils;\nexports.parseDoctypeCommentOrCData = parseDoctypeCommentOrCData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@xmldom/xmldom/lib/sax.js\n");

/***/ })

};
;