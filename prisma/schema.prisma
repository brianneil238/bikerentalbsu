generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  useIid                    String              @id @default(cuid())
  name                      String?
  email                     String              @unique
  emailVerified             DateTime?
  image                     String?
  password                  String
  role                      UserRole            @default(STUDENT)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  
  // Relations
  applications              BikeRentalApplication[]
  maintenance               MaintenanceRecord[]
  notifications             Notification[]
  rentals                   Rental[]

  @@map("users")
}

// Bike Rental Application Form
model BikeRentalApplication {
  id                        String              @id @default(cuid())
  userId                    String
  
  // Personal Information
  firstName                 String
  lastName                  String
  middleName                String?
  srCode                    String
  sex                       String
  dateOfBirth               DateTime
  phoneNumber               String
  email                     String
  
  // Academic Information  
  collegeProgram            String
  gwaLastSemester           Float?
  extracurricularActivities String?
  
  // Address Information
  houseNo                   String
  streetName                String
  barangay                  String
  municipalityCity          String
  province                  String
  distanceFromCampus        String
  
  // Financial & Usage Information
  monthlyFamilyIncome       Float?
  durationOfUse             String
  
  // Application Status
  status                    ApplicationStatus   @default(PENDING)
  submittedAt               DateTime            @default(now())
  reviewedAt                DateTime?
  reviewedBy                String?
  notes                     String?
  
  // Relations
  user                      User                @relation(fields: [userId], references: [useIid])
  
  @@map("bike_rental_applications")
}

model Bike {
  id              String              @id @default(cuid())
  bikeNumber      String              @unique
  status          BikeStatus          @default(AVAILABLE)
  model           String
  lastMaintenance DateTime?
  purchaseDate    DateTime
  currentLocation Json?
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  locationHistory LocationHistory[]
  maintenance     MaintenanceRecord[]
  rentals         Rental[]

  @@map("bikes")
}

model Rental {
  id              String            @id @default(cuid())
  userId          String
  bikeId          String
  startTime       DateTime          @default(now())
  endTime         DateTime?
  status          RentalStatus      @default(ACTIVE)
  distance        Float?
  carbonSaved     Float?
  totalCost       Float?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  pdfUrl          String?
  locationHistory LocationHistory[]
  bike            Bike              @relation(fields: [bikeId], references: [id])
  user            User              @relation(fields: [userId], references: [useIid])

  @@map("rentals")
}

model MaintenanceRecord {
  id          String            @id @default(cuid())
  bikeId      String
  userId      String
  type        MaintenanceType
  description String
  cost        Float?
  startDate   DateTime          @default(now())
  endDate     DateTime?
  status      MaintenanceStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  bike        Bike              @relation(fields: [bikeId], references: [id])
  user        User              @relation(fields: [userId], references: [useIid])

  @@map("maintenance_records")
}

model LocationHistory {
  id        String   @id @default(cuid())
  bikeId    String
  rentalId  String?
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  zone      String?
  bike      Bike     @relation(fields: [bikeId], references: [id])
  rental    Rental?  @relation(fields: [rentalId], references: [id])

  @@map("location_history")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [useIid])

  @@map("notifications")
}

model Analytics {
  id               String   @id @default(cuid())
  date             DateTime @default(now())
  totalRides       Int
  totalDistance    Float
  totalCarbonSaved Float
  activeUsers      Int
  bikeUtilization  Float
  maintenanceCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("analytics")
}

enum UserRole {
  STUDENT
  TEACHING_STAFF
  NON_TEACHING_STAFF
  ADMIN
}

enum BikeStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  RENTED
}

enum RentalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  REPLACEMENT
  INSPECTION
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  MAINTENANCE_REQUIRED
  ZONE_VIOLATION
  RENTAL_REMINDER
  SYSTEM_ALERT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}
